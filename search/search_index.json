{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Get Started!","text":"<p>     Supercharge BigQuerywith BigFunctions Upgrade your data impact     with 100+ ready-to-use BigQuery Functions (+ build a catalog of functions) </p> <p> \u276f       Website |       GitHub      \u276e </p> <p></p>"},{"location":"#1-what-is-bigfunctions","title":"\ud83d\udd0d\ufe0f 1. What is BigFunctions?","text":"<p>BigFunctions is:</p> <p>\u2705 a framework to build a governed catalog of powerful BigQuery functions at YOUR company.</p> <p>\u2705 100+ open-source functions to supercharge BigQuery that you can call directly (no install) or redeploy in YOUR catalog.</p> <p></p>"},{"location":"#2-why-bigfunctions","title":"\ud83d\udca1 2. Why BigFunctions?","text":"<p>As a data-analyst You'll have new powers! (such as loading data from any source or activating your data through reverse ETL).</p> <p>As an analytics-engineer You'll feel at home with BigFunctions style which imitates the one of dbt (with a yaml standard and a CLI). You'll love the idea of getting more things done through SQL.</p> <p>As a data-engineer You'll easily build software-engineering best practices through unit testing, cicd, pull request validation, continuous deployment, etc. You will love avoiding reinventing the wheel by using functions already developed by the community.</p> <p>As a central data-team player in a large company You'll be proud of providing a governed catalog of curated functions to your 10000+ employees with mutualized and maintainable effort.</p> <p>As a security champion You will enjoy the ability to validate the code of functions before deployment thanks to your git validation workflow, CI Testing, binary authorization, etc.</p> <p>As an open-source lover You'll be able to contribute so that a problem solved for you is solved for everyone.</p> <p></p>"},{"location":"#3-call-public-bigfunctions-without-install-from-your-gcp-project","title":"\ud83d\udc40 3. Call public BigFunctions without install from your GCP project","text":"<p>All BigFunctions represented by a 'yaml' file in bigfunctions folder of the GitHub repo are automatically deployed in public datasets so that you can call them directly without install from your BigQuery project.</p> <p>Give it a try! Execute this SQL query from your GCP Project \ud83d\udc40:</p> <pre><code>select bigfunctions.eu.faker(\"name\", \"it_IT\")\n</code></pre> <p>Explore all available bigfunctions here.</p> <p></p>"},{"location":"#4-deploy-bigfunctions-in-your-gcp-project","title":"\ud83d\ude80 4. Deploy BigFunctions in your GCP project","text":"<p>You can also deploy any bigfunction in your project! To deploy my_bigfunction defined in bigfunctions/my_bigfunction.yaml file, simply call:</p> <pre><code>bigfun deploy my_bigfunction\n</code></pre> <p>Details about <code>bigfun</code> command line are given below.</p> <p></p>"},{"location":"#5-bigfun-cli","title":"\ud83d\udca5 5. <code>bigfun</code> CLI","text":"<p><code>bigfun</code> CLI (command-line-interface) facilitates BigFunctions development, test, deployment, documentation and monitoring.</p>"},{"location":"#51-install-bigfun","title":"5.1 Install <code>bigfun</code> \ud83d\udee0\ufe0f","text":"<pre><code>pip install bigfunctions\n</code></pre>"},{"location":"#52-use-bigfun","title":"5.2 Use <code>bigfun</code> \ud83d\udd25","text":"<pre><code>$ bigfun --help\nUsage: bigfun [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  --help  Show this message and exit.\n\nCommands:\n  deploy      Deploy BIGFUNCTION\n  docs        Generate, serve and publish documentation\n  get         Download BIGFUNCTION yaml file from unytics/bigfunctions...\n  test        Test BIGFUNCTION\n</code></pre>"},{"location":"#53-create-you-first-function","title":"5.3 Create you first function \ud83d\udc77","text":"<p>Functions are defined as yaml files under <code>bigfunctions</code> folder. To create your first function locally, the easiest is to download an existing yaml file of unytics/bigfunctions Github repo. </p> <p>For instance to download <code>is_email_valid.yaml</code> into bigfunctions folder, do:</p> <pre><code>bigfun get is_email_valid\n</code></pre> <p>You can then update the file to suit your needs.</p>"},{"location":"#54-deploy-you-first-function","title":"5.4 Deploy you first function \ud83d\udc68\u200d\ud83d\udcbb","text":"<ol> <li>Make sure the <code>gcloud</code> command is installed on your computer</li> <li>Activate the application-default account with <code>gcloud auth application-default login</code>. A browser window should open, and you should be prompted to log into your Google account. Once you've done that, <code>bigfun</code> will use your oauth'd credentials to connect to BigQuery through BigQuery python client!</li> <li>Get or create a <code>DATASET</code> where you have permission to edit data and where the function will be deployed.</li> <li>The <code>DATASET</code> must belong to a <code>PROJECT</code> in which you have permission to run BigQuery queries.</li> </ol> <p>You now can deploy the function <code>is_email_valid</code> defined in <code>bigfunctions/is_email_valid.yaml</code> yaml file by running:</p> <pre><code>bigfun deploy is_email_valid\n</code></pre> <p>The first time you run this command it will ask for <code>PROJECT</code> and <code>DATASET</code>.</p> <p>Your inputs will be written to <code>config.yaml</code> file in current directory so that you won't be asked again (unless you delete the entries in <code>config.yaml</code>). You can also override this config at deploy time: <code>bigfun deploy is_email_valid --project=PROJECT --dataset=DATASET</code>.</p> <p>Test it with \ud83d\udc40:</p> <pre><code>select PROJECT.DATASET.is_email_valid('paul.marcombes@unytics.io')\n</code></pre> <p></p>"},{"location":"#55-deploy-you-first-javascript-function-which-depends-on-npm-packages","title":"5.5 Deploy you first javascript function which depends on npm packages \ud83d\udc7d","text":"<p>To deploy a javascript function which depends on npm packages there are additional requirements in addition to the ones above.</p> <ol> <li>You will need to install each npm package on your machine and bundle it into one file. For that, you need to install nodejs.</li> <li>The bundled js file will be uploaded into a cloud storage bucket in which you must have write access. The bucket name must be provided in <code>config.yaml</code> file in a variable named <code>bucket_js_dependencies</code>. Users of your functions must have read access to the bucket.</li> </ol> <p>You now can deploy the function <code>render_template</code> defined in <code>bigfunctions/render_template.yaml</code> yaml file by running:</p> <pre><code>bigfun deploy render_template\n</code></pre> <p>Test it with \ud83d\udc40:</p> <pre><code>select PROJECT.DATASET.render_template('Hello {{ user }}', json '{\"user\": \"James\"}')\n</code></pre> <p></p>"},{"location":"#56-deploy-you-first-remote-function","title":"5.6 Deploy you first remote function \u26a1\ufe0f","text":"<p>To deploy a remote function (e.g. python function), there are additional requirements in addition to the ones of Deploy you first function section.</p> <ol> <li>A Cloud Run service will be deployed to host the code (as seen here). So you must have permissions to deploy a Cloud Run service in your project <code>PROJECT</code>.</li> <li><code>gcloud</code> CLI will be used directly to deploy the service (using <code>gcloud run deploy</code>). Then, make sure you are logged in with <code>gcloud</code> by calling: <code>gcloud auth login</code>. A browser window should also open, and you should be prompted to log into your Google account. WARNING: you read correctly: you have to authenticate twice. Once for bigquery python client (to deploy any function including remote as seen above.) and once now to use <code>gcloud</code> (to deploy a Cloud Run service).</li> <li>A BigQuery Remote Connection will be created to link BigQuery with the Cloud Run service. You then should have permissions to create a remote connection. BigQuery Connection Admin or BigQuery Admin roles have these permissions.</li> <li>A service account will be automatically created by Google along with the BigQuery Remote Connection. BigQuery will use this service account of the remote connection to invoke the Cloud Run service. You then must have the permission to authorize this service account to invoke the Cloud Run service. This permission is provided in the role roles/run.admin</li> </ol> <p>You now can deploy the function <code>faker</code> defined in <code>bigfunctions/faker.yaml</code> yaml file by running:</p> <pre><code>bigfun deploy faker\n</code></pre> <p>Test it with \ud83d\udc40:</p> <pre><code>select PROJECT.DATASET.faker(\"name\", \"it_IT\")\n</code></pre> <p></p>"},{"location":"#6-contribute","title":"\ud83d\udc4b 6. Contribute","text":"<p>BigFunctions is fully open-source. Any contribution is more than welcome \ud83e\udd17!</p> <ul> <li>Add a \u2b50 on the repo to show your support</li> <li>Join our Slack and talk with us</li> <li>Suggest a new function here</li> <li>Raise an issue there</li> <li>Open a Pull-Request! (See contributing instructions).</li> </ul> <p></p> <p>Contributors</p> <p> </p>"},{"location":"CONTRIBUTING/","title":"\ud83d\udc4b Contribute to BigFunctions","text":"<p>BigFunctions is fully open-source. Any contribution is more than welcome \ud83e\udd17!</p> <ul> <li>Add a \u2b50 on the repo to show your support</li> <li>Join our Slack and talk with us</li> <li>Suggest a new function here</li> <li>Raise an issue there</li> <li>Open a Pull-Request! See instructions below.</li> </ul>"},{"location":"CONTRIBUTING/#how-to-submit-pull-requests","title":"How to submit pull requests","text":"<p>To make a change to this repository:</p> <ol> <li>Fork the repository and create your branch from <code>main</code>.</li> <li>Make your changes.</li> <li>Create a pull request.</li> </ol> <p>(If the change is particularly small, these steps are easily accomplished directly in the GitHub UI.)</p>"},{"location":"CONTRIBUTING/#how-to-create-a-new-open-source-bigfunction","title":"How to create a new open-source BigFunction","text":"<p>Before spending a lot of time to develop a new bigfunction, don't hesitate to reach out through bigfunctions slack (or by email --&gt; paul.marcombes@unytics.io).</p> <p>To start, the best is to duplicate an existing yaml file in 'bigfunctions' folder. Make sure to duplicate a file with the same type (function_sql, aggregate_function_sql, function_js, function_py, procedure) as the one you target.</p> <p>Before submitting a Pull-Request, make sure:</p> <ul> <li>your BigFunction is really useful. If it takes more time to call it than to write its own code, there may be something wrong. For instance, it does not seem appropriate to create a bigfunction that we would call by <code>bigfunctions.eu.is_date_in_range(my_date, start_date, end_date)</code> rather than to write directly <code>my_date between start_date and end_date</code>.</li> <li>bigfunction name is explicit. If the function returns a boolean, it should start with <code>is_</code> or <code>has_</code>. It the function create a vizualisation in BigQuery console it should start with <code>explore_</code>.</li> <li>all arguments/output names are explicit.</li> <li>descriptions are concise.</li> <li>you provide enough examples (edge cases must be provided) but not too much (you should not provide a second example that does not provide more understanding about the function than the first one).</li> <li>you deployed sucessfully your bigfunction by calling <code>bigfun deploy your_bigfunction</code></li> <li>you tested the bigfunction for all the examples you provided and you each time got the expected output. (we plan to create a test command line soon).</li> <li>sql keywords must me lowercased (such as <code>select</code>)</li> </ul>"},{"location":"CONTRIBUTING/#first-contributor","title":"First contributor?","text":"<p>You can contribute by selecting one of these issues which were tagged <code>good-first-issue</code>. If you need any help, don't hesitate to reach out through bigfunctions slack.</p>"},{"location":"CONTRIBUTING/#license","title":"License","text":"<p>By contributing to this repository, you agree that your contributions will be licensed under its MIT License.</p>"},{"location":"bigfunctions/are_arrays_equal/","title":"are_arrays_equal - BigQuery","text":"<p> bigfunctions  &gt; are_arrays_equal </p>"},{"location":"bigfunctions/are_arrays_equal/#are_arrays_equal","title":"are_arrays_equal","text":"<p>Signature <pre><code>are_arrays_equal(array1, array2)\n</code></pre></p> <p>Description</p> <p>Return true if <code>array1</code> = <code>array2</code> and false otherwise</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.are_arrays_equal([1, 4, 3], [1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.are_arrays_equal([1, 4, 3], [1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.are_arrays_equal([1, 4, 3], [1, 4, 3])\n</code></pre> <pre>\n<code>+------------------+\n| are_arrays_equal |\n+------------------+\n| true             |\n+------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.are_arrays_equal([1, 4, 3], [1, 4])\n</code></pre> <pre><code>select bigfunctions.us.are_arrays_equal([1, 4, 3], [1, 4])\n</code></pre> <pre><code>select bigfunctions.europe_west1.are_arrays_equal([1, 4, 3], [1, 4])\n</code></pre> <pre>\n<code>+------------------+\n| are_arrays_equal |\n+------------------+\n| false            |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/array_intersect/","title":"array_intersect - BigQuery","text":"<p> bigfunctions  &gt; array_intersect </p>"},{"location":"bigfunctions/array_intersect/#array_intersect","title":"array_intersect","text":"<p>Signature <pre><code>array_intersect(array1, array2)\n</code></pre></p> <p>Description</p> <p>Returns the intersection of two arrays.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.array_intersect([1, 2, 3], [2, 6, 7])\n</code></pre> <pre><code>select bigfunctions.us.array_intersect([1, 2, 3], [2, 6, 7])\n</code></pre> <pre><code>select bigfunctions.europe_west1.array_intersect([1, 2, 3], [2, 6, 7])\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| [2]    |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/array_union/","title":"array_union - BigQuery","text":"<p> bigfunctions  &gt; array_union </p>"},{"location":"bigfunctions/array_union/#array_union","title":"array_union","text":"<p>Signature <pre><code>array_union(array1, array2)\n</code></pre></p> <p>Description</p> <p>Returns the union of two arrays.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.array_union([1, 2, 3], [2, 6, 7])\n</code></pre> <pre><code>select bigfunctions.us.array_union([1, 2, 3], [2, 6, 7])\n</code></pre> <pre><code>select bigfunctions.europe_west1.array_union([1, 2, 3], [2, 6, 7])\n</code></pre> <pre>\n<code>+-----------------+\n| result          |\n+-----------------+\n| [1, 2, 3, 6, 7] |\n+-----------------+\n</code>\n</pre>"},{"location":"bigfunctions/ask_ai/","title":"ask_ai - BigQuery","text":"<p> bigfunctions  &gt; ask_ai </p>"},{"location":"bigfunctions/ask_ai/#ask_ai","title":"ask_ai","text":"<p>Signature <pre><code>ask_ai(prompt, model)\n</code></pre></p> <p>Description</p> <p>Ask Anything!</p> <p>Google Generative AI <code>model</code> will get you an answer.</p> <p><code>model</code> must be one of:</p> <ul> <li><code>gemini-pro</code></li> <li><code>text-bison@001</code></li> <li><code>text-bison@002</code></li> <li><code>text-unicorn@001</code></li> <li><code>code-bison@001</code></li> <li><code>code-bison@002</code></li> <li>... any future model</li> <li><code>null</code>, then <code>gemini-pro</code> will be used</li> </ul> <p>Default parameters are used for each model.</p> <p>Examples</p> <p>1. Clean data</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ask_ai(\n  '''\n  Question: what is the country from the following user input: 'I live in frace' ?\n  Answer: formatted as alpha three code\n  '''\n  , 'gemini-pro')\n</code></pre> <pre><code>select bigfunctions.us.ask_ai(\n  '''\n  Question: what is the country from the following user input: 'I live in frace' ?\n  Answer: formatted as alpha three code\n  '''\n  , 'gemini-pro')\n</code></pre> <pre><code>select bigfunctions.europe_west1.ask_ai(\n  '''\n  Question: what is the country from the following user input: 'I live in frace' ?\n  Answer: formatted as alpha three code\n  '''\n  , 'gemini-pro')\n</code></pre> <pre>\n<code>+--------+\n| answer |\n+--------+\n| FRA    |\n+--------+\n</code>\n</pre> <p>2. Generate SQL</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ask_ai(\n  '''\n  Question: get the 10 products which generated the most revenue in 2023\n  Table: sales\n  Columns: product_id, price, quantity, timestamp\n  Answer: bigquery sql query\n  '''\n  , 'code-bison@002')\n</code></pre> <pre><code>select bigfunctions.us.ask_ai(\n  '''\n  Question: get the 10 products which generated the most revenue in 2023\n  Table: sales\n  Columns: product_id, price, quantity, timestamp\n  Answer: bigquery sql query\n  '''\n  , 'code-bison@002')\n</code></pre> <pre><code>select bigfunctions.europe_west1.ask_ai(\n  '''\n  Question: get the 10 products which generated the most revenue in 2023\n  Table: sales\n  Columns: product_id, price, quantity, timestamp\n  Answer: bigquery sql query\n  '''\n  , 'code-bison@002')\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| answer                                                                                                                                                                   |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| SELECT product_id, SUM(price * quantity) AS revenue\nFROM sales\nWHERE timestamp BETWEEN '2023-01-01' AND '2023-12-31'\nGROUP BY product_id\nORDER BY revenue DESC\nLIMIT 10\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/ask_appstore_reviews/","title":"ask_appstore_reviews - BigQuery","text":"<p> bigfunctions  &gt; ask_appstore_reviews </p>"},{"location":"bigfunctions/ask_appstore_reviews/#ask_appstore_reviews","title":"ask_appstore_reviews","text":"<p>Signature <pre><code>ask_appstore_reviews(prompt, app_url_in_appstore)\n</code></pre></p> <p>Description</p> <p>Ask AI what your app users think.</p> <p>This function:</p> <ol> <li>Calls <code>get_appstore_reviews</code> function to retrieve the 500 latest user reviews of the mobile app.</li> <li>Builds a prompt using your question and including the retrieved user reviews.</li> <li>Calls <code>ask_ai</code> function to get the prompt answer using <code>gemini-1.5-flash-preview-0514</code> model.</li> </ol> <p>Click the GitHub icon to see the code.</p> <p>Examples</p> <p>Coolest Feature of Blablacar app</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ask_appstore_reviews('What is the coolest feature regarding customers?', 'https://apps.apple.com/fr/app/blablacar-covoiturage-et-bus/id341329033')\n</code></pre> <pre><code>select bigfunctions.us.ask_appstore_reviews('What is the coolest feature regarding customers?', 'https://apps.apple.com/fr/app/blablacar-covoiturage-et-bus/id341329033')\n</code></pre> <pre><code>select bigfunctions.europe_west1.ask_appstore_reviews('What is the coolest feature regarding customers?', 'https://apps.apple.com/fr/app/blablacar-covoiturage-et-bus/id341329033')\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| answer                                                                                                                                                                                                                                                                   |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ## Blablacar App Review Analysis: Coolest Feature?\n\nA recurring positive theme emerges: **the concept of community and shared journeys.**\nUsers appreciate the opportunity to connect with others, share costs, and contribute to a more sustainable way of travel\n\n...\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/ask_my_data/","title":"ask_my_data - BigQuery","text":"<p> bigfunctions  &gt; ask_my_data </p>"},{"location":"bigfunctions/ask_my_data/#ask_my_data","title":"ask_my_data","text":"<p>Signature <pre><code>ask_my_data(question, fully_qualified_table)\n</code></pre></p> <p>Description</p> <p>Ask your data any <code>question</code> in natural language.</p> <p>This function calls  <code>generate_sql</code> to convert the <code>question</code> into a SQL query adapted to your data and execute it. (If the execution fails, the temporary table <code>bigfunction_result</code> gives details).</p> Param Description <code>question</code> A question to ask over your data. It may start with a verb <code>fully_qualified_table</code> A table whose schema will be given to the generative AI model for context. - <code>fully_qualified_table</code> format must be like <code>PROJECT.DATASET.TABLE</code>.  - <code>fully_qualified_table</code> must exist.  - You must have read permission on the table schema <p>Examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.ask_my_data('get the 3 products which generated the most revenue in 2023', 'eu.sales');\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.ask_my_data('get the 3 products which generated the most revenue in 2023', 'us.sales');\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.ask_my_data('get the 3 products which generated the most revenue in 2023', 'europe_west1.sales');\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+------------+---------+\n| product_id | revenue |\n+------------+---------+\n+ 8          + 50286   |\n+ 6          + 46172   |\n+ 10         + 27972   |\n+------------+---------+\n\n</code>\n</pre>"},{"location":"bigfunctions/benford_distance/","title":"benford_distance - BigQuery","text":"<p> bigfunctions  &gt; benford_distance </p>"},{"location":"bigfunctions/benford_distance/#benford_distance","title":"benford_distance","text":"<p>Signature <pre><code>benford_distance(values)\n</code></pre></p> <p>Description</p> <p>Calculate the distance from Benford's Law for given <code>values</code>.</p> <p>As mentioned in wikipedia, Benford's law, is an observation that in many real-life sets of numerical data, the leading digit is likely to be small. In sets that obey the law, the number 1 appears as the leading significant digit about 30% of the time, while 9 appears as the leading significant digit less than 5% of the time.</p> <p>This function computes the Chi-square distance between the observed distribution of leading digits of <code>values</code> and the expected distribution according to Benford's Law.</p> <p>The smaller the <code>benford_distance</code>, the more the <code>values</code> follow Benford's Law.</p> <p>Read \"The Mysterious Benford\u2019s Law and it\u2019s Connection with Fraud Detection\" by Vihasharma to see some applications of this function.</p> <p>Examples</p> <p>1. Uniformly distributed values do not follow Benford's Law</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.benford_distance([1, 2, 3, 4, 5, 6, 7, 8, 9])\n</code></pre> <pre><code>select bigfunctions.us.benford_distance([1, 2, 3, 4, 5, 6, 7, 8, 9])\n</code></pre> <pre><code>select bigfunctions.europe_west1.benford_distance([1, 2, 3, 4, 5, 6, 7, 8, 9])\n</code></pre> <pre>\n<code>+------------------+\n| benford_distance |\n+------------------+\n| 0.4              |\n+------------------+\n</code>\n</pre> <p>2. Having more small values follow more Benford's Law. Distance is lower</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.benford_distance([1, 1, 1, 2, 2, 3, 4, 5, 6])\n</code></pre> <pre><code>select bigfunctions.us.benford_distance([1, 1, 1, 2, 2, 3, 4, 5, 6])\n</code></pre> <pre><code>select bigfunctions.europe_west1.benford_distance([1, 1, 1, 2, 2, 3, 4, 5, 6])\n</code></pre> <pre>\n<code>+------------------+\n| benford_distance |\n+------------------+\n| 0.2              |\n+------------------+\n</code>\n</pre> <p>3. Having constant values follow less Benford's Law than uniform. Distance is higher</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.benford_distance([1, 1, 1, 1, 1, 1, 1, 1, 1])\n</code></pre> <pre><code>select bigfunctions.us.benford_distance([1, 1, 1, 1, 1, 1, 1, 1, 1])\n</code></pre> <pre><code>select bigfunctions.europe_west1.benford_distance([1, 1, 1, 1, 1, 1, 1, 1, 1])\n</code></pre> <pre>\n<code>+------------------+\n| benford_distance |\n+------------------+\n| 2.3              |\n+------------------+\n</code>\n</pre> <p>4. Higher leading digits is worse. Distance is much higher</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.benford_distance([9, 9, 9, 9, 9, 9, 9, 9, 9])\n</code></pre> <pre><code>select bigfunctions.us.benford_distance([9, 9, 9, 9, 9, 9, 9, 9, 9])\n</code></pre> <pre><code>select bigfunctions.europe_west1.benford_distance([9, 9, 9, 9, 9, 9, 9, 9, 9])\n</code></pre> <pre>\n<code>+------------------+\n| benford_distance |\n+------------------+\n| 20.7             |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/camel2snake/","title":"camel2snake - BigQuery","text":"<p> bigfunctions  &gt; camel2snake </p>"},{"location":"bigfunctions/camel2snake/#camel2snake","title":"camel2snake","text":"<p>Signature <pre><code>camel2snake(camelCaseString)\n</code></pre></p> <p>Description</p> <p>Convert <code>string</code> from camelCase to snake_case</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.camel2snake('FooBar !')\n</code></pre> <pre><code>select bigfunctions.us.camel2snake('FooBar !')\n</code></pre> <pre><code>select bigfunctions.europe_west1.camel2snake('FooBar !')\n</code></pre> <pre>\n<code>+-------------------+\n| snake_case_string |\n+-------------------+\n| foo_bar           |\n+-------------------+\n</code>\n</pre>"},{"location":"bigfunctions/categorize_items/","title":"categorize_items - BigQuery","text":"<p> bigfunctions  &gt; categorize_items </p>"},{"location":"bigfunctions/categorize_items/#categorize_items","title":"categorize_items","text":"<p>Signature <pre><code>categorize_items(items)\n</code></pre></p> <p>Description</p> <p>Return <code>categories</code> of <code>items</code>. </p> <p>Using GenAi, this function generates a hierarchy of categories and subcategories that best represents the given <code>items</code>. Each item will then be associated to a category and subcategory. The function returns, the path of each item <code>{category}/{subcategory}</code> in the hierarchy.</p> <ul> <li><code>items</code>: must be a json array of strings or a json array of objects. In case of objects, they must have a key <code>name</code>.</li> <li>Returned <code>categories</code> is a json array with the same length as <code>items</code> formatted like <code>[{item_name, category_path}]</code>. If input <code>items</code> are string then, <code>item_name</code> is the string. Else if input <code>items</code> are object then <code>item_name</code> is the value at their <code>name</code> key.</li> </ul> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.categorize_items([\n    'foo'\n  ]\n  )\n</code></pre> <pre><code>select bigfunctions.us.categorize_items([\n    'foo'\n  ]\n  )\n</code></pre> <pre><code>select bigfunctions.europe_west1.categorize_items([\n    'foo'\n  ]\n  )\n</code></pre> <pre>\n<code>+------------------------+\n| categories             |\n+------------------------+\n| &amp;lt;html&gt;...&amp;lt;/html&gt; |\n+------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/chart/","title":"chart - BigQuery","text":"<p> bigfunctions  &gt; chart </p>"},{"location":"bigfunctions/chart/#chart","title":"chart","text":"<p>Signature <pre><code>chart(data, chart_type, ylabel)\n</code></pre></p> <p>Description</p> <p>Return html with a chartjs chart</p> See the result as a data visualization in BigQuery Console! <p>The result of this function can be vizualized as an html report directly in BigQuery Console!</p> <ol> <li>Install this bookmarklet: bigfunctions (it has to be done only once)</li> <li>Open BigQuery console</li> <li>Click on the installed bookmarklet.<ul> <li>From now on, the bookmarklet code will observe the BigQuery console page.</li> <li>If a BigQuery result appears with a unique cell containing html content, it will be rendered.</li> </ul> </li> <li>You will have to click on the bookmarklet again:<ul> <li>If you refresh the Bigquery console page,</li> <li>If you open the BigQuery console in a new tab of your browser.</li> </ul> </li> <li>Run the query of the example and open the result of the latest subquery. The result will be shown as a nice html content.</li> </ol> <p></p> <p></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.chart([('2022-08-01', 10000.), ('2022-08-02', 20000.), ('2022-08-03', 40000.), ('2022-08-04', 80000.)], 'bar', 'sales')\n</code></pre> <pre><code>select bigfunctions.us.chart([('2022-08-01', 10000.), ('2022-08-02', 20000.), ('2022-08-03', 40000.), ('2022-08-04', 80000.)], 'bar', 'sales')\n</code></pre> <pre><code>select bigfunctions.europe_west1.chart([('2022-08-01', 10000.), ('2022-08-02', 20000.), ('2022-08-03', 40000.), ('2022-08-04', 80000.)], 'bar', 'sales')\n</code></pre> <p></p>"},{"location":"bigfunctions/classify_text/","title":"classify_text - BigQuery","text":"<p> bigfunctions  &gt; classify_text </p>"},{"location":"bigfunctions/classify_text/#classify_text","title":"classify_text","text":"<p>Signature <pre><code>classify_text(text, candidate_labels)\n</code></pre></p> <p>Description</p> <p>Classify <code>text</code> among <code>candidate_labels</code> using zero-shot classification</p> <ul> <li><code>candidate_labels</code> is a string of comma separated classes used for classification</li> <li>Output is probability <code>scores</code> for each label.</li> </ul> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.classify_text('one day I will see the world', \"travel, cooking, dancing, exploration\")\n</code></pre> <pre><code>select bigfunctions.us.classify_text('one day I will see the world', \"travel, cooking, dancing, exploration\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.classify_text('one day I will see the world', \"travel, cooking, dancing, exploration\")\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| scores                                                                                                                                                                              |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [\n  {'label': 'travel',      'score': 0.995},\n  {'label': 'exploration', 'score': 0.938},\n  {'label': 'dancing',     'score': 0.005},\n  {'label': 'cooking',     'score': 0.002}\n]\n |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/connected_components/","title":"connected_components - BigQuery","text":"<p> bigfunctions  &gt; connected_components </p>"},{"location":"bigfunctions/connected_components/#connected_components","title":"connected_components","text":"<p>Signature <pre><code>connected_components(fully_qualified_table)\n</code></pre></p> <p>Description</p> <p>Compute the connected components of a non-directed graph.</p> <p>Given a table with two columns of the same type STRING or INTEGER representing the edges of a graph, this computes a new temporary table called <code>bigfunction_result</code> containing two columns of the same type named <code>node_id</code> and <code>connected_component_id</code>.</p> <p>This is an implementation of the Alternating Algorithm (large-star, small-star) described in the 2014 paper \"Connected Components in MapReduce and Beyond\" written by {rkiveris, silviol, mirrokni, rvibhor, sergeiv} @google.com</p> <p>PERFORMANCE AND COST CONSIDERATIONS</p> <ul> <li>This algorithm has been proved to converge in O(log(n)\u00b2) and is conjectured to converge in O(log(n)), where n is the number of nodes in the graph. It was the most performant known distributed connected component algorithm last time I checked (in 2017).</li> <li>This implementation persists temporary results at each iteration loop: for the BigQuery pricing, you should be expecting it to cost the equivalent of 15 to 30 scans on your input table. Since the input table has only two columns, this should be reasonable, and we recommend using INTEGER columns rather than STRING when possible.</li> <li>If your graph contains nodes with a very high number of neighbors, the algorithm may crash. It is recommended to apply a pre-filtering on your nodes and remove nodes with a pathologically high cardinality. You should also monitor actively the number of nodes filtered this way and their cardinality, as this could help you detect a data quality deterioration in your input graph. If the input graph contains duplicate edges, they will be automatically removed by the algorithm.</li> </ul> <p>ISOLATED NODES: If you want to have isolated nodes (nodes that have no neighbors) in the resulting graph, there is two possible ways to achieve this:</p> <ul> <li>Add self-loops edges to all your nodes in your input graph (it also works if you add edges between all the graph    nodes and a fictitious node with id NULL)</li> <li>Only add edges between distinct nodes to your input, and perform a join between your input graph and the    algorithm's output to find all the nodes that have disappeared. These will be the isolated nodes.    This second method requires a little more work but it should also be cheaper.</li> </ul> <p>Examples</p> <p>Identify the two connected components of a graph which has 6 nodes and is represented by the edges below: <pre><code>+---------+-----+\n| node1 | node2 |\n+-------+-------+\n|   1   |   2   |\n|   2   |   3   |\n|   3   |   4   |\n|   5   |   6   |\n+-------+-------+\n</code></pre> </p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.connected_components('eu.sample_graph');\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.connected_components('us.sample_graph');\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.connected_components('europe_west1.sample_graph');\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+---------+------------------------+\n| node_id | connected_component_id |\n+---------+------------------------+\n|    1    |           1            |\n|    2    |           1            |\n|    3    |           1            |\n|    4    |           1            |\n|    5    |           5            |\n|    6    |           5            |\n+---------+------------------------+\n\n</code>\n</pre>"},{"location":"bigfunctions/convert_non_ascii_characters_to_unicode_escape_sequences/","title":"convert_non_ascii_characters_to_unicode_escape_sequences - BigQuery","text":"<p> bigfunctions  &gt; convert_non_ascii_characters_to_unicode_escape_sequences </p>"},{"location":"bigfunctions/convert_non_ascii_characters_to_unicode_escape_sequences/#convert_non_ascii_characters_to_unicode_escape_sequences","title":"convert_non_ascii_characters_to_unicode_escape_sequences","text":"<p>Signature <pre><code>convert_non_ascii_characters_to_unicode_escape_sequences(text)\n</code></pre></p> <p>Description</p> <p>Replace all non ASCII characters with escape unicode</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.convert_non_ascii_characters_to_unicode_escape_sequences('SCH\u00dcMANN')\n</code></pre> <pre><code>select bigfunctions.us.convert_non_ascii_characters_to_unicode_escape_sequences('SCH\u00dcMANN')\n</code></pre> <pre><code>select bigfunctions.europe_west1.convert_non_ascii_characters_to_unicode_escape_sequences('SCH\u00dcMANN')\n</code></pre> <pre>\n<code>+----------------------+\n| text_unicode_escaped |\n+----------------------+\n| SCH\\u00dcMANN        |\n+----------------------+\n</code>\n</pre>"},{"location":"bigfunctions/create_materialized_view_w_flattened_json_column/","title":"create_materialized_view_w_flattened_json_column - BigQuery","text":"<p> bigfunctions  &gt; create_materialized_view_w_flattened_json_column </p>"},{"location":"bigfunctions/create_materialized_view_w_flattened_json_column/#create_materialized_view_w_flattened_json_column","title":"create_materialized_view_w_flattened_json_column","text":"<p>Signature <pre><code>create_materialized_view_w_flattened_json_column(fully_qualified_table, fully_qualified_materialized_view, json_column)\n</code></pre></p> <p>Description</p> <p>Create a Materialized view of a table with <code>json_column</code> flattened .</p> <p>It creates a materialized view with:</p> <ul> <li>query given by sql_to_flatten_json_column function</li> <li>same partition as <code>fully_qualified_table</code></li> </ul> <p>Examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.create_materialized_view_w_flattened_json_column('your_project.your_dataset.your_table', 'your_project.your_dataset.your_materialized_view', 'data');\n</code></pre> <pre><code>call bigfunctions.us.create_materialized_view_w_flattened_json_column('your_project.your_dataset.your_table', 'your_project.your_dataset.your_materialized_view', 'data');\n</code></pre> <pre><code>call bigfunctions.europe_west1.create_materialized_view_w_flattened_json_column('your_project.your_dataset.your_table', 'your_project.your_dataset.your_materialized_view', 'data');\n</code></pre>"},{"location":"bigfunctions/date_sub_isoyear/","title":"date_sub_isoyear - BigQuery","text":"<p> bigfunctions  &gt; date_sub_isoyear </p>"},{"location":"bigfunctions/date_sub_isoyear/#date_sub_isoyear","title":"date_sub_isoyear","text":"<p>Signature <pre><code>date_sub_isoyear(date, years)\n</code></pre></p> <p>Description</p> <p>Returns same day <code>years</code> before (same week number and same day of week)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.date_sub_isoyear('2023-06-02', 3)\n</code></pre> <pre><code>select bigfunctions.us.date_sub_isoyear('2023-06-02', 3)\n</code></pre> <pre><code>select bigfunctions.europe_west1.date_sub_isoyear('2023-06-02', 3)\n</code></pre> <pre>\n<code>+------------------+\n| substracted_date |\n+------------------+\n| 2020-05-29       |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/deduplicate_rows/","title":"deduplicate_rows - BigQuery","text":"<p> bigfunctions  &gt; deduplicate_rows </p>"},{"location":"bigfunctions/deduplicate_rows/#deduplicate_rows","title":"deduplicate_rows","text":"<p>Signature <pre><code>deduplicate_rows(query_or_table_or_view)\n</code></pre></p> <p>Description</p> <p>Returns the deduplicated rows of <code>query_or_table_or_view</code></p> <p>Examples</p> <p>1. Returns table with duplicate rows removed.</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.deduplicate_rows(\"my_project.my_dataset.my_table\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.deduplicate_rows(\"my_project.my_dataset.my_table\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.deduplicate_rows(\"my_project.my_dataset.my_table\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+-----+-----+\n| id1 | id2 |\n+-----+-----+\n| 1   | 2   |\n| 1   | 3   |\n| 2   | 3   |\n| 4   | 3   |\n| 6   | 3   |\n| 7   | 3   |\n| 8   | 9   |\n| 9   | 9   |\n+-----+-----+\n\n</code>\n</pre> <p>2. When incorrect table name is passed as arguments.</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.deduplicate_rows(\"my_project.my_dataset.my_tbl\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.deduplicate_rows(\"my_project.my_dataset.my_tbl\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.deduplicate_rows(\"my_project.my_dataset.my_tbl\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+-------------------------------------------------------------------------------------------------------------------------------------------+\n| f0_                                                                                                                                       |\n+-------------------------------------------------------------------------------------------------------------------------------------------+\n| Not found: Table my_project:my_dataset.my_tbl was not found in location US at [my_project:my_dataset.deduplicate_rows:2:13] |\n+-------------------------------------------------------------------------------------------------------------------------------------------+\n\n</code>\n</pre> <p>3. When a query is passed into the procedure.</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.deduplicate_rows(\"select data from unnest([1, 2, 3, 1]) data\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.deduplicate_rows(\"select data from unnest([1, 2, 3, 1]) data\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.deduplicate_rows(\"select data from unnest([1, 2, 3, 1]) data\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+------+\n| data |\n+------+\n| 1    |\n| 2    |\n| 3    |\n+------+\n\n</code>\n</pre>"},{"location":"bigfunctions/deidentify/","title":"deidentify - BigQuery","text":"<p> bigfunctions  &gt; deidentify </p>"},{"location":"bigfunctions/deidentify/#deidentify","title":"deidentify","text":"<p>Signature <pre><code>deidentify(text, info_types)\n</code></pre></p> <p>Description</p> <p>Masks sensitive information of type <code>info_types</code> in <code>text</code> using Cloud Data Loss Prevention</p> Param Possible values (can be one or any combination of the following values separated by comma) <code>info_types</code> <code>ADVERTISING_ID</code>, <code>AGE</code>, <code>AUTH_TOKEN</code>, <code>AWS_CREDENTIALS</code>, <code>AZURE_AUTH_TOKEN</code>, <code>BASIC_AUTH_HEADER</code>, <code>CREDIT_CARD_NUMBER</code>, <code>CREDIT_CARD_TRACK_NUMBER</code>, <code>DATE</code>, <code>DATE_OF_BIRTH</code>, <code>DOMAIN_NAME</code>, <code>EMAIL_ADDRESS</code>, <code>ENCRYPTION_KEY</code>, <code>ETHNIC_GROUP</code>, <code>FEMALE_NAME</code>, <code>FIRST_NAME</code>, <code>GCP_API_KEY</code>, <code>GCP_CREDENTIALS</code>, <code>GENDER</code>, <code>GENERIC_ID</code>, <code>HTTP_COOKIE</code>, <code>HTTP_COOKIE</code>, <code>IBAN_CODE</code>, <code>ICCID_NUMBER</code>, <code>ICD10_CODE</code>, <code>ICD9_CODE</code>, <code>IMEI_HARDWARE_ID</code>, <code>IMSI_ID</code>, <code>IP_ADDRESS</code>, <code>JSON_WEB_TOKEN</code>, <code>LAST_NAME</code>, <code>LOCATION</code>, <code>LOCATION_COORDINATES</code>, <code>MAC_ADDRESS</code>, <code>MAC_ADDRESS_LOCAL</code>, <code>MALE_NAME</code>, <code>MARITAL_STATUS</code>, <code>MEDICAL_RECORD_NUMBER</code>, <code>MEDICAL_TERM</code>, <code>OAUTH_CLIENT_SECRET</code>, <code>ORGANIZATION_NAME</code>, <code>PASSPORT</code>, <code>PASSWORD</code>, <code>PERSON_NAME</code>, <code>PHONE_NUMBER</code>, <code>SSL_CERTIFICATE</code>, <code>STORAGE_SIGNED_POLICY_DOCUMENT</code>, <code>STORAGE_SIGNED_URL</code>, <code>STREET_ADDRESS</code>, <code>SWIFT_CODE</code>, <code>TIME</code>, <code>URL</code>, <code>VAT_NUMBER</code>, <code>VEHICLE_IDENTIFICATION_NUMBER</code>, <code>WEAK_PASSWORD_HASH</code>, <code>XSRF_TOKEN</code> <p>Examples</p> <p>1. String with email in it.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.deidentify(\"My email is shivam@google.co.in\", \"PHONE_NUMBER, EMAIL_ADDRESS\")\n</code></pre> <pre><code>select bigfunctions.us.deidentify(\"My email is shivam@google.co.in\", \"PHONE_NUMBER, EMAIL_ADDRESS\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.deidentify(\"My email is shivam@google.co.in\", \"PHONE_NUMBER, EMAIL_ADDRESS\")\n</code></pre> <pre>\n<code>+-----------------------------+\n| masked_info                 |\n+-----------------------------+\n| My email is [EMAIL_ADDRESS] |\n+-----------------------------+\n</code>\n</pre> <p>2. String with phone number in it.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.deidentify(\"My phone number is 0123456789\", \"PHONE_NUMBER, email_address\")\n</code></pre> <pre><code>select bigfunctions.us.deidentify(\"My phone number is 0123456789\", \"PHONE_NUMBER, email_address\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.deidentify(\"My phone number is 0123456789\", \"PHONE_NUMBER, email_address\")\n</code></pre> <pre>\n<code>+-----------------------------------+\n| masked_info                       |\n+-----------------------------------+\n| My phone number is [PHONE_NUMBER] |\n+-----------------------------------+\n</code>\n</pre> <p>3. If <code>info_types</code> is <code>null</code> or empty, all built-in info types may be used</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.deidentify(\"My email is shivam@google.co.in\", null)\n</code></pre> <pre><code>select bigfunctions.us.deidentify(\"My email is shivam@google.co.in\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.deidentify(\"My email is shivam@google.co.in\", null)\n</code></pre> <pre>\n<code>+------------------------------------------+\n| masked_info                              |\n+------------------------------------------+\n| My email is [PERSON_NAME][EMAIL_ADDRESS] |\n+------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/detect_anomalies/","title":"detect_anomalies - BigQuery","text":"<p> bigfunctions  &gt; detect_anomalies </p>"},{"location":"bigfunctions/detect_anomalies/#detect_anomalies","title":"detect_anomalies","text":"<p>Signature <pre><code>detect_anomalies(dataset_name, table_name, time_column, value_column, threshold)\n</code></pre></p> <p>Description</p> <p>Detect anomalies in time-series data to identify outliers and unusual patterns. This function uses Z-score to find anomalies in the specified column of a BigQuery table.</p> <p>Examples</p> <p>Detect anomalies in 'orders' table</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.detect_anomalies('tpch', 'orders', 'o_orderdate', 'o_totalprice', 3.0)\n</code></pre> <pre><code>select bigfunctions.us.detect_anomalies('tpch', 'orders', 'o_orderdate', 'o_totalprice', 3.0)\n</code></pre> <pre><code>select bigfunctions.europe_west1.detect_anomalies('tpch', 'orders', 'o_orderdate', 'o_totalprice', 3.0)\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------------------------------------------------------+\n| anomalies                                                                                                               |\n+-------------------------------------------------------------------------------------------------------------------------+\n| '[{\"time\": \"2023-01-15\", \"value\": 10000.0, \"z_score\": 3.5}, {\"time\": \"2023-02-10\", \"value\": 15000.0, \"z_score\": 4.2}]'\n |\n+-------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/detect_sensitive_info/","title":"detect_sensitive_info - BigQuery","text":"<p> bigfunctions  &gt; detect_sensitive_info </p>"},{"location":"bigfunctions/detect_sensitive_info/#detect_sensitive_info","title":"detect_sensitive_info","text":"<p>Signature <pre><code>detect_sensitive_info(text)\n</code></pre></p> <p>Description</p> <p>Detect sensitive information in <code>text</code> using Cloud Data Loss Prevention</p> <p>Examples</p> <p>1. String with email in it.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.detect_sensitive_info(\"My email is shivam@google.co.in\")\n</code></pre> <pre><code>select bigfunctions.us.detect_sensitive_info(\"My email is shivam@google.co.in\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.detect_sensitive_info(\"My email is shivam@google.co.in\")\n</code></pre> <pre>\n<coden| sensitive_info|\nn| [{\"string\": \"shivam\", \"info_type\": \"PERSON_NAME\", \"confidence\": \"POSSIBLE\"}, {\"string\": \"shivam\", \"info_type\": \"FIRST_NAME\", \"confidence\": \"POSSIBLE\"}, {\"string\": \"shivam\", \"info_type\": \"FEMALE_NAME\", \"confidence\": \"POSSIBLE\"}, {\"string\": \"shivam\", \"info_type\": \"MALE_NAME\", \"confidence\": \"POSSIBLE\"}, {\"string\": \"google\", \"info_type\": \"ORGANIZATION_NAME\", \"confidence\": \"POSSIBLE\"}, {\"string\": \"shivam@google.co.in\", \"info_type\": \"EMAIL_ADDRESS\", \"confidence\": \"VERY_LIKELY\"}, {\"string\": \"google.co.in\", \"info_type\": \"DOMAIN_NAME\", \"confidence\": \"LIKELY\"}] |\nn</code>\n</pre> <p>2. String with phone number in it.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.detect_sensitive_info(\"My phone number is 0123456789\")\n</code></pre> <pre><code>select bigfunctions.us.detect_sensitive_info(\"My phone number is 0123456789\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.detect_sensitive_info(\"My phone number is 0123456789\")\n</code></pre> <pre>\n<code>+---------------------------------------------------------------------------------+\n| sensitive_info                                                                  |\n+---------------------------------------------------------------------------------+\n| [{\"string\": \"0123456789\", \"info_type\": \"PHONE_NUMBER\", \"confidence\": \"LIKELY\"}] |\n+---------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/distinct_values/","title":"distinct_values - BigQuery","text":"<p> bigfunctions  &gt; distinct_values </p>"},{"location":"bigfunctions/distinct_values/#distinct_values","title":"distinct_values","text":"<p>Signature <pre><code>distinct_values(arr)\n</code></pre></p> <p>Description</p> <p>Return distinct values</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.distinct_values([1, 4, 3, 4])\n</code></pre> <pre><code>select bigfunctions.us.distinct_values([1, 4, 3, 4])\n</code></pre> <pre><code>select bigfunctions.europe_west1.distinct_values([1, 4, 3, 4])\n</code></pre> <pre>\n<code>+-----------------+\n| distinct_values |\n+-----------------+\n| [1, 4, 3]       |\n+-----------------+\n</code>\n</pre>"},{"location":"bigfunctions/exchange_rate/","title":"exchange_rate - BigQuery","text":"<p> bigfunctions  &gt; exchange_rate </p>"},{"location":"bigfunctions/exchange_rate/#exchange_rate","title":"exchange_rate","text":"<p>Signature <pre><code>exchange_rate(base, to)\n</code></pre></p> <p>Description</p> <p>Get <code>exchange_rate</code> from <code>base</code> (e.g. <code>USD</code>) to <code>to</code> (e.g. <code>EUR</code>) from Yahoo Finance.</p> <p>This functions uses yfinance python package and returns the average of the <code>bid price</code> and the <code>ask price</code>. If the data is not available in Yahoo Finance, will return <code>null</code></p> Param Possible values <code>base</code>and<code>to</code> Iso 4217 currency codes such as <code>EUR</code> or <code>USD</code>. See active codes on wikipedia <p>Examples</p> <p>To know how many euros a dollar is worth</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.exchange_rate('USD', 'EUR')\n</code></pre> <pre><code>select bigfunctions.us.exchange_rate('USD', 'EUR')\n</code></pre> <pre><code>select bigfunctions.europe_west1.exchange_rate('USD', 'EUR')\n</code></pre> <pre>\n<code>+---------------+\n| exchange_rate |\n+---------------+\n| 0.910437      |\n+---------------+\n</code>\n</pre>"},{"location":"bigfunctions/explore_column/","title":"explore_column - BigQuery","text":"<p> bigfunctions  &gt; explore_column </p>"},{"location":"bigfunctions/explore_column/#explore_column","title":"explore_column","text":"<p>Signature <pre><code>explore_column(fully_qualified_column)\n</code></pre></p> <p>Description</p> <p>Show column statistics</p> See the result as a data visualization in BigQuery Console! <p>The result of this function can be vizualized as an html report directly in BigQuery Console!</p> <ol> <li>Install this bookmarklet: bigfunctions (it has to be done only once)</li> <li>Open BigQuery console</li> <li>Click on the installed bookmarklet.<ul> <li>From now on, the bookmarklet code will observe the BigQuery console page.</li> <li>If a BigQuery result appears with a unique cell containing html content, it will be rendered.</li> </ul> </li> <li>You will have to click on the bookmarklet again:<ul> <li>If you refresh the Bigquery console page,</li> <li>If you open the BigQuery console in a new tab of your browser.</li> </ul> </li> <li>Run the query of the example and open the result of the latest subquery. The result will be shown as a nice html content.</li> </ol> <p></p> <p></p> <p>Examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.explore_column(\"eu.natality.weight_pounds\");\nselect html from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.explore_column(\"us.natality.weight_pounds\");\nselect html from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.explore_column(\"europe_west1.natality.weight_pounds\");\nselect html from bigfunction_result;\n</code></pre> <p></p>"},{"location":"bigfunctions/explore_dataset/","title":"explore_dataset - BigQuery","text":"<p> bigfunctions  &gt; explore_dataset </p>"},{"location":"bigfunctions/explore_dataset/#explore_dataset","title":"explore_dataset","text":"<p>Signature <pre><code>explore_dataset(fully_qualified_dataset)\n</code></pre></p> <p>Description</p> <p>Show infos about dataset tables</p> See the result as a data visualization in BigQuery Console! <p>The result of this function can be vizualized as an html report directly in BigQuery Console!</p> <ol> <li>Install this bookmarklet: bigfunctions (it has to be done only once)</li> <li>Open BigQuery console</li> <li>Click on the installed bookmarklet.<ul> <li>From now on, the bookmarklet code will observe the BigQuery console page.</li> <li>If a BigQuery result appears with a unique cell containing html content, it will be rendered.</li> </ul> </li> <li>You will have to click on the bookmarklet again:<ul> <li>If you refresh the Bigquery console page,</li> <li>If you open the BigQuery console in a new tab of your browser.</li> </ul> </li> <li>Run the query of the example and open the result of the latest subquery. The result will be shown as a nice html content.</li> </ol> <p></p> <p></p> <p>Examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.explore_dataset(\"eu\");\nselect html from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.explore_dataset(\"us\");\nselect html from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.explore_dataset(\"europe_west1\");\nselect html from bigfunction_result;\n</code></pre> <p></p>"},{"location":"bigfunctions/explore_events/","title":"explore_events - BigQuery","text":"<p> bigfunctions  &gt; explore_events </p>"},{"location":"bigfunctions/explore_events/#explore_events","title":"explore_events","text":"<p>Signature <pre><code>explore_events(events_table, max_minutes_between_events)\n</code></pre></p> <p>Description</p> <p>Show events (WORK IN PROGRESS)</p> See the result as a data visualization in BigQuery Console! <p>The result of this function can be vizualized as an html report directly in BigQuery Console!</p> <ol> <li>Install this bookmarklet: bigfunctions (it has to be done only once)</li> <li>Open BigQuery console</li> <li>Click on the installed bookmarklet.<ul> <li>From now on, the bookmarklet code will observe the BigQuery console page.</li> <li>If a BigQuery result appears with a unique cell containing html content, it will be rendered.</li> </ul> </li> <li>You will have to click on the bookmarklet again:<ul> <li>If you refresh the Bigquery console page,</li> <li>If you open the BigQuery console in a new tab of your browser.</li> </ul> </li> <li>Run the query of the example and open the result of the latest subquery. The result will be shown as a nice html content.</li> </ol> <p></p> <p></p> <p>Examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.explore_events(\"eu.natality.weight_pounds\");\nselect html from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.explore_events(\"us.natality.weight_pounds\");\nselect html from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.explore_events(\"europe_west1.natality.weight_pounds\");\nselect html from bigfunction_result;\n</code></pre>"},{"location":"bigfunctions/explore_funnels/","title":"explore_funnels - BigQuery","text":"<p> bigfunctions  &gt; explore_funnels </p>"},{"location":"bigfunctions/explore_funnels/#explore_funnels","title":"explore_funnels","text":"<p>Signature <pre><code>explore_funnels(events_table, event_types)\n</code></pre></p> <p>Description</p> <p>Show funnels (WORK IN PROGRESS)</p> See the result as a data visualization in BigQuery Console! <p>The result of this function can be vizualized as an html report directly in BigQuery Console!</p> <ol> <li>Install this bookmarklet: bigfunctions (it has to be done only once)</li> <li>Open BigQuery console</li> <li>Click on the installed bookmarklet.<ul> <li>From now on, the bookmarklet code will observe the BigQuery console page.</li> <li>If a BigQuery result appears with a unique cell containing html content, it will be rendered.</li> </ul> </li> <li>You will have to click on the bookmarklet again:<ul> <li>If you refresh the Bigquery console page,</li> <li>If you open the BigQuery console in a new tab of your browser.</li> </ul> </li> <li>Run the query of the example and open the result of the latest subquery. The result will be shown as a nice html content.</li> </ol> <p></p> <p></p> <p>Examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.explore_funnels('compte-nickel-dataprod.TEMP.EVENT_TYPE_SNOWPLOW2', [\"UserProfile\", \"PhoneNumberEditionWorkflowIntroduction\", \"PhoneNumberEditionForm\", \"PasswordChallenge\", \"CodeEmailChallenge\", \"CodeSMSChallenge\"]);\nselect html from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.explore_funnels('compte-nickel-dataprod.TEMP.EVENT_TYPE_SNOWPLOW2', [\"UserProfile\", \"PhoneNumberEditionWorkflowIntroduction\", \"PhoneNumberEditionForm\", \"PasswordChallenge\", \"CodeEmailChallenge\", \"CodeSMSChallenge\"]);\nselect html from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.explore_funnels('compte-nickel-dataprod.TEMP.EVENT_TYPE_SNOWPLOW2', [\"UserProfile\", \"PhoneNumberEditionWorkflowIntroduction\", \"PhoneNumberEditionForm\", \"PasswordChallenge\", \"CodeEmailChallenge\", \"CodeSMSChallenge\"]);\nselect html from bigfunction_result;\n</code></pre>"},{"location":"bigfunctions/explore_table/","title":"explore_table - BigQuery","text":"<p> bigfunctions  &gt; explore_table </p>"},{"location":"bigfunctions/explore_table/#explore_table","title":"explore_table","text":"<p>Signature <pre><code>explore_table(fully_qualified_table)\n</code></pre></p> <p>Description</p> <p>Show table infos and column statistics</p> See the result as a data visualization in BigQuery Console! <p>The result of this function can be vizualized as an html report directly in BigQuery Console!</p> <ol> <li>Install this bookmarklet: bigfunctions (it has to be done only once)</li> <li>Open BigQuery console</li> <li>Click on the installed bookmarklet.<ul> <li>From now on, the bookmarklet code will observe the BigQuery console page.</li> <li>If a BigQuery result appears with a unique cell containing html content, it will be rendered.</li> </ul> </li> <li>You will have to click on the bookmarklet again:<ul> <li>If you refresh the Bigquery console page,</li> <li>If you open the BigQuery console in a new tab of your browser.</li> </ul> </li> <li>Run the query of the example and open the result of the latest subquery. The result will be shown as a nice html content.</li> </ol> <p></p> <p></p> <p>Examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.explore_table(\"eu.natality\");\nselect html from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.explore_table(\"us.natality\");\nselect html from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.explore_table(\"europe_west1.natality\");\nselect html from bigfunction_result;\n</code></pre> <p></p>"},{"location":"bigfunctions/export_to_datastore/","title":"export_to_datastore - BigQuery","text":"<p> bigfunctions  &gt; export_to_datastore </p>"},{"location":"bigfunctions/export_to_datastore/#export_to_datastore","title":"export_to_datastore","text":"<p>Signature <pre><code>export_to_datastore(project, namespace, kind, key, data)\n</code></pre></p> <p>Description</p> <p>Exports <code>data</code> to Datastore (Firestore in Datastore mode).</p> <p>(\ud83d\udca1 For this to work, <code>749389685934-compute@developer.gserviceaccount.com</code> must have datastore user role in your project.)</p> Param Possible values <code>project</code> Google Cloud project hosting the Datastore data. Should be unique for one query <code>namespace</code> A namespace is like a dataset / a folder. It has many <code>kinds</code> which are like tables. If <code>namespace</code>is <code>null</code>, <code>default</code> namespace will be used. <code>kind</code> <code>kind</code> is like a table: a set of similar objects. Cannot be <code>null</code>. <code>key</code> Unique identifier where <code>data</code> is stored inside <code>kind</code>. Can be an integer represented as a string (<code>key</code> is then named <code>id</code> in Datastore) or any string (<code>key</code> is named <code>name</code> in Datastore). If <code>null</code> a integer key (represented as string) will be generated. <code>data</code> A json dict of data <p>Examples</p> <p>1. Export <code>data</code> to default namespace with auto-generated <code>key</code>.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.export_to_datastore('your-project', null, 'user', null, json '{\"name\": \"Marc Harris\", \"email\": \"marc@harris.com\"}')\n</code></pre> <pre><code>select bigfunctions.us.export_to_datastore('your-project', null, 'user', null, json '{\"name\": \"Marc Harris\", \"email\": \"marc@harris.com\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.export_to_datastore('your-project', null, 'user', null, json '{\"name\": \"Marc Harris\", \"email\": \"marc@harris.com\"}')\n</code></pre> <pre>\n<code>+------------------+\n| key              |\n+------------------+\n| 4503604769587200 |\n+------------------+\n</code>\n</pre> <p>2. Export <code>data</code> to default namespace, with email as <code>key</code>.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.export_to_datastore('your-project', null, 'user', 'marc@harris.com', json '{\"name\": \"Marc Harris\"}')\n</code></pre> <pre><code>select bigfunctions.us.export_to_datastore('your-project', null, 'user', 'marc@harris.com', json '{\"name\": \"Marc Harris\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.export_to_datastore('your-project', null, 'user', 'marc@harris.com', json '{\"name\": \"Marc Harris\"}')\n</code></pre> <pre>\n<code>+-----------------+\n| key             |\n+-----------------+\n| marc@harris.com |\n+-----------------+\n</code>\n</pre>"},{"location":"bigfunctions/export_to_pubsub/","title":"export_to_pubsub - BigQuery","text":"<p> bigfunctions  &gt; export_to_pubsub </p>"},{"location":"bigfunctions/export_to_pubsub/#export_to_pubsub","title":"export_to_pubsub","text":"<p>Signature <pre><code>export_to_pubsub(project, topic, data, attributes)\n</code></pre></p> <p>Description</p> <p>Exports <code>data</code> and <code>attributes</code> to Pub/Sub <code>topic</code>.</p> <p>\ud83d\udca1 For this to work, <code>749389685934-compute@developer.gserviceaccount.com</code> must have publish permission on your topic.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.export_to_pubsub('your-project', 'your_topic', 'Your message data', '{\"attribute1\": \"value1\", \"attribute2\": \"value2\"}')\n</code></pre> <pre><code>select bigfunctions.us.export_to_pubsub('your-project', 'your_topic', 'Your message data', '{\"attribute1\": \"value1\", \"attribute2\": \"value2\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.export_to_pubsub('your-project', 'your_topic', 'Your message data', '{\"attribute1\": \"value1\", \"attribute2\": \"value2\"}')\n</code></pre> <pre>\n<code>+----------------------+\n| published_message_id |\n+----------------------+\n| 1123432546           |\n+----------------------+\n</code>\n</pre>"},{"location":"bigfunctions/faker/","title":"faker - BigQuery","text":"<p> bigfunctions  &gt; faker </p>"},{"location":"bigfunctions/faker/#faker","title":"faker","text":"<p>Signature <pre><code>faker(what, locale)\n</code></pre></p> <p>Description</p> <p>Generates fake data of type <code>what</code> and localized with <code>locale</code> parameter (using faker python library)</p> Param Possible values <code>what</code> <code>aba</code>, <code>address</code>, <code>administrative_unit</code>, <code>am_pm</code>, <code>android_platform_token</code>, <code>ascii_company_email</code>, <code>ascii_email</code>, <code>ascii_free_email</code>, <code>ascii_safe_email</code>, <code>bank_country</code>, <code>bban</code>, <code>binary</code>, <code>boolean</code>, <code>bothify</code>, <code>bs</code>, <code>building_number</code>, <code>catch_phrase</code>, <code>century</code>, <code>chrome</code>, <code>city</code>, <code>city_prefix</code>, <code>city_suffix</code>, <code>color</code>, <code>color_name</code>, <code>company</code>, <code>company_email</code>, <code>company_suffix</code>, <code>coordinate</code>, <code>country</code>, <code>country_calling_code</code>, <code>country_code</code>, <code>credit_card_expire</code>, <code>credit_card_full</code>, <code>credit_card_number</code>, <code>credit_card_provider</code>, <code>credit_card_security_code</code>, <code>cryptocurrency</code>, <code>cryptocurrency_code</code>, <code>cryptocurrency_name</code>, <code>csv</code>, <code>currency</code>, <code>currency_code</code>, <code>currency_name</code>, <code>currency_symbol</code>, <code>current_country</code>, <code>current_country_code</code>, <code>date</code>, <code>date_between</code>, <code>date_between_dates</code>, <code>date_object</code>, <code>date_of_birth</code>, <code>date_this_century</code>, <code>date_this_decade</code>, <code>date_this_month</code>, <code>date_this_year</code>, <code>date_time</code>, <code>date_time_ad</code>, <code>date_time_between</code>, <code>date_time_between_dates</code>, <code>date_time_this_century</code>, <code>date_time_this_decade</code>, <code>date_time_this_month</code>, <code>date_time_this_year</code>, <code>day_of_month</code>, <code>day_of_week</code>, <code>dga</code>, <code>domain_name</code>, <code>domain_word</code>, <code>dsv</code>, <code>ean</code>, <code>ean13</code>, <code>ean8</code>, <code>ein</code>, <code>email</code>, <code>emoji</code>, <code>file_extension</code>, <code>file_name</code>, <code>file_path</code>, <code>firefox</code>, <code>first_name</code>, <code>first_name_female</code>, <code>first_name_male</code>, <code>first_name_nonbinary</code>, <code>fixed_width</code>, <code>free_email</code>, <code>free_email_domain</code>, <code>future_date</code>, <code>future_datetime</code>, <code>get_providers</code>, <code>hex_color</code>, <code>hexify</code>, <code>hostname</code>, <code>http_method</code>, <code>iana_id</code>, <code>iban</code>, <code>image_url</code>, <code>internet_explorer</code>, <code>invalid_ssn</code>, <code>ios_platform_token</code>, <code>ipv4</code>, <code>ipv4_network_class</code>, <code>ipv4_private</code>, <code>ipv4_public</code>, <code>ipv6</code>, <code>isbn10</code>, <code>isbn13</code>, <code>iso8601</code>, <code>items</code>, <code>itin</code>, <code>job</code>, <code>json</code>, <code>json_bytes</code>, <code>language_code</code>, <code>language_name</code>, <code>last_name</code>, <code>last_name_female</code>, <code>last_name_male</code>, <code>last_name_nonbinary</code>, <code>latitude</code>, <code>latlng</code>, <code>lexify</code>, <code>license_plate</code>, <code>linux_platform_token</code>, <code>linux_processor</code>, <code>local_latlng</code>, <code>locale</code>, <code>localized_ean</code>, <code>localized_ean13</code>, <code>localized_ean8</code>, <code>location_on_land</code>, <code>longitude</code>, <code>mac_address</code>, <code>mac_platform_token</code>, <code>mac_processor</code>, <code>md5</code>, <code>military_apo</code>, <code>military_dpo</code>, <code>military_ship</code>, <code>military_state</code>, <code>mime_type</code>, <code>month</code>, <code>month_name</code>, <code>msisdn</code>, <code>name</code>, <code>name_female</code>, <code>name_male</code>, <code>name_nonbinary</code>, <code>nic_handle</code>, <code>nic_handles</code>, <code>null_boolean</code>, <code>numerify</code>, <code>opera</code>, <code>paragraph</code>, <code>paragraphs</code>, <code>password</code>, <code>past_date</code>, <code>past_datetime</code>, <code>phone_number</code>, <code>port_number</code>, <code>postalcode</code>, <code>postalcode_in_state</code>, <code>postalcode_plus4</code>, <code>postcode</code>, <code>postcode_in_state</code>, <code>prefix</code>, <code>prefix_female</code>, <code>prefix_male</code>, <code>prefix_nonbinary</code>, <code>pricetag</code>, <code>profile</code>, <code>psv</code>, <code>pybool</code>, <code>pydecimal</code>, <code>pydict</code>, <code>pyfloat</code>, <code>pyint</code>, <code>pyiterable</code>, <code>pylist</code>, <code>pyobject</code>, <code>pyset</code>, <code>pystr</code>, <code>pystr_format</code>, <code>pystruct</code>, <code>pytimezone</code>, <code>pytuple</code>, <code>random_choices</code>, <code>random_digit</code>, <code>random_digit_not_null</code>, <code>random_digit_not_null_or_empty</code>, <code>random_digit_or_empty</code>, <code>random_element</code>, <code>random_elements</code>, <code>random_int</code>, <code>random_letter</code>, <code>random_letters</code>, <code>random_lowercase_letter</code>, <code>random_number</code>, <code>random_sample</code>, <code>random_uppercase_letter</code>, <code>randomize_nb_elements</code>, <code>rgb_color</code>, <code>rgb_css_color</code>, <code>ripe_id</code>, <code>safari</code>, <code>safe_color_name</code>, <code>safe_domain_name</code>, <code>safe_email</code>, <code>safe_hex_color</code>, <code>sbn9</code>, <code>secondary_address</code>, <code>seed_instance</code>, <code>sentence</code>, <code>sentences</code>, <code>sha1</code>, <code>sha256</code>, <code>simple_profile</code>, <code>slug</code>, <code>ssn</code>, <code>state</code>, <code>state_abbr</code>, <code>street_address</code>, <code>street_name</code>, <code>street_suffix</code>, <code>suffix</code>, <code>suffix_female</code>, <code>suffix_male</code>, <code>suffix_nonbinary</code>, <code>swift</code>, <code>swift11</code>, <code>swift8</code>, <code>tar</code>, <code>text</code>, <code>texts</code>, <code>time</code>, <code>time_delta</code>, <code>time_object</code>, <code>time_series</code>, <code>timezone</code>, <code>tld</code>, <code>tsv</code>, <code>unix_device</code>, <code>unix_partition</code>, <code>unix_time</code>, <code>upc_a</code>, <code>upc_e</code>, <code>uri</code>, <code>uri_extension</code>, <code>uri_page</code>, <code>uri_path</code>, <code>url</code>, <code>user_agent</code>, <code>user_name</code>, <code>uuid4</code>, <code>windows_platform_token</code>, <code>word</code>, <code>words</code>, <code>year</code>, <code>zip</code>, <code>zipcode</code>, <code>zipcode_in_state</code>, <code>zipcode_plus4</code> <code>locale</code> <code>null</code>, <code>ar_AA</code>, <code>ar_AE</code>, <code>ar_BH</code>, <code>ar_EG</code>, <code>ar_JO</code>, <code>ar_PS</code>, <code>ar_SA</code>, <code>az_AZ</code>, <code>bg_BG</code>, <code>bn_BD</code>, <code>bs_BA</code>, <code>cs_CZ</code>, <code>da_DK</code>, <code>de</code>, <code>de_AT</code>, <code>de_CH</code>, <code>de_DE</code>, <code>dk_DK</code>, <code>el_CY</code>, <code>el_GR</code>, <code>en</code>, <code>en_AU</code>, <code>en_CA</code>, <code>en_GB</code>, <code>en_IE</code>, <code>en_IN</code>, <code>en_NZ</code>, <code>en_PH</code>, <code>en_TH</code>, <code>en_US</code>, <code>es</code>, <code>es_AR</code>, <code>es_CA</code>, <code>es_CL</code>, <code>es_CO</code>, <code>es_ES</code>, <code>es_MX</code>, <code>et_EE</code>, <code>fa_IR</code>, <code>fi_FI</code>, <code>fil_PH</code>, <code>fr_BE</code>, <code>fr_CA</code>, <code>fr_CH</code>, <code>fr_FR</code>, <code>fr_QC</code>, <code>ga_IE</code>, <code>he_IL</code>, <code>hi_IN</code>, <code>hr_HR</code>, <code>hu_HU</code>, <code>hy_AM</code>, <code>id_ID</code>, <code>it_CH</code>, <code>it_IT</code>, <code>ja_JP</code>, <code>ka_GE</code>, <code>ko_KR</code>, <code>la</code>, <code>lb_LU</code>, <code>lt_LT</code>, <code>lv_LV</code>, <code>mt_MT</code>, <code>ne_NP</code>, <code>nl_BE</code>, <code>nl_NL</code>, <code>no_NO</code>, <code>or_IN</code>, <code>pl_PL</code>, <code>pt_BR</code>, <code>pt_PT</code>, <code>ro_RO</code>, <code>ru_RU</code>, <code>sk_SK</code>, <code>sl_SI</code>, <code>sq_AL</code>, <code>sv_SE</code>, <code>ta_IN</code>, <code>th</code>, <code>th_TH</code>, <code>tl_PH</code>, <code>tr_TR</code>, <code>tw_GH</code>, <code>uk_UA</code>, <code>vi_VN</code>, <code>zh_CN</code>, <code>zh_TW</code> <p>Examples</p> <p>1. Generate fake italian name</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.faker(\"name\", \"it_IT\")\n</code></pre> <pre><code>select bigfunctions.us.faker(\"name\", \"it_IT\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.faker(\"name\", \"it_IT\")\n</code></pre> <pre>\n<code>+------------------+\n| fake_data        |\n+------------------+\n| Michela Beccaria |\n+------------------+\n</code>\n</pre> <p>2. Generate fake IPv4 address (without specifying locale)</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.faker(\"ipv4_private\", null)\n</code></pre> <pre><code>select bigfunctions.us.faker(\"ipv4_private\", null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.faker(\"ipv4_private\", null)\n</code></pre> <pre>\n<code>+---------------+\n| fake_data     |\n+---------------+\n| 10.52.207.187 |\n+---------------+\n</code>\n</pre>"},{"location":"bigfunctions/find_greater_value/","title":"find_greater_value - BigQuery","text":"<p> bigfunctions  &gt; find_greater_value </p>"},{"location":"bigfunctions/find_greater_value/#find_greater_value","title":"find_greater_value","text":"<p>Signature <pre><code>find_greater_value(arr, x)\n</code></pre></p> <p>Description</p> <p>Return the <code>offset</code> (zero-based index) of the first <code>value</code> in <code>arr</code> where <code>value &gt;= x</code> (or <code>null</code> if no <code>value</code> is greater than <code>x</code>).</p> <p>Examples</p> <p>1. When a strictly greater <code>value</code> exists in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_greater_value([0, 20, 50, 80, 100], 25)\n</code></pre> <pre><code>select bigfunctions.us.find_greater_value([0, 20, 50, 80, 100], 25)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_greater_value([0, 20, 50, 80, 100], 25)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| 2      |\n+--------+\n</code>\n</pre> <p>2. When an identical <code>value</code> exists in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_greater_value([0, 20, 50, 80, 100], 20)\n</code></pre> <pre><code>select bigfunctions.us.find_greater_value([0, 20, 50, 80, 100], 20)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_greater_value([0, 20, 50, 80, 100], 20)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| 1      |\n+--------+\n</code>\n</pre> <p>3. When a greater <code>value</code> does NOT exist in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_greater_value([0, 20, 50, 80, 100], 110)\n</code></pre> <pre><code>select bigfunctions.us.find_greater_value([0, 20, 50, 80, 100], 110)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_greater_value([0, 20, 50, 80, 100], 110)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| null   |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/find_lower_value/","title":"find_lower_value - BigQuery","text":"<p> bigfunctions  &gt; find_lower_value </p>"},{"location":"bigfunctions/find_lower_value/#find_lower_value","title":"find_lower_value","text":"<p>Signature <pre><code>find_lower_value(arr, x)\n</code></pre></p> <p>Description</p> <p>Return the <code>offset</code> (zero-based index) of the first <code>value</code> in <code>arr</code> where <code>value &lt;= x</code> (or <code>null</code> if no <code>value</code> is lower than <code>x</code>).</p> <p>Examples</p> <p>1. When a strictly lower <code>value</code> exists in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_lower_value([5, 4, 3, 100], 3.5)\n</code></pre> <pre><code>select bigfunctions.us.find_lower_value([5, 4, 3, 100], 3.5)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_lower_value([5, 4, 3, 100], 3.5)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| 2      |\n+--------+\n</code>\n</pre> <p>2. When an identical <code>value</code> exists in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_lower_value([5, 4, 3, 100], 4)\n</code></pre> <pre><code>select bigfunctions.us.find_lower_value([5, 4, 3, 100], 4)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_lower_value([5, 4, 3, 100], 4)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| 1      |\n+--------+\n</code>\n</pre> <p>3. When a lower <code>value</code> does NOT exist in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_lower_value([5, 4, 3, 100], 2)\n</code></pre> <pre><code>select bigfunctions.us.find_lower_value([5, 4, 3, 100], 2)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_lower_value([5, 4, 3, 100], 2)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| null   |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/find_value/","title":"find_value - BigQuery","text":"<p> bigfunctions  &gt; find_value </p>"},{"location":"bigfunctions/find_value/#find_value","title":"find_value","text":"<p>Signature <pre><code>find_value(arr, value)\n</code></pre></p> <p>Description</p> <p>Return the first <code>offset</code> (zero-based index) of <code>value</code> in array <code>arr</code> (or <code>null</code> if <code>value</code> is not in <code>arr</code>).</p> <p>Examples</p> <p>1. When <code>value</code> is in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_value([3, 4], 4)\n</code></pre> <pre><code>select bigfunctions.us.find_value([3, 4], 4)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_value([3, 4], 4)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| 1      |\n+--------+\n</code>\n</pre> <p>2. When <code>value</code> is not in array</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.find_value([3, 4], 7)\n</code></pre> <pre><code>select bigfunctions.us.find_value([3, 4], 7)\n</code></pre> <pre><code>select bigfunctions.europe_west1.find_value([3, 4], 7)\n</code></pre> <pre>\n<code>+--------+\n| offset |\n+--------+\n| null   |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/format_percentage/","title":"format_percentage - BigQuery","text":"<p> bigfunctions  &gt; format_percentage </p>"},{"location":"bigfunctions/format_percentage/#format_percentage","title":"format_percentage","text":"<p>Signature <pre><code>format_percentage(first_number, second_number, nb_decimals)\n</code></pre></p> <p>Description</p> <p>Return <code>first_number / second_number</code> as a formatted percentage in a user-friendly format. You can use this function to handle a safe divide of the two numbers as well as your desired level of rounding.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.format_percentage(1, 3, 2)\n</code></pre> <pre><code>select bigfunctions.us.format_percentage(1, 3, 2)\n</code></pre> <pre><code>select bigfunctions.europe_west1.format_percentage(1, 3, 2)\n</code></pre> <pre>\n<code>+----------------------+\n| formatted_percentage |\n+----------------------+\n| 33.33 %              |\n+----------------------+\n</code>\n</pre>"},{"location":"bigfunctions/frequent_values/","title":"frequent_values - BigQuery","text":"<p> bigfunctions  &gt; frequent_values </p>"},{"location":"bigfunctions/frequent_values/#frequent_values","title":"frequent_values","text":"<p>Signature <pre><code>frequent_values(values, frequency_threshold)\n</code></pre></p> <p>Description</p> <p>Returns <code>frequent_values</code> among array of <code>values</code></p> <p>This function computes the frequency of each value in <code>values</code> array and returns the values which frequency is stricly above the given <code>frequency_threshold</code>.</p> <p>Examples</p> <p>Detect frequent strings in an array of strings with a <code>frequency_threshold</code> of 0.2. <code>banana</code> appears 3 times for an array of 6 elements so its frequency is 3 / 6 = 0.5 &gt; 0.4. It is a frequent string compared to the <code>frequency_threshold</code>. </p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.frequent_values([\"apple\", \"apple\", \"banana\", \"banana\", \"banana\", \"cherry\"], 0.4)\n</code></pre> <pre><code>select bigfunctions.us.frequent_values([\"apple\", \"apple\", \"banana\", \"banana\", \"banana\", \"cherry\"], 0.4)\n</code></pre> <pre><code>select bigfunctions.europe_west1.frequent_values([\"apple\", \"apple\", \"banana\", \"banana\", \"banana\", \"cherry\"], 0.4)\n</code></pre> <pre>\n<code>+-----------------+\n| frequent_values |\n+-----------------+\n| [\"banana\"]      |\n+-----------------+\n</code>\n</pre>"},{"location":"bigfunctions/generate_dates/","title":"generate_dates - BigQuery","text":"<p> bigfunctions  &gt; generate_dates </p>"},{"location":"bigfunctions/generate_dates/#generate_dates","title":"generate_dates","text":"<p>Signature <pre><code>generate_dates(start_date, end_date)\n</code></pre></p> <p>Description</p> <p>Generate a table of dates</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select * from bigfunctions.eu.generate_dates(date('2023-01-01'), date('2023-01-05'))\n</code></pre> <pre><code>select * from bigfunctions.us.generate_dates(date('2023-01-01'), date('2023-01-05'))\n</code></pre> <pre><code>select * from bigfunctions.europe_west1.generate_dates(date('2023-01-01'), date('2023-01-05'))\n</code></pre> <pre>\n<code>\n+------------+-------------+-------------------+-----------------+-------------------+-----------------+-------------+------------+---------------+-------------+\n|    date    | day_of_week | week_start_monday | week_end_monday | week_start_sunday | week_end_sunday | month_start | month_end  | quarter_start | quarter_end |\n+------------+-------------+-------------------+-----------------+-------------------+-----------------+-------------+------------+---------------+-------------+\n| 2023-01-01 |     Sun     |    2022-12-26     |    2023-01-01   |     2023-01-01    |    2023-01-07   |  2023-01-01 | 2023-01-31 |   2023-01-01  | 2023-03-31  |\n| 2023-01-02 |     Mon     |    2023-01-02     |    2023-01-08   |     2023-01-01    |    2023-01-07   |  2023-01-01 | 2023-01-31 |   2023-01-01  | 2023-03-31  |\n| 2023-01-03 |     Tue     |    2023-01-02     |    2023-01-08   |     2023-01-01    |    2023-01-07   |  2023-01-01 | 2023-01-31 |   2023-01-01  | 2023-03-31  |\n| 2023-01-04 |     Wed     |    2023-01-02     |    2023-01-08   |     2023-01-01    |    2023-01-07   |  2023-01-01 | 2023-01-31 |   2023-01-01  | 2023-03-31  |\n| 2023-01-05 |     Thu     |    2023-01-02     |    2023-01-08   |     2023-01-01    |    2023-01-07   |  2023-01-01 | 2023-01-31 |   2023-01-01  | 2023-03-31  |\n+------------+-------------+-------------------+-----------------+-------------------+-----------------+-------------+------------+---------------+-------------+\n\n</code>\n</pre>"},{"location":"bigfunctions/generate_face_embedding/","title":"generate_face_embedding - BigQuery","text":"<p> bigfunctions  &gt; generate_face_embedding </p>"},{"location":"bigfunctions/generate_face_embedding/#generate_face_embedding","title":"generate_face_embedding","text":"<p>Signature <pre><code>generate_face_embedding(image_url)\n</code></pre></p> <p>Description</p> <p>Detect Face on image and Generate its Embedding using deepface.</p> <ul> <li><code>image_url</code> is the url of a photo which contains a face. It can be a signed url of a cloud storage object. Then this function works well with object tables.</li> <li><code>output</code> is the output of <code>DeepFace.represent</code> method. It is like:</li> </ul> <pre><code>{\n  embedding: [...],      # A 4096 float vector\n  facial_areal: {...},   # Coordinated of detected face\n  face_confidence: 1.0,  # Confidence score for face detection\n}\n</code></pre> <p>Examples</p> <p>Public test image from deepface</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.generate_face_embedding('https://raw.githubusercontent.com/serengil/deepface/master/tests/dataset/img1.jpg')\n</code></pre> <pre><code>select bigfunctions.us.generate_face_embedding('https://raw.githubusercontent.com/serengil/deepface/master/tests/dataset/img1.jpg')\n</code></pre> <pre><code>select bigfunctions.europe_west1.generate_face_embedding('https://raw.githubusercontent.com/serengil/deepface/master/tests/dataset/img1.jpg')\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------+\n| output                                                                  |\n+-------------------------------------------------------------------------+\n| {\n  embedding: [...],\n  facial_areal: {...},\n  face_confidence: 1.0,\n}\n |\n+-------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/generate_sql/","title":"generate_sql - BigQuery","text":"<p> bigfunctions  &gt; generate_sql </p>"},{"location":"bigfunctions/generate_sql/#generate_sql","title":"generate_sql","text":"<p>Signature <pre><code>generate_sql(question, fully_qualified_table)\n</code></pre></p> <p>Description</p> <p>Transform <code>question</code> to a SQL query.</p> <p>This function sends the following enriched question to <code>ask_ai</code> (the schema of <code>fully_qualified_table</code> is sent so that the generated SQL query is adapted to your data):</p> <pre><code>Question: {{question}}\nTable:    {{fully_qualified_table}}\nColumns:  {{columns of fully_qualified_table}}\nAnswer:   bigquery sql query\n</code></pre> Param Description <code>question</code> A question to ask over your data. It may start with a verb <code>fully_qualified_table</code> A table whose schema will be given to the generative AI model for context. - <code>fully_qualified_table</code> format must be like <code>PROJECT.DATASET.TABLE</code>.  - <code>fully_qualified_table</code> must exist.  - You must have read permission on the table schema <p>Examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.generate_sql('get the 3 products which generated the most revenue in 2023', 'eu.sales');\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.generate_sql('get the 3 products which generated the most revenue in 2023', 'us.sales');\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.generate_sql('get the 3 products which generated the most revenue in 2023', 'europe_west1.sales');\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+---------------+-------------------+-------------------------+\n| generated_sql | question          | raw_answer_before_clean |\n+---------------+-------------------+-------------------------+\n+ SELECT ...    + Question: get ... | sql``` SELECT...        |\n+---------------+-------------------+-------------------------+\n\n</code>\n</pre>"},{"location":"bigfunctions/geocode/","title":"geocode - BigQuery","text":"<p> bigfunctions  &gt; geocode </p>"},{"location":"bigfunctions/geocode/#geocode","title":"geocode","text":"<p>Signature <pre><code>geocode(address)\n</code></pre></p> <p>Description</p> <p>Get <code>address</code> details from Google Maps</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.geocode('1 rue des champs elysees, Paris')\n</code></pre> <pre><code>select bigfunctions.us.geocode('1 rue des champs elysees, Paris')\n</code></pre> <pre><code>select bigfunctions.europe_west1.geocode('1 rue des champs elysees, Paris')\n</code></pre> <pre>\n<code>+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| address_details                                                                                                                                                                                                                                                                                                                                                 |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n    \"address_components\": [...],\n    \"formatted_address\": \"1 Av. des Champs-\u00c9lys\u00e9es, 75008 Paris, France\",\n    \"geometry\": {\n        \"location\": {\n            \"lat\": 48.86988770000001,\n            \"lng\": 2.3079341\n        },\n        ...\n    },\n    \"place_id\": \"ChIJ6499V8Rv5kcR5f9dbz3OeBI\",\n    \"plus_code\": {...},\n    \"types\": [\"street_address\"]\n}\n |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/get/","title":"get - BigQuery","text":"<p> bigfunctions  &gt; get </p>"},{"location":"bigfunctions/get/#get","title":"get","text":"<p>Signature <pre><code>get(url, headers)\n</code></pre></p> <p>Description</p> <p>Request <code>url</code></p> <p>Examples</p> <p>1. Without headers</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get('https://unytics.io/bigfunctions', null)\n</code></pre> <pre><code>select bigfunctions.us.get('https://unytics.io/bigfunctions', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get('https://unytics.io/bigfunctions', null)\n</code></pre> <pre>\n<code>+------------------------+\n| response               |\n+------------------------+\n| &amp;lt;html&gt;...&amp;lt;/html&gt; |\n+------------------------+\n</code>\n</pre> <p>2. With Content-Type = application/json headers</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get('https://api.github.com/repos/unytics/bigfunctions', json '{\"Content-Type\": \"application/json\"}')\n</code></pre> <pre><code>select bigfunctions.us.get('https://api.github.com/repos/unytics/bigfunctions', json '{\"Content-Type\": \"application/json\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get('https://api.github.com/repos/unytics/bigfunctions', json '{\"Content-Type\": \"application/json\"}')\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| {...}    |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/get_appstore_reviews/","title":"get_appstore_reviews - BigQuery","text":"<p> bigfunctions  &gt; get_appstore_reviews </p>"},{"location":"bigfunctions/get_appstore_reviews/#get_appstore_reviews","title":"get_appstore_reviews","text":"<p>Signature <pre><code>get_appstore_reviews(url)\n</code></pre></p> <p>Description</p> <p>GET Apple App Store Reviews of an app given its <code>url</code></p> <p>Examples</p> <p>Get customer reviews of Nickel App in App Store</p> EUUSeurope-west1 <pre><code>select * from bigfunctions.eu.get_appstore_reviews('https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763')\n</code></pre> <pre><code>select * from bigfunctions.us.get_appstore_reviews('https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763')\n</code></pre> <pre><code>select * from bigfunctions.europe_west1.get_appstore_reviews('https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763')\n</code></pre> <pre>\n<code>\n| ---------------------------------------------------|\n| rating | content                                   |\n| ---------------------------------------------------|\n|    5   | Very simple to use                        |\n|        |                                           |\n|    5   | I advise you perfectly,                   |\n|        | I have been with them for 5 years now,    |\n|        | I have never had a problem.               |\n|        |                                           |\n|    5   | Really great. I opted for the black card. |\n|        |                                           |\n|        | ...                                       |\n| ---------------------------------------------------|\n\n</code>\n</pre>"},{"location":"bigfunctions/get_csv/","title":"get_csv - BigQuery","text":"<p> bigfunctions  &gt; get_csv </p>"},{"location":"bigfunctions/get_csv/#get_csv","title":"get_csv","text":"<p>Signature <pre><code>get_csv(url, destination_table)\n</code></pre></p> <p>Description</p> <p>Download csv file from <code>url</code> into <code>destination_table</code></p> <p>Requirements</p> <p>You must create the <code>destination_dataset</code> and give <code>dataEditor</code> access to <code>bigfunction@bigfunctions.iam.gserviceaccount.com</code> before calling this function. You can do this by executing:</p> <pre><code>-- Create Destination Dataset\ncreate schema `your_project.your_dataset`;\n\n-- Grant Access to Destination Dataset\ngrant `roles/bigquery.dataEditor`\non schema `your_project.your_dataset`\nto 'serviceAccount:bigfunction@bigfunctions.iam.gserviceaccount.com';\n</code></pre> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_csv('https://firms.modaps.eosdis.nasa.gov/data/active_fire/modis-c6.1/csv/MODIS_C6_1_Global_7d.csv', 'your_project.your_dataset.your_table')\n</code></pre> <pre><code>select bigfunctions.us.get_csv('https://firms.modaps.eosdis.nasa.gov/data/active_fire/modis-c6.1/csv/MODIS_C6_1_Global_7d.csv', 'your_project.your_dataset.your_table')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_csv('https://firms.modaps.eosdis.nasa.gov/data/active_fire/modis-c6.1/csv/MODIS_C6_1_Global_7d.csv', 'your_project.your_dataset.your_table')\n</code></pre> <pre>\n<code>+--------+\n| status |\n+--------+\n| ok     |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/get_data/","title":"get_data - BigQuery","text":"<p> bigfunctions  &gt; get_data </p>"},{"location":"bigfunctions/get_data/#get_data","title":"get_data","text":"<p>Signature <pre><code>get_data(source, source_config, streams, destination_dataset)\n</code></pre></p> <p>Description</p> <p>Get data from 250+ sources using Airbyte Python Connectors .</p> <ul> <li>Airbye Serverless will extract data from <code>source</code> (one of 250+ Airbyte Python Connectors available on PyPI) using <code>source_config</code> (source configuration in yaml format expected by Airbyte Serverless).</li> <li>It will append data in raw format into one table per stream (a stream is like a resource type) in <code>destination_dataset</code>.</li> <li>When supported by the stream, data is extracted incrementally (next execution will only retrieve new rows). For this purpose, a state is stored in <code>_airbyte_states</code> table in <code>destination_dataset</code>.</li> <li>While running, connector logs are appended in table <code>_airbyte_logs</code>. You can check them to get details on the run.</li> <li>Examples below explain how to set the arguments.</li> </ul> <p>Examples</p> <p>1. Show valid sources for <code>source</code> argument by setting <code>source</code> to <code>null</code> <p>You can then copy one of these sources for <code>source</code> argument. </p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_data(null, null, null, null)\n</code></pre> <pre><code>select bigfunctions.us.get_data(null, null, null, null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_data(null, null, null, null)\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------+\n| result                                                                                                                   |\n+--------------------------------------------------------------------------------------------------------------------------+\n| # AVAILABLE SOURCES\n\nairbyte-source-activecampaign==0.1.10\nairbyte-source-adjust==0.1.11\nairbyte-source-aha==0.3.10\n...\n |\n+--------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>2. Show <code>source_config</code> sample at expected format by setting <code>source_config</code> to <code>null</code>. <p>You can then copy the result, modify it and provide it as <code>source_config</code> argument. </p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_data('airbyte-source-spacex-api==0.1.11', null, null, null)\n</code></pre> <pre><code>select bigfunctions.us.get_data('airbyte-source-spacex-api==0.1.11', null, null, null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_data('airbyte-source-spacex-api==0.1.11', null, null, null)\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------+\n| result                                                                 |\n+------------------------------------------------------------------------+\n| # SOURCE CONFIG\n\nid: # OPTIONAL | string\noptions: # OPTIONAL | string\n |\n+------------------------------------------------------------------------+\n</code>\n</pre> <p>3. Encrypt Secrets! <p>You usually have to write secrets in <code>source_config</code> such as api keys.</p> <p>We strongly advise NOT TO write your secrets in <code>source_config</code> in plain text.</p> <p>Otherwise, they will be stored in plain text in your BigQuery logs for months.</p> <p>Instead, you can use the following snippet to generate an encrypted version of your secrets that you can safely copy in <code>source_config</code> as shown in example below. This public bigfunction (deployed on bigfunctions GCP project) will be able to decrypt them. But no one else can.</p> Encrypt Secret <p></p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_data('airbyte-source-zendesk-support==2.6.10', '''\n  credentials:\n    access_token: ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd)\n  '''\n  , null, null)\n</code></pre> <pre><code>select bigfunctions.us.get_data('airbyte-source-zendesk-support==2.6.10', '''\n  credentials:\n    access_token: ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd)\n  '''\n  , null, null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_data('airbyte-source-zendesk-support==2.6.10', '''\n  credentials:\n    access_token: ENCRYPTED_SECRET(kdoekdswlxzapdldpzlfpfd)\n  '''\n  , null, null)\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| ...    |\n+--------+\n</code>\n</pre> <p>4. Show available streams by setting <code>streams</code> argument to <code>null</code>. <p>You can then copy one or several of these streams (separate them with commas) for <code>streams</code> argument. </p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_data('airbyte-source-spacex-api==0.1.11', '''\n  id: \"\"\n  options: \"\"\n  '''\n  , null, null)\n</code></pre> <pre><code>select bigfunctions.us.get_data('airbyte-source-spacex-api==0.1.11', '''\n  id: \"\"\n  options: \"\"\n  '''\n  , null, null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_data('airbyte-source-spacex-api==0.1.11', '''\n  id: \"\"\n  options: \"\"\n  '''\n  , null, null)\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------------------------------------------------------------------------+\n| result                                                                                                                                   |\n+------------------------------------------------------------------------------------------------------------------------------------------+\n| # AVAILABLE STREAMS\n\nlaunches, capsules, company, crew, cores, dragons, landpads, payloads, history, rockets, roadster, ships, starlink\n |\n+------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>5. Show one record of a stream by setting <code>destination_dataset</code> argument to <code>null</code>. <p>This is useful to check that you can get a record successfully or to understand its content. </p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_data('airbyte-source-spacex-api==0.1.11', '''\n  id: \"\"\n  options: \"\"\n  '''\n  , 'launches', null)\n</code></pre> <pre><code>select bigfunctions.us.get_data('airbyte-source-spacex-api==0.1.11', '''\n  id: \"\"\n  options: \"\"\n  '''\n  , 'launches', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_data('airbyte-source-spacex-api==0.1.11', '''\n  id: \"\"\n  options: \"\"\n  '''\n  , 'launches', null)\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| result                                                                                                                                                                                                                                                                                         |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| # FIRST RECORD\n\n{\n    \"stream\": \"launches\",\n    \"data\": {\n        \"rocket\": \"5e9d0d95eda69973a809d1ec\",\n        \"success\": true,\n        \"flight_number\": 187,\n        \"name\": \"Crew-5\",\n        \"date_utc\": \"2022-10-05T16:00:00.000Z\",\n        ...\n    },\n    \"emitted_at\": 1721804564098\n}\n |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>6. Extract and load <code>crew</code> and <code>rockets</code> streams into <code>your_project.your_dataset</code>. <p>Requirements</p> <p>You must create the <code>destination_dataset</code> and give <code>dataEditor</code> access to <code>bigfunction@bigfunctions.iam.gserviceaccount.com</code> before calling this function. You can do this by executing:</p> <p><pre><code>-- Create Destination Dataset\ncreate schema `your_project.your_dataset`;\n\n-- Grant Access to Destination Dataset\ngrant `roles/bigquery.dataEditor`\non schema `your_project.your_dataset`\nto 'serviceAccount:bigfunction@bigfunctions.iam.gserviceaccount.com';\n</code></pre> </p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_data('airbyte-source-spacex-api==0.1.11', '''\n  id: \"\"\n  options: \"\"\n  '''\n  , 'crew, rockets', 'your_project.your_dataset')\n</code></pre> <pre><code>select bigfunctions.us.get_data('airbyte-source-spacex-api==0.1.11', '''\n  id: \"\"\n  options: \"\"\n  '''\n  , 'crew, rockets', 'your_project.your_dataset')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_data('airbyte-source-spacex-api==0.1.11', '''\n  id: \"\"\n  options: \"\"\n  '''\n  , 'crew, rockets', 'your_project.your_dataset')\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------------------------+\n| result                                                                                    |\n+-------------------------------------------------------------------------------------------+\n| Data load job ended successfully. Check logs at `your_project.your_dataset._airbyte_logs` |\n+-------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/get_github_data/","title":"get_github_data - BigQuery","text":"<p> bigfunctions  &gt; get_github_data </p>"},{"location":"bigfunctions/get_github_data/#get_github_data","title":"get_github_data","text":"<p>Signature <pre><code>get_github_data(public_repo, destination_dataset, streams)\n</code></pre></p> <p>Description</p> <p>Get data from <code>public_repo</code> into <code>destination_dataset</code> (using GitHub Airbyte Connector with Airbyte-Serverless)</p> <p>Data is appended in raw format in tables (one table per stream) into <code>destination_dataset</code>. When supported by the stream, data is extracted incrementally (next execution will only retrieve new rows).</p> <p>You must create the <code>destination_dataset</code> and give <code>dataEditor</code> access to <code>bigfunction@bigfunctions.iam.gserviceaccount.com</code> before calling this function. You can do this by executing:</p> <pre><code>-- Create Destination Dataset\ncreate schema `your_project.your_dataset`;\n\n-- Grant Access to Destination Dataset\ngrant `roles/bigquery.dataEditor`\non schema `your_project.your_dataset`\nto 'serviceAccount:bigfunction@bigfunctions.iam.gserviceaccount.com';\n</code></pre> <p>While it's running (or after) you can explore logs in table <code>your_project.your_dataset._airbyte_logs</code></p> <p>Examples</p> <p>1. Get stargazers from airbytehq/airbyte repository</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_github_data('airbytehq/airbyte', 'your_project.your_dataset', 'stargazers')\n</code></pre> <pre><code>select bigfunctions.us.get_github_data('airbytehq/airbyte', 'your_project.your_dataset', 'stargazers')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_github_data('airbytehq/airbyte', 'your_project.your_dataset', 'stargazers')\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| ok     |\n+--------+\n</code>\n</pre> <p>2. Get stargazers AND releases from airbytehq/airbyte repository</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_github_data('airbytehq/airbyte', 'your_project.your_dataset', 'stargazers, releases')\n</code></pre> <pre><code>select bigfunctions.us.get_github_data('airbytehq/airbyte', 'your_project.your_dataset', 'stargazers, releases')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_github_data('airbytehq/airbyte', 'your_project.your_dataset', 'stargazers, releases')\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| ok     |\n+--------+\n</code>\n</pre> <p>3. To get a list of available streams, let <code>streams</code> param to null</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_github_data('airbytehq/airbyte', 'your_project.your_dataset', null)\n</code></pre> <pre><code>select bigfunctions.us.get_github_data('airbytehq/airbyte', 'your_project.your_dataset', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_github_data('airbytehq/airbyte', 'your_project.your_dataset', null)\n</code></pre> <pre>\n<coden| result|\nn| issue_timeline_events,assignees,branches,collaborators,comments,commit_comment_reactions,commit_comments,commits,contributor_activity,deployments,events,issue_comment_reactions,issue_events,issue_labels,issue_milestones,issue_reactions,issues,organizations,project_cards,project_columns,projects,pull_request_comment_reactions,pull_request_commits,pull_request_stats,projects_v2,pull_requests,releases,repositories,review_comments,reviews,stargazers,tags,teams,team_members,users,workflows,workflow_runs,workflow_jobs,team_memberships |\nn</code>\n</pre>"},{"location":"bigfunctions/get_json/","title":"get_json - BigQuery","text":"<p> bigfunctions  &gt; get_json </p>"},{"location":"bigfunctions/get_json/#get_json","title":"get_json","text":"<p>Signature <pre><code>get_json(url, headers)\n</code></pre></p> <p>Description</p> <p>GET json <code>data</code> from <code>url</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_json('https://api.github.com/repos/unytics/bigfunctions', null)\n</code></pre> <pre><code>select bigfunctions.us.get_json('https://api.github.com/repos/unytics/bigfunctions', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_json('https://api.github.com/repos/unytics/bigfunctions', null)\n</code></pre> <pre>\n<code>+-------+\n| data  |\n+-------+\n| {...} |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/get_latest_partition_timestamp/","title":"get_latest_partition_timestamp - BigQuery","text":"<p> bigfunctions  &gt; get_latest_partition_timestamp </p>"},{"location":"bigfunctions/get_latest_partition_timestamp/#get_latest_partition_timestamp","title":"get_latest_partition_timestamp","text":"<p>Signature <pre><code>get_latest_partition_timestamp(fully_qualified_table)\n</code></pre></p> <p>Description</p> <p>Return the maximum of the partition column of <code>fully_qualified_table</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.get_latest_partition_timestamp(\"my_project.my_dataset.my_table\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.us.get_latest_partition_timestamp(\"my_project.my_dataset.my_table\");\nselect * from bigfunction_result;\n</code></pre> <pre><code>call bigfunctions.europe_west1.get_latest_partition_timestamp(\"my_project.my_dataset.my_table\");\nselect * from bigfunction_result;\n</code></pre> <pre>\n<code>\n+----------------------------+\n| latest_partition_timestamp |\n+----------------------------+\n|         2023-01-10         |\n+----------------------------+\n\n</code>\n</pre>"},{"location":"bigfunctions/get_meteo/","title":"get_meteo - BigQuery","text":"<p> bigfunctions  &gt; get_meteo </p>"},{"location":"bigfunctions/get_meteo/#get_meteo","title":"get_meteo","text":"<p>Signature <pre><code>get_meteo(latitude, longitude, date)\n</code></pre></p> <p>Description</p> <p>Get <code>meteo</code> for <code>latitude</code> , <code>longitude</code> and <code>date</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_meteo(52.52, 13.41, '2023-05-10')\n</code></pre> <pre><code>select bigfunctions.us.get_meteo(52.52, 13.41, '2023-05-10')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_meteo(52.52, 13.41, '2023-05-10')\n</code></pre> <pre>\n<code>+-------+\n| meteo |\n+-------+\n| {...} |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/get_playstore_reviews/","title":"get_playstore_reviews - BigQuery","text":"<p> bigfunctions  &gt; get_playstore_reviews </p>"},{"location":"bigfunctions/get_playstore_reviews/#get_playstore_reviews","title":"get_playstore_reviews","text":"<p>Signature <pre><code>get_playstore_reviews(app_id, country, language)\n</code></pre></p> <p>Description</p> <p>GET Google Play Store Reviews of an app (using google-play-scraper)</p> <ul> <li><code>app_id</code> can be found in the url of the app on the play store. For example for url <code>https://play.google.com/store/apps/details?id=com.fpe.comptenickel&amp;hl=en&amp;pli=1</code>, the <code>app_id</code> is <code>com.fpe.comptenickel</code></li> <li><code>country</code> is the two-letter country iso code of the device where the app was downloaded</li> <li><code>language</code> is the two-letter language iso code of the review</li> </ul> <p>The function will return the 600 newest <code>reviews</code> as json.</p> <p>Examples</p> <p>GET reviews written in English for Nickel App installed on French devices</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_playstore_reviews('com.fpe.comptenickel', 'fr', 'en')\n</code></pre> <pre><code>select bigfunctions.us.get_playstore_reviews('com.fpe.comptenickel', 'fr', 'en')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_playstore_reviews('com.fpe.comptenickel', 'fr', 'en')\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| reviews                                                                                                                                                      |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [\n  {\n    appVersion: \"2.90.0\"\n    at: \"Thu, 19 Sep 2024 10:44:05 GMT\",\n    content: \"...\",\n    repliedAt: ...,\n    replyContent: ...,\n    ...\n  },\n  ...\n]\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/get_table_columns/","title":"get_table_columns - BigQuery","text":"<p> bigfunctions  &gt; get_table_columns </p>"},{"location":"bigfunctions/get_table_columns/#get_table_columns","title":"get_table_columns","text":"<p>Signature <pre><code>get_table_columns(fully_qualified_table)\n</code></pre></p> <p>Description</p> <p>Get the column information of the given table from <code>INFORMATION_SCHEMA.COLUMNS</code> and put them in a temporary table called <code>bigfunction_result</code>.</p> <p>Examples</p> <p>call <code>bigfunctions.eu._get_columns</code>(\"bigfunctions.samples.natality\"); select column_name, data_type from bigfunction_result ; </p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.get_table_columns(\"eu.natality\");\n</code></pre> <pre><code>call bigfunctions.us.get_table_columns(\"us.natality\");\n</code></pre> <pre><code>call bigfunctions.europe_west1.get_table_columns(\"europe_west1.natality\");\n</code></pre>"},{"location":"bigfunctions/get_transport_emissions/","title":"get_transport_emissions - BigQuery","text":"<p> bigfunctions  &gt; get_transport_emissions </p>"},{"location":"bigfunctions/get_transport_emissions/#get_transport_emissions","title":"get_transport_emissions","text":"<p>Signature <pre><code>get_transport_emissions(distance_km)\n</code></pre></p> <p>Description</p> <p>Get the transport CO2 emissions given the <code>distance_km</code> by transport mode from impactco2.fr</p> <p>Examples</p> <p>Get transport emissions for 200 km</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_transport_emissions(200)\n</code></pre> <pre><code>select bigfunctions.us.get_transport_emissions(200)\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_transport_emissions(200)\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------------------------------------------------------------------------+\n| co2_emissions_by_transport_mode                                                                                                           |\n+-------------------------------------------------------------------------------------------------------------------------------------------+\n| [\n  {\"id\": 2, \"name\": \"High-speed train\",\"value\":0.46},\n  {\"id\": 22,\"name\": \"Carpooling combustion (1 passenger)\",\"value\":19.2},\n  ...\n]\n |\n+-------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/get_value/","title":"get_value - BigQuery","text":"<p> bigfunctions  &gt; get_value </p>"},{"location":"bigfunctions/get_value/#get_value","title":"get_value","text":"<p>Signature <pre><code>get_value(key_value_items, search_key)\n</code></pre></p> <p>Description</p> <p>Return the first <code>value</code> with a key <code>search_key</code> from <code>key_value_items</code> (or return <code>null</code> if <code>search_key</code> does not exist in <code>key_value_items</code>).</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_value([struct('a' as key, 8 as value), struct('b' as key, 9 as value)], 'a')\n</code></pre> <pre><code>select bigfunctions.us.get_value([struct('a' as key, 8 as value), struct('b' as key, 9 as value)], 'a')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_value([struct('a' as key, 8 as value), struct('b' as key, 9 as value)], 'a')\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 8     |\n+-------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_value([struct('a' as key, 8 as value), struct('b' as key, 9 as value)], 'c')\n</code></pre> <pre><code>select bigfunctions.us.get_value([struct('a' as key, 8 as value), struct('b' as key, 9 as value)], 'c')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_value([struct('a' as key, 8 as value), struct('b' as key, 9 as value)], 'c')\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| null  |\n+-------+\n</code>\n</pre> <p>3. When there are multiple occurences of <code>search_key</code>, return the first found <code>value</code></p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_value([struct('a' as key, 8 as value), struct('a' as key, 9 as value)], 'a')\n</code></pre> <pre><code>select bigfunctions.us.get_value([struct('a' as key, 8 as value), struct('a' as key, 9 as value)], 'a')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_value([struct('a' as key, 8 as value), struct('a' as key, 9 as value)], 'a')\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 8     |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/get_view_history/","title":"get_view_history - BigQuery","text":"<p> bigfunctions  &gt; get_view_history </p>"},{"location":"bigfunctions/get_view_history/#get_view_history","title":"get_view_history","text":"<p>Signature <pre><code>get_view_history(fully_qualified_view)\n</code></pre></p> <p>Description</p> <p>Get BigQuery View history</p> <p>Examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.get_view_history(your_project.your_dataset.view_name);\n</code></pre> <pre><code>call bigfunctions.us.get_view_history(your_project.your_dataset.view_name);\n</code></pre> <pre><code>call bigfunctions.europe_west1.get_view_history(your_project.your_dataset.view_name);\n</code></pre>"},{"location":"bigfunctions/get_webpage_data/","title":"get_webpage_data - BigQuery","text":"<p> bigfunctions  &gt; get_webpage_data </p>"},{"location":"bigfunctions/get_webpage_data/#get_webpage_data","title":"get_webpage_data","text":"<p>Signature <pre><code>get_webpage_data(prompt, url)\n</code></pre></p> <p>Description</p> <p>Extract <code>data</code> from <code>url</code> using <code>prompt</code> (using scrapegraph-ai python library)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_webpage_data('''\n  Return the list of bigfunctions in the category \"get data\".\n\n  Result must be a dict with the name of the bigfunction as key and its description as value.\n  Do not include arguments in the name.\n  '''\n  , 'https://unytics.io/bigfunctions/bigfunctions/')\n</code></pre> <pre><code>select bigfunctions.us.get_webpage_data('''\n  Return the list of bigfunctions in the category \"get data\".\n\n  Result must be a dict with the name of the bigfunction as key and its description as value.\n  Do not include arguments in the name.\n  '''\n  , 'https://unytics.io/bigfunctions/bigfunctions/')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_webpage_data('''\n  Return the list of bigfunctions in the category \"get data\".\n\n  Result must be a dict with the name of the bigfunction as key and its description as value.\n  Do not include arguments in the name.\n  '''\n  , 'https://unytics.io/bigfunctions/bigfunctions/')\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| data                                                                                                                                                                                |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"exchange_rate\": \"Get `exchange_rate`\",\n  \"faker\": \"Generates fake data\",\n  \"get\": \"Request `url`\",\n  \"get_appstore_reviews\": \"GET Apple App Store Reviews of an app\",\n  ...\n}\n |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/get_webpage_metadata/","title":"get_webpage_metadata - BigQuery","text":"<p> bigfunctions  &gt; get_webpage_metadata </p>"},{"location":"bigfunctions/get_webpage_metadata/#get_webpage_metadata","title":"get_webpage_metadata","text":"<p>Signature <pre><code>get_webpage_metadata(url)\n</code></pre></p> <p>Description</p> <p>Get webpage metadata (using metadata_parser python library)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_webpage_metadata('https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763')\n</code></pre> <pre><code>select bigfunctions.us.get_webpage_metadata('https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_webpage_metadata('https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763')\n</code></pre> <pre>\n<code>+----------+\n| metadata |\n+----------+\n| {...}    |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/get_webpage_structured_data/","title":"get_webpage_structured_data - BigQuery","text":"<p> bigfunctions  &gt; get_webpage_structured_data </p>"},{"location":"bigfunctions/get_webpage_structured_data/#get_webpage_structured_data","title":"get_webpage_structured_data","text":"<p>Signature <pre><code>get_webpage_structured_data(url)\n</code></pre></p> <p>Description</p> <p>Get webpage Structured Data that Google shows in search results.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.get_webpage_structured_data('https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763')\n</code></pre> <pre><code>select bigfunctions.us.get_webpage_structured_data('https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763')\n</code></pre> <pre><code>select bigfunctions.europe_west1.get_webpage_structured_data('https://apps.apple.com/fr/app/nickel-compte-pour-tous/id1119225763')\n</code></pre> <pre>\n<code>+-----------------+\n| structured_data |\n+-----------------+\n| {...}           |\n+-----------------+\n</code>\n</pre> <p></p>"},{"location":"bigfunctions/gregorian2hijri/","title":"gregorian2hijri - BigQuery","text":"<p> bigfunctions  &gt; gregorian2hijri </p>"},{"location":"bigfunctions/gregorian2hijri/#gregorian2hijri","title":"gregorian2hijri","text":"<p>Signature <pre><code>gregorian2hijri(gregorian_date)\n</code></pre></p> <p>Description</p> <p>Convert Gregorian Date to Hijri Date (taken from here)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.gregorian2hijri(date '2023-02-12')\n</code></pre> <pre><code>select bigfunctions.us.gregorian2hijri(date '2023-02-12')\n</code></pre> <pre><code>select bigfunctions.europe_west1.gregorian2hijri(date '2023-02-12')\n</code></pre> <pre>\n<code>+------------+\n| hijri_date |\n+------------+\n| 1444-7-20  |\n+------------+\n</code>\n</pre>"},{"location":"bigfunctions/h3/","title":"h3 - BigQuery","text":"<p> bigfunctions  &gt; h3 </p>"},{"location":"bigfunctions/h3/#h3","title":"h3","text":"<p>Signature <pre><code>h3(function_name, arguments)\n</code></pre></p> <p>Description</p> <p>Wrapper around Uber H3 (A Hexagonal Hierarchical Geospatial Indexing System).</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.h3('latLngToCell', json '[37.3615593, -122.0553238, 7]')\n</code></pre> <pre><code>select bigfunctions.us.h3('latLngToCell', json '[37.3615593, -122.0553238, 7]')\n</code></pre> <pre><code>select bigfunctions.europe_west1.h3('latLngToCell', json '[37.3615593, -122.0553238, 7]')\n</code></pre> <pre>\n<code>+-------------------+\n| result            |\n+-------------------+\n| \"87283472bffffff\" |\n+-------------------+\n</code>\n</pre>"},{"location":"bigfunctions/html2pdf/","title":"html2pdf - BigQuery","text":"<p> bigfunctions  &gt; html2pdf </p>"},{"location":"bigfunctions/html2pdf/#html2pdf","title":"html2pdf","text":"<p>Signature <pre><code>html2pdf(html)\n</code></pre></p> <p>Description</p> <p>Convert <code>html</code> to <code>pdf</code> encoded as a base64 string.</p> <p>This function is useful to combine with <code>send_mail</code> if you want to send a personnalized pdf to some people.</p> <p>To have a beautiful pdf, we advise you to get inspired by this invoice template.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.html2pdf(\"&lt;h1&gt;Love It!&lt;/h1&gt;\")\n</code></pre> <pre><code>select bigfunctions.us.html2pdf(\"&lt;h1&gt;Love It!&lt;/h1&gt;\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.html2pdf(\"&lt;h1&gt;Love It!&lt;/h1&gt;\")\n</code></pre> <pre>\n<code>+------------------+\n| pdf_base64       |\n+------------------+\n| JVBERi0xLjQK.... |\n+------------------+\n</code>\n</pre> <p></p>"},{"location":"bigfunctions/ip2asn/","title":"ip2asn - BigQuery","text":"<p> bigfunctions  &gt; ip2asn </p>"},{"location":"bigfunctions/ip2asn/#ip2asn","title":"ip2asn","text":"<p>Signature <pre><code>ip2asn(ip)\n</code></pre></p> <p>Description</p> <p>Get <code>asn</code> of <code>ip</code></p> <p>This functions uses IP address data powered by IPinfo and released under Creative Commons Attribution-ShareAlike 4.0 International License. You are required to attribute IPinfo to use their free datasets. The attribution requirements can be met by giving their service credit as your data source. Simply place a link to IPinfo on the website, application, or social media account that uses their data.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip2asn('152.216.7.110')\n</code></pre> <pre><code>select bigfunctions.us.ip2asn('152.216.7.110')\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip2asn('152.216.7.110')\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------+\n| asn                                                                    |\n+------------------------------------------------------------------------+\n| {\"asn\":\"AS30313\",\"domain\":\"irs.gov\",\"name\":\"Internal Revenue Service\"} |\n+------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/ip2continent/","title":"ip2continent - BigQuery","text":"<p> bigfunctions  &gt; ip2continent </p>"},{"location":"bigfunctions/ip2continent/#ip2continent","title":"ip2continent","text":"<p>Signature <pre><code>ip2continent(ip)\n</code></pre></p> <p>Description</p> <p>Get <code>continent_code</code> of <code>ip</code></p> <p>This functions uses IP address data powered by IPinfo and released under Creative Commons Attribution-ShareAlike 4.0 International License. You are required to attribute IPinfo to use their free datasets. The attribution requirements can be met by giving their service credit as your data source. Simply place a link to IPinfo on the website, application, or social media account that uses their data.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip2continent('152.216.7.110')\n</code></pre> <pre><code>select bigfunctions.us.ip2continent('152.216.7.110')\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip2continent('152.216.7.110')\n</code></pre> <pre>\n<code>+----------------+\n| continent_code |\n+----------------+\n| NA             |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/ip2continent_name/","title":"ip2continent_name - BigQuery","text":"<p> bigfunctions  &gt; ip2continent_name </p>"},{"location":"bigfunctions/ip2continent_name/#ip2continent_name","title":"ip2continent_name","text":"<p>Signature <pre><code>ip2continent_name(ip)\n</code></pre></p> <p>Description</p> <p>Get <code>continent</code> of <code>ip</code></p> <p>This functions uses IP address data powered by IPinfo and released under Creative Commons Attribution-ShareAlike 4.0 International License. You are required to attribute IPinfo to use their free datasets. The attribution requirements can be met by giving their service credit as your data source. Simply place a link to IPinfo on the website, application, or social media account that uses their data.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip2continent_name('152.216.7.110')\n</code></pre> <pre><code>select bigfunctions.us.ip2continent_name('152.216.7.110')\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip2continent_name('152.216.7.110')\n</code></pre> <pre>\n<code>+---------------+\n| continent     |\n+---------------+\n| North America |\n+---------------+\n</code>\n</pre>"},{"location":"bigfunctions/ip2country/","title":"ip2country - BigQuery","text":"<p> bigfunctions  &gt; ip2country </p>"},{"location":"bigfunctions/ip2country/#ip2country","title":"ip2country","text":"<p>Signature <pre><code>ip2country(ip)\n</code></pre></p> <p>Description</p> <p>Get <code>country_code</code> of <code>ip</code></p> <p>This functions uses IP address data powered by IPinfo and released under Creative Commons Attribution-ShareAlike 4.0 International License. You are required to attribute IPinfo to use their free datasets. The attribution requirements can be met by giving their service credit as your data source. Simply place a link to IPinfo on the website, application, or social media account that uses their data.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip2country('152.216.7.110')\n</code></pre> <pre><code>select bigfunctions.us.ip2country('152.216.7.110')\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip2country('152.216.7.110')\n</code></pre> <pre>\n<code>+--------------+\n| country_code |\n+--------------+\n| US           |\n+--------------+\n</code>\n</pre>"},{"location":"bigfunctions/ip2country_name/","title":"ip2country_name - BigQuery","text":"<p> bigfunctions  &gt; ip2country_name </p>"},{"location":"bigfunctions/ip2country_name/#ip2country_name","title":"ip2country_name","text":"<p>Signature <pre><code>ip2country_name(ip)\n</code></pre></p> <p>Description</p> <p>Get <code>country_name</code> of <code>ip</code></p> <p>This functions uses IP address data powered by IPinfo and released under Creative Commons Attribution-ShareAlike 4.0 International License. You are required to attribute IPinfo to use their free datasets. The attribution requirements can be met by giving their service credit as your data source. Simply place a link to IPinfo on the website, application, or social media account that uses their data.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip2country_name('152.216.7.110')\n</code></pre> <pre><code>select bigfunctions.us.ip2country_name('152.216.7.110')\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip2country_name('152.216.7.110')\n</code></pre> <pre>\n<code>+---------------+\n| country_name  |\n+---------------+\n| United States |\n+---------------+\n</code>\n</pre>"},{"location":"bigfunctions/ip_range2ip_networks/","title":"ip_range2ip_networks - BigQuery","text":"<p> bigfunctions  &gt; ip_range2ip_networks </p>"},{"location":"bigfunctions/ip_range2ip_networks/#ip_range2ip_networks","title":"ip_range2ip_networks","text":"<p>Signature <pre><code>ip_range2ip_networks(first_ip, last_ip)\n</code></pre></p> <p>Description</p> <p>Convert an IP range into a json list of IP networks in CIDR notation (the list can have only one element)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip_range2ip_networks('1.0.0.0', '1.0.0.255')\n</code></pre> <pre><code>select bigfunctions.us.ip_range2ip_networks('1.0.0.0', '1.0.0.255')\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip_range2ip_networks('1.0.0.0', '1.0.0.255')\n</code></pre> <pre>\n<code>+--------------+\n| ip_networks  |\n+--------------+\n| [1.0.0.0/24] |\n+--------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ip_range2ip_networks('192.0.2.1', '192.0.2.15')\n</code></pre> <pre><code>select bigfunctions.us.ip_range2ip_networks('192.0.2.1', '192.0.2.15')\n</code></pre> <pre><code>select bigfunctions.europe_west1.ip_range2ip_networks('192.0.2.1', '192.0.2.15')\n</code></pre> <pre>\n<code>+----------------------------------------------------------+\n| ip_networks                                              |\n+----------------------------------------------------------+\n| [192.0.2.1/32, 192.0.2.2/31, 192.0.2.4/30, 192.0.2.8/29] |\n+----------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/is_email_valid/","title":"is_email_valid - BigQuery","text":"<p> bigfunctions  &gt; is_email_valid </p>"},{"location":"bigfunctions/is_email_valid/#is_email_valid","title":"is_email_valid","text":"<p>Signature <pre><code>is_email_valid(email)\n</code></pre></p> <p>Description</p> <p>Return true if <code>email</code> is valid (inspired from this reddit answer)</p> <p>Examples</p> <p>1. with a valid email</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_email_valid('paul.marcombes@unytics.io')\n</code></pre> <pre><code>select bigfunctions.us.is_email_valid('paul.marcombes@unytics.io')\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_email_valid('paul.marcombes@unytics.io')\n</code></pre> <pre>\n<code>+----------------+\n| is_email_valid |\n+----------------+\n| true           |\n+----------------+\n</code>\n</pre> <p>2. with incorrect format</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_email_valid('paul/marcombes@example.com')\n</code></pre> <pre><code>select bigfunctions.us.is_email_valid('paul/marcombes@example.com')\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_email_valid('paul/marcombes@example.com')\n</code></pre> <pre>\n<code>+----------------+\n| is_email_valid |\n+----------------+\n| false          |\n+----------------+\n</code>\n</pre> <p>3. with a domain not registrable</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_email_valid('paul.marcombes@example.con')\n</code></pre> <pre><code>select bigfunctions.us.is_email_valid('paul.marcombes@example.con')\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_email_valid('paul.marcombes@example.con')\n</code></pre> <pre>\n<code>+----------------+\n| is_email_valid |\n+----------------+\n| false          |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/is_phone_number_valid/","title":"is_phone_number_valid - BigQuery","text":"<p> bigfunctions  &gt; is_phone_number_valid </p>"},{"location":"bigfunctions/is_phone_number_valid/#is_phone_number_valid","title":"is_phone_number_valid","text":"<p>Signature <pre><code>is_phone_number_valid(phone_number, options)\n</code></pre></p> <p>Description</p> <p>Return if <code>phone_number</code> is valid using libphonenumber-js library.</p> <p>Argument <code>options</code> can be <code>null</code> or must be a json with the following keys: <code>defaultCountry</code>, <code>defaultCallingCode</code> and <code>extract</code> as described in the library documentation.</p> <p>Examples</p> <p>1. Check an international <code>phone_number</code> (starting with <code>+</code>)</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_phone_number_valid('+33123456789', null)\n</code></pre> <pre><code>select bigfunctions.us.is_phone_number_valid('+33123456789', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_phone_number_valid('+33123456789', null)\n</code></pre> <pre>\n<code>+----------+\n| is_valid |\n+----------+\n| true     |\n+----------+\n</code>\n</pre> <p>2. Check a national <code>phone_number</code></p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_phone_number_valid('0123456789', json '{\"defaultCountry\": \"FR\"}')\n</code></pre> <pre><code>select bigfunctions.us.is_phone_number_valid('0123456789', json '{\"defaultCountry\": \"FR\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_phone_number_valid('0123456789', json '{\"defaultCountry\": \"FR\"}')\n</code></pre> <pre>\n<code>+----------+\n| is_valid |\n+----------+\n| true     |\n+----------+\n</code>\n</pre> <p>3. If no phone number is found in <code>phone_number</code>, it returns false</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_phone_number_valid('Hello!', null)\n</code></pre> <pre><code>select bigfunctions.us.is_phone_number_valid('Hello!', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_phone_number_valid('Hello!', null)\n</code></pre> <pre>\n<code>+----------+\n| is_valid |\n+----------+\n| false    |\n+----------+\n</code>\n</pre> <p>4. By default, if the given <code>phone_number</code> text contains a valid phone number among other text, it returns true.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_phone_number_valid('Hello +33123456789 !', null)\n</code></pre> <pre><code>select bigfunctions.us.is_phone_number_valid('Hello +33123456789 !', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_phone_number_valid('Hello +33123456789 !', null)\n</code></pre> <pre>\n<code>+----------+\n| is_valid |\n+----------+\n| true     |\n+----------+\n</code>\n</pre> <p>5. To consider that <code>phone_number</code> cannot have additional text use <code>extract:  false</code> as option</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_phone_number_valid('Hello +33123456789 !', json '{\"extract\": false}')\n</code></pre> <pre><code>select bigfunctions.us.is_phone_number_valid('Hello +33123456789 !', json '{\"extract\": false}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_phone_number_valid('Hello +33123456789 !', json '{\"extract\": false}')\n</code></pre> <pre>\n<code>+----------+\n| is_valid |\n+----------+\n| false    |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/is_public_holiday/","title":"is_public_holiday - BigQuery","text":"<p> bigfunctions  &gt; is_public_holiday </p>"},{"location":"bigfunctions/is_public_holiday/#is_public_holiday","title":"is_public_holiday","text":"<p>Signature <pre><code>is_public_holiday(date, country_code)\n</code></pre></p> <p>Description</p> <p>Return true if <code>date</code> corresponds to a public holiday in <code>country_code</code></p> <ul> <li>Always return <code>false</code> if date is not between year 1974 and year 2076.</li> <li><code>country_code</code> must be among <code>[AO, AR, AW, AU, AT, AZ, BD, BY, BE, BO, BW, BR, BG, BI, CA, CL, CN, CO, HR, CU, CW, CY, CZ, DK, DJ, DO, EG, EE, ET, FI, FR, GE, DE, GR, HN, HK, HU, IS, IN, IE, IL, IT, JM, JP, KZ, KE, KR, LV, LS, LT, LU, MG, MW, MY, MT, MX, MD, MA, MZ, NA, NL, NZ, NI, NG, MK, NO, PY, PE, PL, PT, RO, RU, SA, RS, SG, SK, SI, ZA, ES, SZ, SE, CH, TW, TN, TR, UA, AE, GB, US, UY, UZ, VE, VN, ZM, ZW]</code></li> <li>Holiday dates come from <code>python-holidays</code>.</li> </ul> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.is_public_holiday(date('2022-07-14'), 'FR')\n</code></pre> <pre><code>select bigfunctions.us.is_public_holiday(date('2022-07-14'), 'FR')\n</code></pre> <pre><code>select bigfunctions.europe_west1.is_public_holiday(date('2022-07-14'), 'FR')\n</code></pre> <pre>\n<code>+-------------------+\n| is_public_holiday |\n+-------------------+\n| true              |\n+-------------------+\n</code>\n</pre>"},{"location":"bigfunctions/items2json/","title":"items2json - BigQuery","text":"<p> bigfunctions  &gt; items2json </p>"},{"location":"bigfunctions/items2json/#items2json","title":"items2json","text":"<p>Signature <pre><code>items2json(key_value_items)\n</code></pre></p> <p>Description</p> <p>Returns <code>json</code> object from array of <code>key_value_items</code> which is a <code>array&lt;struct&lt;key string, value string&gt;&gt;</code>.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.items2json([('a', 'foo'), ('b': 'bar')])\n</code></pre> <pre><code>select bigfunctions.us.items2json([('a', 'foo'), ('b': 'bar')])\n</code></pre> <pre><code>select bigfunctions.europe_west1.items2json([('a', 'foo'), ('b': 'bar')])\n</code></pre> <pre>\n<code>+--------------------------+\n| json                     |\n+--------------------------+\n| {\"a\": \"foo\", \"b\": \"bar\"} |\n+--------------------------+\n</code>\n</pre> <p>2. \u26a0\ufe0f Whatever the names of the struct fields: the first field is always considered as the key and the second as the value.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.items2json([struct('a' as value, 'foo' as key), struct('b' as one, 'bar' as two)])\n</code></pre> <pre><code>select bigfunctions.us.items2json([struct('a' as value, 'foo' as key), struct('b' as one, 'bar' as two)])\n</code></pre> <pre><code>select bigfunctions.europe_west1.items2json([struct('a' as value, 'foo' as key), struct('b' as one, 'bar' as two)])\n</code></pre> <pre>\n<code>+--------------------------+\n| json                     |\n+--------------------------+\n| {\"a\": \"foo\", \"b\": \"bar\"} |\n+--------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json2excel/","title":"json2excel - BigQuery","text":"<p> bigfunctions  &gt; json2excel </p>"},{"location":"bigfunctions/json2excel/#json2excel","title":"json2excel","text":"<p>Signature <pre><code>json2excel(data)\n</code></pre></p> <p>Description</p> <p>Dump data to excel file encoded as a base64 string.</p> <p>This function is useful to combine with <code>send_mail</code> if you want to send an excel file to some people.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json2excel(json '[{\"col1\": \"row1\", \"col2\": 1}, {\"col1\": \"row2\", \"col2\": 2}]')\n</code></pre> <pre><code>select bigfunctions.us.json2excel(json '[{\"col1\": \"row1\", \"col2\": 1}, {\"col1\": \"row2\", \"col2\": 2}]')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json2excel(json '[{\"col1\": \"row1\", \"col2\": 1}, {\"col1\": \"row2\", \"col2\": 2}]')\n</code></pre> <pre>\n<code>+------------------+\n| excel_base64     |\n+------------------+\n| UEsDBBQAAAAAA... |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json2xml/","title":"json2xml - BigQuery","text":"<p> bigfunctions  &gt; json2xml </p>"},{"location":"bigfunctions/json2xml/#json2xml","title":"json2xml","text":"<p>Signature <pre><code>json2xml(json)\n</code></pre></p> <p>Description</p> <p>Returns XML for given JSON string</p> <p>Examples</p> <p>1. With valid JSON</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json2xml('{\"a\": {\"b\": \"foo\"}}')\n</code></pre> <pre><code>select bigfunctions.us.json2xml('{\"a\": {\"b\": \"foo\"}}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json2xml('{\"a\": {\"b\": \"foo\"}}')\n</code></pre> <pre>\n<code>+-------------------+\n| xml               |\n+-------------------+\n| &lt;a&gt;&lt;b&gt;foo&lt;/b&gt;&lt;/a&gt; |\n+-------------------+\n</code>\n</pre> <p>2. With valid JSON and with one key that has empty string as a value</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json2xml('{\"a\": \"\"}')\n</code></pre> <pre><code>select bigfunctions.us.json2xml('{\"a\": \"\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json2xml('{\"a\": \"\"}')\n</code></pre> <pre>\n<code>+---------+\n| xml     |\n+---------+\n| &lt;a&gt;&lt;/a&gt; |\n+---------+\n</code>\n</pre> <p>3. With invalid JSON</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json2xml('{\"a\": \"\"')\n</code></pre> <pre><code>select bigfunctions.us.json2xml('{\"a\": \"\"')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json2xml('{\"a\": \"\"')\n</code></pre> <pre>\n<code>+------+\n| xml  |\n+------+\n| null |\n+------+\n</code>\n</pre>"},{"location":"bigfunctions/json_column_schema/","title":"json_column_schema - BigQuery","text":"<p> bigfunctions  &gt; json_column_schema </p>"},{"location":"bigfunctions/json_column_schema/#json_column_schema","title":"json_column_schema","text":"<p>Signature <pre><code>json_column_schema(data)\n</code></pre></p> <p>Description</p> <p>Returns the schema of a json column .</p> <ul> <li>The schema of the json column is the union of schemas of the json objects of each cell.</li> <li><code>schema</code> is a json object like <code>{path: type}</code> with</li> <li><code>path</code> the path of the nested field</li> <li><code>type</code> among (<code>string</code>, <code>numeric</code>, <code>bool</code>, <code>date</code>, <code>timestamp</code>, <code>array</code>)</li> </ul> <p>Examples</p> EUUSeurope-west1 <pre><code>with sample_data as (\n\n  select json '{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\"}}' as data\n  union all\n  select json '{\"user\": {\"friends\": [\"Jack\", \"Peter\"]}}' as data\n\n)\n\n\nselect bigfunctions.eu.json_column_schema(data)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select json '{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\"}}' as data\n  union all\n  select json '{\"user\": {\"friends\": [\"Jack\", \"Peter\"]}}' as data\n\n)\n\n\nselect bigfunctions.us.json_column_schema(data)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select json '{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\"}}' as data\n  union all\n  select json '{\"user\": {\"friends\": [\"Jack\", \"Peter\"]}}' as data\n\n)\n\n\nselect bigfunctions.europe_west1.json_column_schema(data)\nfrom sample_data\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------+\n| schema                                                                 |\n+------------------------------------------------------------------------+\n| {\"created_at\": \"date\", \"user.name\": \"string\", \"user.friends\": \"array\"} |\n+------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_items/","title":"json_items - BigQuery","text":"<p> bigfunctions  &gt; json_items </p>"},{"location":"bigfunctions/json_items/#json_items","title":"json_items","text":"<p>Signature <pre><code>json_items(json_string)\n</code></pre></p> <p>Description</p> <p>Extract <code>key_value_items</code> from <code>json_string</code> which has only flat (no nested) key-values. Return <code>key_value_items</code> as <code>array&lt; struct&lt;key string, value string&gt; &gt;</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_items('{\"created_at\": \"2022-01-01\", \"user\": \"sidali\"}')\n</code></pre> <pre><code>select bigfunctions.us.json_items('{\"created_at\": \"2022-01-01\", \"user\": \"sidali\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_items('{\"created_at\": \"2022-01-01\", \"user\": \"sidali\"}')\n</code></pre> <pre>\n<code>+-----------------------------------------------------------------------------------------------------+\n| key_value_items                                                                                     |\n+-----------------------------------------------------------------------------------------------------+\n| [\n|   struct(\"created_at\" as key, \"date\" as value),\n|   struct(\"user\" as key, \"name\" as value)\n| ]\n |\n+-----------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_keys/","title":"json_keys - BigQuery","text":"<p> bigfunctions  &gt; json_keys </p>"},{"location":"bigfunctions/json_keys/#json_keys","title":"json_keys","text":"<p>Signature <pre><code>json_keys(json_string)\n</code></pre></p> <p>Description</p> <p>Extract <code>keys</code> from <code>json_string</code> which has only flat (no nested) key-values. Return <code>keys</code> as an <code>array&lt;string&gt;</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_keys('{\"created_at\": \"2022-01-01\", \"user\": \"sidali\"}')\n</code></pre> <pre><code>select bigfunctions.us.json_keys('{\"created_at\": \"2022-01-01\", \"user\": \"sidali\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_keys('{\"created_at\": \"2022-01-01\", \"user\": \"sidali\"}')\n</code></pre> <pre>\n<code>+------------------------+\n| keys                   |\n+------------------------+\n| ['created_at', 'user'] |\n+------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_merge/","title":"json_merge - BigQuery","text":"<p> bigfunctions  &gt; json_merge </p>"},{"location":"bigfunctions/json_merge/#json_merge","title":"json_merge","text":"<p>Signature <pre><code>json_merge(json_string1, json_string2)\n</code></pre></p> <p>Description</p> <p>Merge <code>json_string1</code> and <code>json_string2</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_merge('{\"k1\": \"v1\"}', '{\"k2\": \"v2\"}')\n</code></pre> <pre><code>select bigfunctions.us.json_merge('{\"k1\": \"v1\"}', '{\"k2\": \"v2\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_merge('{\"k1\": \"v1\"}', '{\"k2\": \"v2\"}')\n</code></pre> <pre>\n<code>+----------------------------+\n| merged_json                |\n+----------------------------+\n| '{\"k1\": \"v1\", \"k2\": \"v2\"}' |\n+----------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_query/","title":"json_query - BigQuery","text":"<p> bigfunctions  &gt; json_query </p>"},{"location":"bigfunctions/json_query/#json_query","title":"json_query","text":"<p>Signature <pre><code>json_query(json_string, query)\n</code></pre></p> <p>Description</p> <p>Extract data from <code>json_string</code> using advanced json querying offered by JMESPath.</p> <p>JMESPath Links:</p> <ul> <li>See JMESPath Tutorial for exhaustive <code>query</code> possibilities</li> <li>GitHub of jmespath.js</li> </ul> <p>Examples</p> <p>1. Basic Query</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_query('{\"foo\": [{\"first\": \"a\"}, {\"first\": \"c\"}]}', 'foo')\n</code></pre> <pre><code>select bigfunctions.us.json_query('{\"foo\": [{\"first\": \"a\"}, {\"first\": \"c\"}]}', 'foo')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_query('{\"foo\": [{\"first\": \"a\"}, {\"first\": \"c\"}]}', 'foo')\n</code></pre> <pre>\n<code>+----------------------------------+\n| result                           |\n+----------------------------------+\n| [{\"first\": \"a\"}, {\"first\": \"c\"}] |\n+----------------------------------+\n</code>\n</pre> <p>2. Getting array sub-items</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_query('{\"foo\": [{\"first\": \"a\"}, {\"first\": \"c\"}]}', 'foo[*].first')\n</code></pre> <pre><code>select bigfunctions.us.json_query('{\"foo\": [{\"first\": \"a\"}, {\"first\": \"c\"}]}', 'foo[*].first')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_query('{\"foo\": [{\"first\": \"a\"}, {\"first\": \"c\"}]}', 'foo[*].first')\n</code></pre> <pre>\n<code>+------------+\n| result     |\n+------------+\n| ['a', 'c'] |\n+------------+\n</code>\n</pre> <p>3. Slicing</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_query('{\"foo\": [{\"first\": \"a\"}, {\"first\": \"c\"}]}', 'foo[:1].first')\n</code></pre> <pre><code>select bigfunctions.us.json_query('{\"foo\": [{\"first\": \"a\"}, {\"first\": \"c\"}]}', 'foo[:1].first')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_query('{\"foo\": [{\"first\": \"a\"}, {\"first\": \"c\"}]}', 'foo[:1].first')\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| ['a']  |\n+--------+\n</code>\n</pre> <p>4. Projecting</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_query('{\"foo\": [{\"first\": \"a\"}, {\"first\": \"c\"}]}', 'foo[*].{name: first}')\n</code></pre> <pre><code>select bigfunctions.us.json_query('{\"foo\": [{\"first\": \"a\"}, {\"first\": \"c\"}]}', 'foo[*].{name: first}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_query('{\"foo\": [{\"first\": \"a\"}, {\"first\": \"c\"}]}', 'foo[*].{name: first}')\n</code></pre> <pre>\n<code>+--------------------------------+\n| result                         |\n+--------------------------------+\n| [{\"name\": \"a\"}, {\"name\": \"c\"}] |\n+--------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_schema/","title":"json_schema - BigQuery","text":"<p> bigfunctions  &gt; json_schema </p>"},{"location":"bigfunctions/json_schema/#json_schema","title":"json_schema","text":"<p>Signature <pre><code>json_schema(data)\n</code></pre></p> <p>Description</p> <p>Returns the schema of <code>data</code> (with <code>data</code> a json object) as <code>[{path, type}]</code> with <code>path</code> the path of the nested field and <code>type</code> among (<code>string</code>, <code>numeric</code>, <code>bool</code>, <code>date</code>, <code>timestamp</code>)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_schema('{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\", \"friends\": [\"Jack\", \"Peter\"]}}')\n</code></pre> <pre><code>select bigfunctions.us.json_schema('{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\", \"friends\": [\"Jack\", \"Peter\"]}}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_schema('{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\", \"friends\": [\"Jack\", \"Peter\"]}}')\n</code></pre> <pre>\n<code>+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| schema                                                                                                                                                          |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| [\n|   struct(\"created_at\" as path, \"date\" as type),\n|   struct(\"user.name\" as path, \"string\" as type),\n|   struct(\"user.friends\" as path, \"array\" as type)\n| ]\n |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/json_values/","title":"json_values - BigQuery","text":"<p> bigfunctions  &gt; json_values </p>"},{"location":"bigfunctions/json_values/#json_values","title":"json_values","text":"<p>Signature <pre><code>json_values(json_string)\n</code></pre></p> <p>Description</p> <p>Extract <code>values</code> from <code>json_string</code> which has only flat (no nested) key-values. Return <code>values</code> as an <code>array&lt;string&gt;</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.json_values('{\"created_at\": \"2022-01-01\", \"user\": \"sidali\"}')\n</code></pre> <pre><code>select bigfunctions.us.json_values('{\"created_at\": \"2022-01-01\", \"user\": \"sidali\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.json_values('{\"created_at\": \"2022-01-01\", \"user\": \"sidali\"}')\n</code></pre> <pre>\n<code>+--------------------------+\n| values                   |\n+--------------------------+\n| ['2022-01-01', 'sidali'] |\n+--------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/last_value/","title":"last_value - BigQuery","text":"<p> bigfunctions  &gt; last_value </p>"},{"location":"bigfunctions/last_value/#last_value","title":"last_value","text":"<p>Signature <pre><code>last_value(arr)\n</code></pre></p> <p>Description</p> <p>Return last value of array (inspired from sql-snippets repo)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.last_value([1, 2, 3])\n</code></pre> <pre><code>select bigfunctions.us.last_value([1, 2, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.last_value([1, 2, 3])\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 3     |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/levenshtein/","title":"levenshtein - BigQuery","text":"<p> bigfunctions  &gt; levenshtein </p>"},{"location":"bigfunctions/levenshtein/#levenshtein","title":"levenshtein","text":"<p>Signature <pre><code>levenshtein(string1, string2)\n</code></pre></p> <p>Description</p> <p>Compute levenshtein distance between <code>string1</code> and <code>string2</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.levenshtein('bak', 'book')\n</code></pre> <pre><code>select bigfunctions.us.levenshtein('bak', 'book')\n</code></pre> <pre><code>select bigfunctions.europe_west1.levenshtein('bak', 'book')\n</code></pre> <pre>\n<code>+----------+\n| distance |\n+----------+\n| 2        |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/list_bigquery_resources_in_current_project/","title":"list_bigquery_resources_in_current_project - BigQuery","text":"<p> bigfunctions  &gt; list_bigquery_resources_in_current_project </p>"},{"location":"bigfunctions/list_bigquery_resources_in_current_project/#list_bigquery_resources_in_current_project","title":"list_bigquery_resources_in_current_project","text":"<p>Signature <pre><code>list_bigquery_resources_in_current_project()\n</code></pre></p> <p>Description</p> <p>List BigQuery resources in current Google Cloud <code>project</code> enriched with their BigQuery usage in current <code>project</code>.</p> <p>BigQuery resources include tables, views, columns, datasets, users.</p> <p>For each data asset, a <code>popularity</code> score is computed. For example, for a table, it is equal to the number of distinct users which read the table in the latest 30 days using <code>execution_projects</code>.</p> <p>The result is written into <code>bigfunction_result</code> temporary table which has the following columns:</p> <ul> <li><code>id</code>: unique identifier of the data asset</li> <li><code>type</code>: asset type such as tables, views, datasets, users, etc.</li> <li><code>name</code>: asset name</li> <li><code>description</code>: asset description</li> <li><code>popularity</code>: popularity as float64 (the higher the more popular)</li> <li><code>details</code>: a json blob with asset additional details such as the tables of a dataset or the users of a table.</li> </ul> <p>Examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.list_bigquery_resources_in_current_project('you-bigquery-project');\n</code></pre> <pre><code>call bigfunctions.us.list_bigquery_resources_in_current_project('you-bigquery-project');\n</code></pre> <pre><code>call bigfunctions.europe_west1.list_bigquery_resources_in_current_project('you-bigquery-project');\n</code></pre>"},{"location":"bigfunctions/list_dataset_tables/","title":"list_dataset_tables - BigQuery","text":"<p> bigfunctions  &gt; list_dataset_tables </p>"},{"location":"bigfunctions/list_dataset_tables/#list_dataset_tables","title":"list_dataset_tables","text":"<p>Signature <pre><code>list_dataset_tables(fully_qualified_dataset)\n</code></pre></p> <p>Description</p> <p>List tables of <code>fully_qualified_dataset</code></p> <p>Examples</p> <p>1. List tables of <code>your-project.your_dataset</code></p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.list_dataset_tables(\"your-project.your_dataset\");\n</code></pre> <pre><code>call bigfunctions.us.list_dataset_tables(\"your-project.your_dataset\");\n</code></pre> <pre><code>call bigfunctions.europe_west1.list_dataset_tables(\"your-project.your_dataset\");\n</code></pre> <p>2. You can list tables of several datasets by providing several datasets separated by commas</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.list_dataset_tables(\"your-project.your_dataset1, your-project.your_dataset2\");\n</code></pre> <pre><code>call bigfunctions.us.list_dataset_tables(\"your-project.your_dataset1, your-project.your_dataset2\");\n</code></pre> <pre><code>call bigfunctions.europe_west1.list_dataset_tables(\"your-project.your_dataset1, your-project.your_dataset2\");\n</code></pre>"},{"location":"bigfunctions/list_public_datasets/","title":"list_public_datasets - BigQuery","text":"<p> bigfunctions  &gt; list_public_datasets </p>"},{"location":"bigfunctions/list_public_datasets/#list_public_datasets","title":"list_public_datasets","text":"<p>Signature <pre><code>list_public_datasets()\n</code></pre></p> <p>Description</p> <p>Returns list of BigQuery <code>public_datasets</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.list_public_datasets()\n</code></pre> <pre><code>select bigfunctions.us.list_public_datasets()\n</code></pre> <pre><code>select bigfunctions.europe_west1.list_public_datasets()\n</code></pre> <pre>\n<code>+---------------------------------------------------------------------------------------------------+\n| public_datasets                                                                                   |\n+---------------------------------------------------------------------------------------------------+\n| [\n  \"bigquery-public-data.america_health_rankings\",\n  \"bigquery-public-data.austin_311\",\n  ...\n]\n |\n+---------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/list_scheduled_queries/","title":"list_scheduled_queries - BigQuery","text":"<p> bigfunctions  &gt; list_scheduled_queries </p>"},{"location":"bigfunctions/list_scheduled_queries/#list_scheduled_queries","title":"list_scheduled_queries","text":"<p>Signature <pre><code>list_scheduled_queries(project)\n</code></pre></p> <p>Description</p> <p>Returns<code>scheduled_queries</code> of project <code>project</code>.</p> <p>Result is a list of TransferConfig.</p> <p>Examples</p> <p>If <code>project</code> is null, then the current project is used</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.list_scheduled_queries(None)\n</code></pre> <pre><code>select bigfunctions.us.list_scheduled_queries(None)\n</code></pre> <pre><code>select bigfunctions.europe_west1.list_scheduled_queries(None)\n</code></pre> <pre>\n<code>+---------------------------------------------------------------------------------------------------+\n| scheduled_queries                                                                                 |\n+---------------------------------------------------------------------------------------------------+\n| [\n  \"bigquery-public-data.america_health_rankings\",\n  \"bigquery-public-data.austin_311\",\n  ...\n]\n |\n+---------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/markdown2html/","title":"markdown2html - BigQuery","text":"<p> bigfunctions  &gt; markdown2html </p>"},{"location":"bigfunctions/markdown2html/#markdown2html","title":"markdown2html","text":"<p>Signature <pre><code>markdown2html(markdown)\n</code></pre></p> <p>Description</p> <p>Convert <code>markdown</code> to <code>html</code></p> See the result as a data visualization in BigQuery Console! <p>The result of this function can be vizualized as an html report directly in BigQuery Console!</p> <ol> <li>Install this bookmarklet: bigfunctions (it has to be done only once)</li> <li>Open BigQuery console</li> <li>Click on the installed bookmarklet.<ul> <li>From now on, the bookmarklet code will observe the BigQuery console page.</li> <li>If a BigQuery result appears with a unique cell containing html content, it will be rendered.</li> </ul> </li> <li>You will have to click on the bookmarklet again:<ul> <li>If you refresh the Bigquery console page,</li> <li>If you open the BigQuery console in a new tab of your browser.</li> </ul> </li> <li>Run the query of the example and open the result of the latest subquery. The result will be shown as a nice html content.</li> </ol> <p></p> <p></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.markdown2html('# Title')\n</code></pre> <pre><code>select bigfunctions.us.markdown2html('# Title')\n</code></pre> <pre><code>select bigfunctions.europe_west1.markdown2html('# Title')\n</code></pre> <pre>\n<code>+----------------+\n| html           |\n+----------------+\n| &lt;h1&gt;Title&lt;/h1&gt; |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/max_value/","title":"max_value - BigQuery","text":"<p> bigfunctions  &gt; max_value </p>"},{"location":"bigfunctions/max_value/#max_value","title":"max_value","text":"<p>Signature <pre><code>max_value(arr)\n</code></pre></p> <p>Description</p> <p>Return max value of array (inspired from sql-snippets repo)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.max_value([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.max_value([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.max_value([1, 4, 3])\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 4     |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/median_value/","title":"median_value - BigQuery","text":"<p> bigfunctions  &gt; median_value </p>"},{"location":"bigfunctions/median_value/#median_value","title":"median_value","text":"<p>Signature <pre><code>median_value(arr)\n</code></pre></p> <p>Description</p> <p>Return median value of array (inspired from sql-snippets repo)</p> <p>Examples</p> <p>1. When array length is odd</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.median_value([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.median_value([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.median_value([1, 4, 3])\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 3     |\n+-------+\n</code>\n</pre> <p>2. When array length is even</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.median_value([1, 4, 3, 2])\n</code></pre> <pre><code>select bigfunctions.us.median_value([1, 4, 3, 2])\n</code></pre> <pre><code>select bigfunctions.europe_west1.median_value([1, 4, 3, 2])\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 2.5   |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/min_max_scaler/","title":"min_max_scaler - BigQuery","text":"<p> bigfunctions  &gt; min_max_scaler </p>"},{"location":"bigfunctions/min_max_scaler/#min_max_scaler","title":"min_max_scaler","text":"<p>Signature <pre><code>min_max_scaler(arr)\n</code></pre></p> <p>Description</p> <p>Performs min-max scaling on an array. It takes an array of numbers as input and returns an array of values scaled between 0 and 1.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.min_max_scaler([1, 2, 3, 4, 5])\n</code></pre> <pre><code>select bigfunctions.us.min_max_scaler([1, 2, 3, 4, 5])\n</code></pre> <pre><code>select bigfunctions.europe_west1.min_max_scaler([1, 2, 3, 4, 5])\n</code></pre> <pre>\n<code>+-------------------------+\n| scaled_array            |\n+-------------------------+\n| [0, 0.25, 0.5, 0.75, 1] |\n+-------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/min_value/","title":"min_value - BigQuery","text":"<p> bigfunctions  &gt; min_value </p>"},{"location":"bigfunctions/min_value/#min_value","title":"min_value","text":"<p>Signature <pre><code>min_value(arr)\n</code></pre></p> <p>Description</p> <p>Return min value of array (inspired from sql-snippets repo)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.min_value([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.min_value([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.min_value([1, 4, 3])\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 1     |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/ngram_frequency_similarity/","title":"ngram_frequency_similarity - BigQuery","text":"<p> bigfunctions  &gt; ngram_frequency_similarity </p>"},{"location":"bigfunctions/ngram_frequency_similarity/#ngram_frequency_similarity","title":"ngram_frequency_similarity","text":"<p>Signature <pre><code>ngram_frequency_similarity(string1, string2, n)\n</code></pre></p> <p>Description</p> <p>Calculates n-gram similarity between two strings</p> <p>The n-gram comparison algorithm is a method used to measure the similarity between two strings by analyzing their subsequence of n consecutive characters, called n-grams. The process of the n-gram comparison algorithm involves the following steps:</p> <ol> <li>N-gram Extraction: Divide each input string into overlapping sequences of n characters.</li> <li>Counting N-grams: Count the occurrences of each unique n-gram in both strings.</li> <li>Calculating Similarity: Compare the n-gram counts between the two strings and compute a similarity score. The similarity score is here calculated with cosine similarity.</li> </ol> <p>The above description is taken from Yassine EL KHAL article</p> <p>Example of n-gram: the sentence <code>Lorem ipsum dolor sit amet</code> gives the following 4-grams <code>['LORE', 'OREM', 'REM ', 'EM I', 'M IP', ' IPS', 'IPSU', ...]</code></p> <p>Returned similarity score is between 0 and 1, 1 meaning that the strings are the most similar.</p> <p>Examples</p> <p>1. Calculate n-gram frequency similarity between two simple strings with n=2</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ngram_frequency_similarity('hello world', 'world hello', 2)\n</code></pre> <pre><code>select bigfunctions.us.ngram_frequency_similarity('hello world', 'world hello', 2)\n</code></pre> <pre><code>select bigfunctions.europe_west1.ngram_frequency_similarity('hello world', 'world hello', 2)\n</code></pre> <pre>\n<code>+------------+\n| similarity |\n+------------+\n| 0.8        |\n+------------+\n</code>\n</pre> <p>2. Calculate n-gram frequency similarity between two phrases with n=3</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ngram_frequency_similarity('The quick brown fox', 'The quick brown dog', 3)\n</code></pre> <pre><code>select bigfunctions.us.ngram_frequency_similarity('The quick brown fox', 'The quick brown dog', 3)\n</code></pre> <pre><code>select bigfunctions.europe_west1.ngram_frequency_similarity('The quick brown fox', 'The quick brown dog', 3)\n</code></pre> <pre>\n<code>+------------+\n| similarity |\n+------------+\n| 0.82       |\n+------------+\n</code>\n</pre> <p>3. Calculate n-gram frequency similarity between two sentences with n=4</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.ngram_frequency_similarity('Lorem ipsum dolor sit amet, consectetur adipiscing elit.', 'Lorem ipsum dolor sit amet, consectetur adipiscing.', 4)\n</code></pre> <pre><code>select bigfunctions.us.ngram_frequency_similarity('Lorem ipsum dolor sit amet, consectetur adipiscing elit.', 'Lorem ipsum dolor sit amet, consectetur adipiscing.', 4)\n</code></pre> <pre><code>select bigfunctions.europe_west1.ngram_frequency_similarity('Lorem ipsum dolor sit amet, consectetur adipiscing elit.', 'Lorem ipsum dolor sit amet, consectetur adipiscing.', 4)\n</code></pre> <pre>\n<code>+------------+\n| similarity |\n+------------+\n| 0.93       |\n+------------+\n</code>\n</pre>"},{"location":"bigfunctions/parse_date/","title":"parse_date - BigQuery","text":"<p> bigfunctions  &gt; parse_date </p>"},{"location":"bigfunctions/parse_date/#parse_date","title":"parse_date","text":"<p>Signature <pre><code>parse_date(date_string)\n</code></pre></p> <p>Description</p> <p>Parse date with automatic format detection (inspired from Sebabrata BigQuery tutorial)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date('2021-01-20 ')\n</code></pre> <pre><code>select bigfunctions.us.parse_date('2021-01-20 ')\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date('2021-01-20 ')\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date('2021-1-20 ')\n</code></pre> <pre><code>select bigfunctions.us.parse_date('2021-1-20 ')\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date('2021-1-20 ')\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date('2021/01/20 ')\n</code></pre> <pre><code>select bigfunctions.us.parse_date('2021/01/20 ')\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date('2021/01/20 ')\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date('2021/1/20 ')\n</code></pre> <pre><code>select bigfunctions.us.parse_date('2021/1/20 ')\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date('2021/1/20 ')\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date('01/20/21')\n</code></pre> <pre><code>select bigfunctions.us.parse_date('01/20/21')\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date('01/20/21')\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date('1/20/21')\n</code></pre> <pre><code>select bigfunctions.us.parse_date('1/20/21')\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date('1/20/21')\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_date('Wed Jan 20 21:47:00 2021')\n</code></pre> <pre><code>select bigfunctions.us.parse_date('Wed Jan 20 21:47:00 2021')\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_date('Wed Jan 20 21:47:00 2021')\n</code></pre> <pre>\n<code>+--------------------+\n| cleaned_date       |\n+--------------------+\n| date('2021-01-20') |\n+--------------------+\n</code>\n</pre>"},{"location":"bigfunctions/parse_url/","title":"parse_url - BigQuery","text":"<p> bigfunctions  &gt; parse_url </p>"},{"location":"bigfunctions/parse_url/#parse_url","title":"parse_url","text":"<p>Signature <pre><code>parse_url(url)\n</code></pre></p> <p>Description</p> <p>Return <code>url</code> parts (inspired from sql-snippets repo)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_url('https://www.yoursite.com/pricing/details?myparam1=123&amp;myparam2=abc#newsfeed')\n</code></pre> <pre><code>select bigfunctions.us.parse_url('https://www.yoursite.com/pricing/details?myparam1=123&amp;myparam2=abc#newsfeed')\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_url('https://www.yoursite.com/pricing/details?myparam1=123&amp;myparam2=abc#newsfeed')\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------------------------------------------------------------------------------------+\n| url_parts                                                                                                                                            |\n+------------------------------------------------------------------------------------------------------------------------------------------------------+\n| struct&lt;'www.yoursite.com' as host, 'pricing/details' as path, 'myparam1=123&amp;myparam2=abc#newsfeed' as query, 'newsfeed' as ref, 'https' as protocol&gt; |\n+------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/parse_user_agent/","title":"parse_user_agent - BigQuery","text":"<p> bigfunctions  &gt; parse_user_agent </p>"},{"location":"bigfunctions/parse_user_agent/#parse_user_agent","title":"parse_user_agent","text":"<p>Signature <pre><code>parse_user_agent(user_agent_string)\n</code></pre></p> <p>Description</p> <p>Parses User Agent strings into several components</p> <p>Examples</p> <p>Mobile User Agent</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.parse_user_agent('Mozilla/5.0 (Linux; Android 12; SM-S906N Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.119 Mobile Safari/537.36')\n</code></pre> <pre><code>select bigfunctions.us.parse_user_agent('Mozilla/5.0 (Linux; Android 12; SM-S906N Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.119 Mobile Safari/537.36')\n</code></pre> <pre><code>select bigfunctions.europe_west1.parse_user_agent('Mozilla/5.0 (Linux; Android 12; SM-S906N Build/QP1A.190711.020; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/80.0.3987.119 Mobile Safari/537.36')\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| parsed_user_agent                                                                                                                                                                                                                                                                                           |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| STRUCT&lt;STRUCT&lt;'Chrome WebView' as name, '80.0.3987.119' as version, '80' as major&gt; as browser, STRUCT&lt;'Blink' as name, '80.0.3987.119' as version&gt; as engine, STRUCT&lt;'Android' as name, '12' as version&gt; as os, STRUCT&lt;'Samsung' as vendor, 'SM-S906N' as model, 'mobile' as type&gt; as device, null as arch&gt; |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/percentile_value/","title":"percentile_value - BigQuery","text":"<p> bigfunctions  &gt; percentile_value </p>"},{"location":"bigfunctions/percentile_value/#percentile_value","title":"percentile_value","text":"<p>Signature <pre><code>percentile_value(arr, percentile)\n</code></pre></p> <p>Description</p> <p>Returns percentile of an array with percentile a float in range [0, 1].</p> <p>Algorithm to calculate percentile is based on R. J. Hyndman and Y. Fan, \"Sample quantiles in statistical packages,\" The American Statistician, 50(4), pp. 361-365, 1996</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3], 0.74)\n</code></pre> <pre><code>select bigfunctions.us.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3], 0.74)\n</code></pre> <pre><code>select bigfunctions.europe_west1.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3], 0.74)\n</code></pre> <pre>\n<code>+------------------+\n| percentile_value |\n+------------------+\n| 13.8             |\n+------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3, 2], 0.9)\n</code></pre> <pre><code>select bigfunctions.us.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3, 2], 0.9)\n</code></pre> <pre><code>select bigfunctions.europe_west1.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3, 2], 0.9)\n</code></pre> <pre>\n<code>+------------------+\n| percentile_value |\n+------------------+\n| 15.9             |\n+------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3, 2], 2)\n</code></pre> <pre><code>select bigfunctions.us.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3, 2], 2)\n</code></pre> <pre><code>select bigfunctions.europe_west1.percentile_value([20, 16, 15, 13, 10, 9, 8, 8, 7, 6, 3, 2], 2)\n</code></pre> <pre>\n<code>+------------------+\n| percentile_value |\n+------------------+\n| null             |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/phone_number_info/","title":"phone_number_info - BigQuery","text":"<p> bigfunctions  &gt; phone_number_info </p>"},{"location":"bigfunctions/phone_number_info/#phone_number_info","title":"phone_number_info","text":"<p>Signature <pre><code>phone_number_info(phone_number, options)\n</code></pre></p> <p>Description</p> <p>Get <code>phone_number</code> info such as:</p> <ul> <li><code>country</code>,</li> <li><code>isValid</code>,</li> <li>etc</li> </ul> <p>using libphonenumber-js library.</p> <p>Argument <code>options</code> can be <code>null</code> or must be a json with the following keys: <code>defaultCountry</code>, <code>defaultCallingCode</code> and <code>extract</code> as described in the library documentation.</p> <p>Examples</p> <p>1. Get info about an international <code>phone_number</code> (starting with <code>+</code>)</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.phone_number_info('+33123456789', null)\n</code></pre> <pre><code>select bigfunctions.us.phone_number_info('+33123456789', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.phone_number_info('+33123456789', null)\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| info                                                                                                                                                                                                                                                                                                                                                                                       |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"isPossible\": true,\n  \"isValid\": true,\n  \"parseError\": null,\n  \"country\": \"FR\",\n  \"countryCallingCode\": \"33\",\n  \"formattedInternational\": \"+33 1 23 45 67 89\",\n  \"formattedNational\": \"01 23 45 67 89\",\n  \"isNonGeographic\": false,\n  \"nationalNumber\": \"123456789\",\n  \"number\": \"+33123456789\",\n  \"possibleCountries\": [\"FR\"],\n  \"type\": \"FIXED_LINE\",\n  \"uri\": \"tel:+33123456789\"\n}\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>2. Get info about a national <code>phone_number</code></p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.phone_number_info('0123456789', json '{\"defaultCountry\": \"FR\"}')\n</code></pre> <pre><code>select bigfunctions.us.phone_number_info('0123456789', json '{\"defaultCountry\": \"FR\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.phone_number_info('0123456789', json '{\"defaultCountry\": \"FR\"}')\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| info                                                                                                                                                                                                                                                                                                                                                                                       |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"isPossible\": true,\n  \"isValid\": true,\n  \"parseError\": null,\n  \"country\": \"FR\",\n  \"countryCallingCode\": \"33\",\n  \"formattedInternational\": \"+33 1 23 45 67 89\",\n  \"formattedNational\": \"01 23 45 67 89\",\n  \"isNonGeographic\": false,\n  \"nationalNumber\": \"123456789\",\n  \"number\": \"+33123456789\",\n  \"possibleCountries\": [\"FR\"],\n  \"type\": \"FIXED_LINE\",\n  \"uri\": \"tel:+33123456789\"\n}\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>3. If no phone number is found in <code>phone_number</code> argument, a reason in given in <code>parseError</code></p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.phone_number_info('Hello!', null)\n</code></pre> <pre><code>select bigfunctions.us.phone_number_info('Hello!', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.phone_number_info('Hello!', null)\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| info                                                                                                                                                                                                                                                                                                                               |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"isPossible\": false,\n  \"isValid\": false,\n  \"parseError\": \"NOT_A_NUMBER\",\n  \"country\": null,\n  \"countryCallingCode\": null,\n  \"formattedInternational\": null,\n  \"formattedNational\": null,\n  \"isNonGeographic\": null,\n  \"nationalNumber\": null,\n  \"number\": null,\n  \"possibleCountries\": null,\n  \"type\": null,\n  \"uri\": null,\n}\n |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>4. By default, if the given <code>phone_number</code> text contains a phone number among other text, it will be extracted.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.phone_number_info('Hello +33123456789 !', null)\n</code></pre> <pre><code>select bigfunctions.us.phone_number_info('Hello +33123456789 !', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.phone_number_info('Hello +33123456789 !', null)\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| info                                                                                                                                                                                                                                                                                                                                                                                       |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"isPossible\": true,\n  \"isValid\": true,\n  \"parseError\": null,\n  \"country\": \"FR\",\n  \"countryCallingCode\": \"33\",\n  \"formattedInternational\": \"+33 1 23 45 67 89\",\n  \"formattedNational\": \"01 23 45 67 89\",\n  \"isNonGeographic\": false,\n  \"nationalNumber\": \"123456789\",\n  \"number\": \"+33123456789\",\n  \"possibleCountries\": [\"FR\"],\n  \"type\": \"FIXED_LINE\",\n  \"uri\": \"tel:+33123456789\"\n}\n |\n+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>5. To consider that <code>phone_number</code> cannot have additional text use <code>extract:  false</code> as option</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.phone_number_info('Hello +33123456789 !', json '{\"extract\": false}')\n</code></pre> <pre><code>select bigfunctions.us.phone_number_info('Hello +33123456789 !', json '{\"extract\": false}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.phone_number_info('Hello +33123456789 !', json '{\"extract\": false}')\n</code></pre> <pre>\n<code>+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| info                                                                                                                                                                                                                                                                                                                               |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n  \"isPossible\": false,\n  \"isValid\": false,\n  \"parseError\": \"NOT_A_NUMBER\",\n  \"country\": null,\n  \"countryCallingCode\": null,\n  \"formattedInternational\": null,\n  \"formattedNational\": null,\n  \"isNonGeographic\": null,\n  \"nationalNumber\": null,\n  \"number\": null,\n  \"possibleCountries\": null,\n  \"type\": null,\n  \"uri\": null,\n}\n |\n+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/post/","title":"post - BigQuery","text":"<p> bigfunctions  &gt; post </p>"},{"location":"bigfunctions/post/#post","title":"post","text":"<p>Signature <pre><code>post(url, data, headers)\n</code></pre></p> <p>Description</p> <p>POST <code>data</code> to <code>url</code>. <code>response</code> is a json formatted as <code>{status_code, content}</code></p> <p>Examples</p> <p>Without headers</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.post('https://httpbin.org/post', json '{\"hello\": \"world\"}', null)\n</code></pre> <pre><code>select bigfunctions.us.post('https://httpbin.org/post', json '{\"hello\": \"world\"}', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.post('https://httpbin.org/post', json '{\"hello\": \"world\"}', null)\n</code></pre> <pre>\n<code>+-----------------------------------------------+\n| response                                      |\n+-----------------------------------------------+\n| {\n  \"content\": {...},\n  \"status_code\": 200\n}\n |\n+-----------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/precision_recall_auc/","title":"precision_recall_auc - BigQuery","text":"<p> bigfunctions  &gt; precision_recall_auc </p>"},{"location":"bigfunctions/precision_recall_auc/#precision_recall_auc","title":"precision_recall_auc","text":"<p>Signature <pre><code>precision_recall_auc(predictions)\n</code></pre></p> <p>Description</p> <p>Returns the Area Under the Precision Recall Curve (a.k.a. AUC PR) given a set of predicted scores and ground truth labels using the trapezoidal rule</p> <p>Examples</p> <p>1. Random classifier</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.precision_recall_auc((select array_agg(struct(cast(predicted_score as float64), rand() &gt; 0.5)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.us.precision_recall_auc((select array_agg(struct(cast(predicted_score as float64), rand() &gt; 0.5)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.europe_west1.precision_recall_auc((select array_agg(struct(cast(predicted_score as float64), rand() &gt; 0.5)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre>\n<code>+--------+\n| auc_pr |\n+--------+\n| 0.5    |\n+--------+\n</code>\n</pre> <p>2. Good classifier</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.precision_recall_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &gt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.us.precision_recall_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &gt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.europe_west1.precision_recall_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &gt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre>\n<code>+--------+\n| auc_pr |\n+--------+\n| 1.0    |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/precision_recall_curve/","title":"precision_recall_curve - BigQuery","text":"<p> bigfunctions  &gt; precision_recall_curve </p>"},{"location":"bigfunctions/precision_recall_curve/#precision_recall_curve","title":"precision_recall_curve","text":"<p>Signature <pre><code>precision_recall_curve(predictions)\n</code></pre></p> <p>Description</p> <p>Returns the Precision-Recall Curve (as a table) given <code>predictions</code>, an array  of <code>(predicted_score, ground_truth_label)</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select * from bigfunctions.eu.precision_recall_curve([(0.1, false), (0.4, false), (0.35, true), (0.8, true)])\n</code></pre> <pre><code>select * from bigfunctions.us.precision_recall_curve([(0.1, false), (0.4, false), (0.35, true), (0.8, true)])\n</code></pre> <pre><code>select * from bigfunctions.europe_west1.precision_recall_curve([(0.1, false), (0.4, false), (0.35, true), (0.8, true)])\n</code></pre> <pre>\n<code>\n+-----------+---------+\n| precision |  recall |\n+-----------+---------+\n|    0.5    |   1.0   |\n|    0.667  |   1.0   |\n|    0.5    |   0.5   |\n|    1.0    |   0.5   |\n|    1.0    |   0     |\n+-----------+---------+\n\n</code>\n</pre>"},{"location":"bigfunctions/prophet/","title":"prophet - BigQuery","text":"<p> bigfunctions  &gt; prophet </p>"},{"location":"bigfunctions/prophet/#prophet","title":"prophet","text":"<p>Signature <pre><code>prophet(records, periods, kwargs)\n</code></pre></p> <p>Description</p> <p>Forecast time-series using prophet (inspired from this Felipe Hoffa medium's post)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.prophet(json'[[\"2020-01-01\", 1], [\"2020-01-02\", 2]]', 3)\n</code></pre> <pre><code>select bigfunctions.us.prophet(json'[[\"2020-01-01\", 1], [\"2020-01-02\", 2]]', 3)\n</code></pre> <pre><code>select bigfunctions.europe_west1.prophet(json'[[\"2020-01-01\", 1], [\"2020-01-02\", 2]]', 3)\n</code></pre> <pre>\n<code>+-----------------------------------------------------------+\n| forecasted_records                                        |\n+-----------------------------------------------------------+\n| [[\"2020-01-03\", 3], [\"2020-01-04\", 4], [\"2020-01-05\", 5]] |\n+-----------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/quantize_into_bins/","title":"quantize_into_bins - BigQuery","text":"<p> bigfunctions  &gt; quantize_into_bins </p>"},{"location":"bigfunctions/quantize_into_bins/#quantize_into_bins","title":"quantize_into_bins","text":"<p>Signature <pre><code>quantize_into_bins(value, bin_bounds)\n</code></pre></p> <p>Description</p> <p>Get the <code>bin_range</code> in which belongs <code>value</code> with bins defined by their <code>bin_bounds</code>.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins(-4, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins(-4, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins(-4, [0, 1, 5, 10])\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| ]-\u221e, 0[   |\n+-----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins(3, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins(3, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins(3, [0, 1, 5, 10])\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| [1, 5[    |\n+-----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins(9, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins(9, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins(9, [0, 1, 5, 10])\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| [5, 10]   |\n+-----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins(130, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins(130, [0, 1, 5, 10])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins(130, [0, 1, 5, 10])\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| ]10, +\u221e[  |\n+-----------+\n</code>\n</pre>"},{"location":"bigfunctions/quantize_into_bins_with_labels/","title":"quantize_into_bins_with_labels - BigQuery","text":"<p> bigfunctions  &gt; quantize_into_bins_with_labels </p>"},{"location":"bigfunctions/quantize_into_bins_with_labels/#quantize_into_bins_with_labels","title":"quantize_into_bins_with_labels","text":"<p>Signature <pre><code>quantize_into_bins_with_labels(value, bin_bounds, labels)\n</code></pre></p> <p>Description</p> <p>Get the <code>label</code> of the bin in which belongs <code>value</code></p> <p>Examples</p> <p>1. <code>55</code> is between <code>50</code> and <code>60</code> so it is in second bin. --&gt; Function returns <code>Wait for result exam</code> label. </p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins_with_labels(55, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins_with_labels(55, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins_with_labels(55, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre>\n<code>+----------------------+\n| label                |\n+----------------------+\n| Wait for result exam |\n+----------------------+\n</code>\n</pre> <p>2. Lower bounds are inclusive. <code>50</code> is then also in second bin. --&gt; Function returns <code>Wait for result exam</code> label. </p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins_with_labels(50, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins_with_labels(50, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins_with_labels(50, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre>\n<code>+----------------------+\n| label                |\n+----------------------+\n| Wait for result exam |\n+----------------------+\n</code>\n</pre> <p>3. <code>-10</code> is below the lowest bound --&gt; Function returns <code>UNDEFINED_INF</code>. (It returns <code>UNDEFINED_SUP</code> is above the upper bound). </p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins_with_labels(-10, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins_with_labels(-10, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins_with_labels(-10, [0, 50, 60, 90, 100], ['Fail', 'Wait for result exam', 'Pass', 'Pass with mention'])\n</code></pre> <pre>\n<code>+---------------+\n| label         |\n+---------------+\n| UNDEFINED_INF |\n+---------------+\n</code>\n</pre> <p>4. You can also pass <code>n + 1</code> labels instead of <code>n - 1</code> labels (when <code>n</code> is the number of bounds). In that case, values below the first bound will have this first label (instead of <code>UNDEFINED_INF</code>). <code>-10</code> will then give <code>Lower than very bad!</code>. </p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_bins_with_labels(-10, [0, 50, 60, 90, 100], ['Lower than very bad!', 'Fail', 'Wait for result exam', 'Pass', 'Pass with mention', 'Genius!'])\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_bins_with_labels(-10, [0, 50, 60, 90, 100], ['Lower than very bad!', 'Fail', 'Wait for result exam', 'Pass', 'Pass with mention', 'Genius!'])\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_bins_with_labels(-10, [0, 50, 60, 90, 100], ['Lower than very bad!', 'Fail', 'Wait for result exam', 'Pass', 'Pass with mention', 'Genius!'])\n</code></pre> <pre>\n<code>+---------------------+\n| label               |\n+---------------------+\n| Lower than very bad |\n+---------------------+\n</code>\n</pre>"},{"location":"bigfunctions/quantize_into_fixed_width_bins/","title":"quantize_into_fixed_width_bins - BigQuery","text":"<p> bigfunctions  &gt; quantize_into_fixed_width_bins </p>"},{"location":"bigfunctions/quantize_into_fixed_width_bins/#quantize_into_fixed_width_bins","title":"quantize_into_fixed_width_bins","text":"<p>Signature <pre><code>quantize_into_fixed_width_bins(value, min_bound, max_bound, nb_bins)\n</code></pre></p> <p>Description</p> <p>Get the <code>bin_range</code> in which belongs <code>value</code> with bins defined so that there are <code>nb_bins</code> bins of same width between <code>min_bound</code> and <code>max_bound</code> plus a bin <code>]-\u221e, min_bound[</code> and a bin <code>]max_bound, +\u221e[</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_fixed_width_bins(-4, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_fixed_width_bins(-4, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_fixed_width_bins(-4, 0, 100, 10)\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| ]-\u221e, 0[   |\n+-----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_fixed_width_bins(5, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_fixed_width_bins(5, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_fixed_width_bins(5, 0, 100, 10)\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| [0, 10[   |\n+-----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_fixed_width_bins(97, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_fixed_width_bins(97, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_fixed_width_bins(97, 0, 100, 10)\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| [90, 100] |\n+-----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.quantize_into_fixed_width_bins(130, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.us.quantize_into_fixed_width_bins(130, 0, 100, 10)\n</code></pre> <pre><code>select bigfunctions.europe_west1.quantize_into_fixed_width_bins(130, 0, 100, 10)\n</code></pre> <pre>\n<code>+-----------+\n| bin_range |\n+-----------+\n| ]100, +\u221e[ |\n+-----------+\n</code>\n</pre>"},{"location":"bigfunctions/rare_values/","title":"rare_values - BigQuery","text":"<p> bigfunctions  &gt; rare_values </p>"},{"location":"bigfunctions/rare_values/#rare_values","title":"rare_values","text":"<p>Signature <pre><code>rare_values(values, frequency_threshold)\n</code></pre></p> <p>Description</p> <p>Returns <code>rare_values</code> among array of <code>values</code></p> <p>This function computes the frequency of each value in <code>values</code> array and returns the values which frequency is stricly below the given <code>frequency_threshold</code>.</p> <p>By returning rare values, this function can be used for anomaly detection in a variety of use cases.</p> <p>Examples</p> <p>Detect rare strings in an array of strings with a <code>frequency_threshold</code> of 0.2. <code>cherry</code> appears once for an array of 6 elements so its frequency is 1 / 6 ~= 0.167 &lt; 0.2. It is a rare string compared to the <code>frequency_threshold</code>. </p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.rare_values([\"apple\", \"apple\", \"banana\", \"banana\", \"banana\", \"cherry\"], 0.2)\n</code></pre> <pre><code>select bigfunctions.us.rare_values([\"apple\", \"apple\", \"banana\", \"banana\", \"banana\", \"cherry\"], 0.2)\n</code></pre> <pre><code>select bigfunctions.europe_west1.rare_values([\"apple\", \"apple\", \"banana\", \"banana\", \"banana\", \"cherry\"], 0.2)\n</code></pre> <pre>\n<code>+-------------+\n| rare_values |\n+-------------+\n| [\"cherry\"]  |\n+-------------+\n</code>\n</pre>"},{"location":"bigfunctions/refresh_powerbi/","title":"refresh_powerbi - BigQuery","text":"<p> bigfunctions  &gt; refresh_powerbi </p>"},{"location":"bigfunctions/refresh_powerbi/#refresh_powerbi","title":"refresh_powerbi","text":"<p>Signature <pre><code>refresh_powerbi(dataset_id, workspace_id, tenant_id, app_id, token_secret, custom_refresh_param)\n</code></pre></p> <p>Description</p> <p>Refresh a Power BI dataset (semantic model) by it's id <code>dataset_id</code>.</p> <p>Use case:</p> <p>After model refresh, launch Power BI dataset (semantic model) refresh from BigQuery in SQL</p> <p></p> <ul> <li>in a dbt post-hook</li> <li>in a dataform post_operations</li> <li>in a SQL Mesh post-statements</li> <li>in your favorite orchestration tool</li> </ul> <p>Optionnal:</p> <p>on premium capacity, you can pass json argument (xmla like) to launch a custom refresh (ex: Full refresh only a given table )</p> <p>Docs:</p> <ul> <li>Microsoft's doc for service principal creation, token, security group affectation &amp; Fabric API to activate</li> <li>Microsoft's doc of refresh api</li> </ul> <p>Encrypt your secrets</p> <p>We advise NOT TO write your token in plain text in <code>token_secret</code> argument.</p> <p>Otherwise, they will be stored in plain text in your BigQuery logs for months.</p> <p>Instead, you can use the following snippet to generate an encrypted version of <code>token_secret</code> that you can copy safely as <code>token_secret</code> argument.</p> <p>This public bigfunction (deployed on bigfunctions GCP project) will be able to decrypt it. But no one else can.</p> Encrypt Secret <p>Examples</p> <p>1. Refresh of a dataset</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.refresh_powerbi('xxx-xxx-xxx', 'xxx-xxx-xxx', 'xxx-xxx-xxx', 'xxx-xxx-xxx', 'ENCRYPTED_SECRET(GvVm...)', null)\n</code></pre> <pre><code>select bigfunctions.us.refresh_powerbi('xxx-xxx-xxx', 'xxx-xxx-xxx', 'xxx-xxx-xxx', 'xxx-xxx-xxx', 'ENCRYPTED_SECRET(GvVm...)', null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.refresh_powerbi('xxx-xxx-xxx', 'xxx-xxx-xxx', 'xxx-xxx-xxx', 'xxx-xxx-xxx', 'ENCRYPTED_SECRET(GvVm...)', null)\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre> <p>2. custom refresh (xmla like) - premium capacity only</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.refresh_powerbi('xxx-xxx-xxx', 'xxx-xxx-xxx', 'xxx-xxx-xxx', 'xxx-xxx-xxx', 'ENCRYPTED_SECRET(GvVm...)', json '{ \"type\": \"Full\", \"objects\": [ { \"table\": \"table_name\" } ] }')\n</code></pre> <pre><code>select bigfunctions.us.refresh_powerbi('xxx-xxx-xxx', 'xxx-xxx-xxx', 'xxx-xxx-xxx', 'xxx-xxx-xxx', 'ENCRYPTED_SECRET(GvVm...)', json '{ \"type\": \"Full\", \"objects\": [ { \"table\": \"table_name\" } ] }')\n</code></pre> <pre><code>select bigfunctions.europe_west1.refresh_powerbi('xxx-xxx-xxx', 'xxx-xxx-xxx', 'xxx-xxx-xxx', 'xxx-xxx-xxx', 'ENCRYPTED_SECRET(GvVm...)', json '{ \"type\": \"Full\", \"objects\": [ { \"table\": \"table_name\" } ] }')\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/refresh_tableau/","title":"refresh_tableau - BigQuery","text":"<p> bigfunctions  &gt; refresh_tableau </p>"},{"location":"bigfunctions/refresh_tableau/#refresh_tableau","title":"refresh_tableau","text":"<p>Signature <pre><code>refresh_tableau(workbook_or_datasource_title, site, server, token_name, token_secret)\n</code></pre></p> <p>Description</p> <p>Refresh a tableau datasource or workbook named <code>workbook_or_datasource_title</code>.</p> <p>Use case:</p> <p>After model refresh, launch tableau datasource / workbook refresh from BigQuery in SQL</p> <p></p> <ul> <li>in a dbt post-hook</li> <li>in a dataform post_operations</li> <li>in a SQL Mesh post-statements</li> <li>in your favorite orchestration tool</li> </ul> <p>Docs</p> <ul> <li>Tableau's doc for creating a personnal access token on tableau server (cloud or onprem) for api usage</li> </ul> <p>Encrypt your secrets</p> <p>We advise NOT TO write your token in plain text in <code>token_secret</code> argument.</p> <p>Otherwise, they will be stored in plain text in your BigQuery logs for months.</p> <p>Instead, you can use the following snippet to generate an encrypted version of <code>token_secret</code> that you can copy safely as <code>token_secret</code> argument.</p> <p>This public bigfunction (deployed on bigfunctions GCP project) will be able to decrypt it. But no one else can.</p> Encrypt Secret <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.refresh_tableau('My Great Workbook', 'site_name', 'eu-west-1a.online.tableau.com', 'token_name', 'ENCRYPTED_SECRET(GvVm...)')\n</code></pre> <pre><code>select bigfunctions.us.refresh_tableau('My Great Workbook', 'site_name', 'eu-west-1a.online.tableau.com', 'token_name', 'ENCRYPTED_SECRET(GvVm...)')\n</code></pre> <pre><code>select bigfunctions.europe_west1.refresh_tableau('My Great Workbook', 'site_name', 'eu-west-1a.online.tableau.com', 'token_name', 'ENCRYPTED_SECRET(GvVm...)')\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/remove_accents/","title":"remove_accents - BigQuery","text":"<p> bigfunctions  &gt; remove_accents </p>"},{"location":"bigfunctions/remove_accents/#remove_accents","title":"remove_accents","text":"<p>Signature <pre><code>remove_accents(str)\n</code></pre></p> <p>Description</p> <p>Remove accents</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.remove_accents('Voil\u00e0 !')\n</code></pre> <pre><code>select bigfunctions.us.remove_accents('Voil\u00e0 !')\n</code></pre> <pre><code>select bigfunctions.europe_west1.remove_accents('Voil\u00e0 !')\n</code></pre> <pre>\n<code>+----------------+\n| cleaned_string |\n+----------------+\n| Voila !        |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/remove_extra_whitespaces/","title":"remove_extra_whitespaces - BigQuery","text":"<p> bigfunctions  &gt; remove_extra_whitespaces </p>"},{"location":"bigfunctions/remove_extra_whitespaces/#remove_extra_whitespaces","title":"remove_extra_whitespaces","text":"<p>Signature <pre><code>remove_extra_whitespaces(str)\n</code></pre></p> <p>Description</p> <p>Remove unwanted whitespaces (inspired from re_data dbt repo)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.remove_extra_whitespaces('Hi   Madison  and Mateusz!\\n How are you doing?')\n</code></pre> <pre><code>select bigfunctions.us.remove_extra_whitespaces('Hi   Madison  and Mateusz!\\n How are you doing?')\n</code></pre> <pre><code>select bigfunctions.europe_west1.remove_extra_whitespaces('Hi   Madison  and Mateusz!\\n How are you doing?')\n</code></pre> <pre>\n<code>+--------------------------------------------+\n| cleaned_string                             |\n+--------------------------------------------+\n| Hi Madison and Mateusz! How are you doing? |\n+--------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/remove_strings/","title":"remove_strings - BigQuery","text":"<p> bigfunctions  &gt; remove_strings </p>"},{"location":"bigfunctions/remove_strings/#remove_strings","title":"remove_strings","text":"<p>Signature <pre><code>remove_strings(string, strings_to_remove)\n</code></pre></p> <p>Description</p> <p>Remove any string of <code>strings_to_remove</code> from <code>string</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.remove_strings('I can eat candies', ['can', 'eat'])\n</code></pre> <pre><code>select bigfunctions.us.remove_strings('I can eat candies', ['can', 'eat'])\n</code></pre> <pre><code>select bigfunctions.europe_west1.remove_strings('I can eat candies', ['can', 'eat'])\n</code></pre> <pre>\n<code>+----------------+\n| cleaned_string |\n+----------------+\n| I  dies        |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/remove_value/","title":"remove_value - BigQuery","text":"<p> bigfunctions  &gt; remove_value </p>"},{"location":"bigfunctions/remove_value/#remove_value","title":"remove_value","text":"<p>Signature <pre><code>remove_value(arr, value)\n</code></pre></p> <p>Description</p> <p>Return an array with all values except <code>value</code>.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.remove_value([1, 4, 3, 8], 4)\n</code></pre> <pre><code>select bigfunctions.us.remove_value([1, 4, 3, 8], 4)\n</code></pre> <pre><code>select bigfunctions.europe_west1.remove_value([1, 4, 3, 8], 4)\n</code></pre> <pre>\n<code>+-----------+\n| arr       |\n+-----------+\n| [1, 3, 8] |\n+-----------+\n</code>\n</pre>"},{"location":"bigfunctions/remove_words/","title":"remove_words - BigQuery","text":"<p> bigfunctions  &gt; remove_words </p>"},{"location":"bigfunctions/remove_words/#remove_words","title":"remove_words","text":"<p>Signature <pre><code>remove_words(string, words_to_remove)\n</code></pre></p> <p>Description</p> <p>Remove any word of <code>words_to_remove</code> from <code>string</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.remove_words('I can eat candies', ['can', 'eat'])\n</code></pre> <pre><code>select bigfunctions.us.remove_words('I can eat candies', ['can', 'eat'])\n</code></pre> <pre><code>select bigfunctions.europe_west1.remove_words('I can eat candies', ['can', 'eat'])\n</code></pre> <pre>\n<code>+----------------+\n| cleaned_string |\n+----------------+\n| I  candies     |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/render_handlebars_template/","title":"render_handlebars_template - BigQuery","text":"<p> bigfunctions  &gt; render_handlebars_template </p>"},{"location":"bigfunctions/render_handlebars_template/#render_handlebars_template","title":"render_handlebars_template","text":"<p>Signature <pre><code>render_handlebars_template(template, context)\n</code></pre></p> <p>Description</p> <p>Render template with context using handlebars.js templating library</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.render_handlebars_template('Hello {{ user }}', json '{\"user\": \"James\"}')\n</code></pre> <pre><code>select bigfunctions.us.render_handlebars_template('Hello {{ user }}', json '{\"user\": \"James\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.render_handlebars_template('Hello {{ user }}', json '{\"user\": \"James\"}')\n</code></pre> <pre>\n<code>+------------------+\n| rendered_content |\n+------------------+\n| Hello James      |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/render_template/","title":"render_template - BigQuery","text":"<p> bigfunctions  &gt; render_template </p>"},{"location":"bigfunctions/render_template/#render_template","title":"render_template","text":"<p>Signature <pre><code>render_template(template, context)\n</code></pre></p> <p>Description</p> <p>Render template with context using nunjucks.js templating library</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.render_template('Hello {{ user }}', json '{\"user\": \"James\"}')\n</code></pre> <pre><code>select bigfunctions.us.render_template('Hello {{ user }}', json '{\"user\": \"James\"}')\n</code></pre> <pre><code>select bigfunctions.europe_west1.render_template('Hello {{ user }}', json '{\"user\": \"James\"}')\n</code></pre> <pre>\n<code>+------------------+\n| rendered_content |\n+------------------+\n| Hello James      |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/replace_special_characters/","title":"replace_special_characters - BigQuery","text":"<p> bigfunctions  &gt; replace_special_characters </p>"},{"location":"bigfunctions/replace_special_characters/#replace_special_characters","title":"replace_special_characters","text":"<p>Signature <pre><code>replace_special_characters(string, replacement)\n</code></pre></p> <p>Description</p> <p>Replace most common special characters in a <code>string</code> with <code>replacement</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.replace_special_characters('%\u2665!Hello!*\u2665#', '')\n</code></pre> <pre><code>select bigfunctions.us.replace_special_characters('%\u2665!Hello!*\u2665#', '')\n</code></pre> <pre><code>select bigfunctions.europe_west1.replace_special_characters('%\u2665!Hello!*\u2665#', '')\n</code></pre> <pre>\n<code>+----------------+\n| cleaned_string |\n+----------------+\n| Hello          |\n+----------------+\n</code>\n</pre>"},{"location":"bigfunctions/reverse_geocode/","title":"reverse_geocode - BigQuery","text":"<p> bigfunctions  &gt; reverse_geocode </p>"},{"location":"bigfunctions/reverse_geocode/#reverse_geocode","title":"reverse_geocode","text":"<p>Signature <pre><code>reverse_geocode(latitude, longitude)\n</code></pre></p> <p>Description</p> <p>Get address details at <code>latitude</code>, <code>longitude</code> using Google Maps</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.reverse_geocode(48.86988770000001, 2.3079341)\n</code></pre> <pre><code>select bigfunctions.us.reverse_geocode(48.86988770000001, 2.3079341)\n</code></pre> <pre><code>select bigfunctions.europe_west1.reverse_geocode(48.86988770000001, 2.3079341)\n</code></pre> <pre>\n<code>+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| address_details                                                                                                                                                                                                                                                                                                                                                 |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {\n    \"address_components\": [...],\n    \"formatted_address\": \"1 Av. des Champs-\u00c9lys\u00e9es, 75008 Paris, France\",\n    \"geometry\": {\n        \"location\": {\n            \"lat\": 48.86988770000001,\n            \"lng\": 2.3079341\n        },\n        ...\n    },\n    \"place_id\": \"ChIJ6499V8Rv5kcR5f9dbz3OeBI\",\n    \"plus_code\": {...},\n    \"types\": [\"street_address\"]\n}\n |\n+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/roc_auc/","title":"roc_auc - BigQuery","text":"<p> bigfunctions  &gt; roc_auc </p>"},{"location":"bigfunctions/roc_auc/#roc_auc","title":"roc_auc","text":"<p>Signature <pre><code>roc_auc(predictions)\n</code></pre></p> <p>Description</p> <p>Returns the Area Under the Receiver Operating Characteristic Curve (a.k.a. ROC AUC) given a set of predicted scores and ground truth labels using the trapezoidal rule</p> <p>Examples</p> <p>1. Random classifier</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.roc_auc((select array_agg(struct(cast(predicted_score as float64), rand() &gt; 0.5)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.us.roc_auc((select array_agg(struct(cast(predicted_score as float64), rand() &gt; 0.5)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.europe_west1.roc_auc((select array_agg(struct(cast(predicted_score as float64), rand() &gt; 0.5)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre>\n<code>+---------+\n| roc_auc |\n+---------+\n| 0.5     |\n+---------+\n</code>\n</pre> <p>2. Good classifier</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.roc_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &gt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.us.roc_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &gt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.europe_west1.roc_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &gt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre>\n<code>+---------+\n| roc_auc |\n+---------+\n| 1.0     |\n+---------+\n</code>\n</pre> <p>3. Bad classifier</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.roc_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &lt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.us.roc_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &lt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre><code>select bigfunctions.europe_west1.roc_auc((select array_agg(struct(cast(predicted_score as float64), predicted_score &lt; 500)) from unnest(generate_array(1, 1000)) as predicted_score))\n</code></pre> <pre>\n<code>+---------+\n| roc_auc |\n+---------+\n| 0.0     |\n+---------+\n</code>\n</pre>"},{"location":"bigfunctions/roc_curve/","title":"roc_curve - BigQuery","text":"<p> bigfunctions  &gt; roc_curve </p>"},{"location":"bigfunctions/roc_curve/#roc_curve","title":"roc_curve","text":"<p>Signature <pre><code>roc_curve(predictions)\n</code></pre></p> <p>Description</p> <p>Returns the Receiver Operating Characteristic Curve (a.k.a. ROC Curve) given a set of predicted scores and ground truth labels</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select * from bigfunctions.eu.roc_curve([(0.1, false), (0.4, false), (0.35, true), (0.8, true)])\n</code></pre> <pre><code>select * from bigfunctions.us.roc_curve([(0.1, false), (0.4, false), (0.35, true), (0.8, true)])\n</code></pre> <pre><code>select * from bigfunctions.europe_west1.roc_curve([(0.1, false), (0.4, false), (0.35, true), (0.8, true)])\n</code></pre> <pre>\n<code>\n+---------------------+--------------------+\n| false_positive_rate | true_positive_rate |\n+---------------------+--------------------+\n|         0.0         |         0.0        |\n|         0.0         |         0.5        |\n|         0.5         |         0.5        |\n|         0.5         |         1.0        |\n|         1.0         |         1.0        |\n+---------------------+--------------------+\n\n</code>\n</pre>"},{"location":"bigfunctions/run_python/","title":"run_python - BigQuery","text":"<p> bigfunctions  &gt; run_python </p>"},{"location":"bigfunctions/run_python/#run_python","title":"run_python","text":"<p>Signature <pre><code>run_python(python_code, requirements, kwargs)\n</code></pre></p> <p>Description</p> <p>Run any <code>python_code</code>.</p> <p>For security reasons (sandboxing):</p> <ul> <li>this function is rather slow (a new python environement is created for each query). You may prefer to create a dedicated python function for your use case. You can suggest a new bigfunction here if you want someone to create your function.</li> <li>your python code won't have access to internet</li> <li>not all python packages can be installed</li> </ul> Param Possible values <code>python_code</code> Arbitrary python code (indented with 4 spaces). <code>requirements</code> requirements as you would pass them to <code>pip install</code> (separated with space). Keep note that for security reasons, not all python packages can be installed <code>kwargs</code> A json dict of variables. These variables will be defined and usable in your python code. How sandboxing is done <p>The provided <code>python_code</code> will run in pyodide: a python distribution which runs in a chrome headless browser.</p> <p>This simplifies the implementation of:</p> <ul> <li>isolation between function calls,</li> <li>installation of python packages,</li> <li>isolation from the internet.</li> </ul> <p>For every function call:</p> <ul> <li>we init a new browser context,</li> <li>download pyodide,</li> <li>install python packages</li> <li>run the code.</li> </ul> <p>Examples</p> <p>1. Basic Example</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.run_python(\n  '''\n  return sum(range(10))\n  '''\n  , \n  null\n  , \n  null\n  )\n</code></pre> <pre><code>select bigfunctions.us.run_python(\n  '''\n  return sum(range(10))\n  '''\n  , \n  null\n  , \n  null\n  )\n</code></pre> <pre><code>select bigfunctions.europe_west1.run_python(\n  '''\n  return sum(range(10))\n  '''\n  , \n  null\n  , \n  null\n  )\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| 45     |\n+--------+\n</code>\n</pre> <p>2. Some packages such as <code>pandas</code> can be installed and used.</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.run_python(\n  '''\n  import pandas as pd\n  return pd.Series(range(10)).sum()\n  '''\n  , \n  'pandas'\n  , \n  null\n  )\n</code></pre> <pre><code>select bigfunctions.us.run_python(\n  '''\n  import pandas as pd\n  return pd.Series(range(10)).sum()\n  '''\n  , \n  'pandas'\n  , \n  null\n  )\n</code></pre> <pre><code>select bigfunctions.europe_west1.run_python(\n  '''\n  import pandas as pd\n  return pd.Series(range(10)).sum()\n  '''\n  , \n  'pandas'\n  , \n  null\n  )\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| 45     |\n+--------+\n</code>\n</pre> <p>3. Replace <code>word</code> passed as a variable by its stem</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.run_python(\n  '''\n  import snowballstemmer\n  stemmer = snowballstemmer.stemmer('english')\n  stems = stemmer.stemWords(text.split())\n  return ' '.join(stems)\n  '''\n  , \n  'snowballstemmer'\n  , \n  to_json(struct(\n    'care cared and caring' as text\n  ))\n  )\n</code></pre> <pre><code>select bigfunctions.us.run_python(\n  '''\n  import snowballstemmer\n  stemmer = snowballstemmer.stemmer('english')\n  stems = stemmer.stemWords(text.split())\n  return ' '.join(stems)\n  '''\n  , \n  'snowballstemmer'\n  , \n  to_json(struct(\n    'care cared and caring' as text\n  ))\n  )\n</code></pre> <pre><code>select bigfunctions.europe_west1.run_python(\n  '''\n  import snowballstemmer\n  stemmer = snowballstemmer.stemmer('english')\n  stems = stemmer.stemWords(text.split())\n  return ' '.join(stems)\n  '''\n  , \n  'snowballstemmer'\n  , \n  to_json(struct(\n    'care cared and caring' as text\n  ))\n  )\n</code></pre> <pre>\n<code>+--------+\n| result |\n+--------+\n| go     |\n+--------+\n</code>\n</pre>"},{"location":"bigfunctions/sankey_chart/","title":"sankey_chart - BigQuery","text":"<p> bigfunctions  &gt; sankey_chart </p>"},{"location":"bigfunctions/sankey_chart/#sankey_chart","title":"sankey_chart","text":"<p>Signature <pre><code>sankey_chart(data)\n</code></pre></p> <p>Description</p> <p>Return html with a Sankey Google chart</p> See the result as a data visualization in BigQuery Console! <p>The result of this function can be vizualized as an html report directly in BigQuery Console!</p> <ol> <li>Install this bookmarklet: bigfunctions (it has to be done only once)</li> <li>Open BigQuery console</li> <li>Click on the installed bookmarklet.<ul> <li>From now on, the bookmarklet code will observe the BigQuery console page.</li> <li>If a BigQuery result appears with a unique cell containing html content, it will be rendered.</li> </ul> </li> <li>You will have to click on the bookmarklet again:<ul> <li>If you refresh the Bigquery console page,</li> <li>If you open the BigQuery console in a new tab of your browser.</li> </ul> </li> <li>Run the query of the example and open the result of the latest subquery. The result will be shown as a nice html content.</li> </ol> <p></p> <p></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.sankey_chart([('event1', 'event2', 12), ('event1', 'event3', 12)])\n</code></pre> <pre><code>select bigfunctions.us.sankey_chart([('event1', 'event2', 12), ('event1', 'event3', 12)])\n</code></pre> <pre><code>select bigfunctions.europe_west1.sankey_chart([('event1', 'event2', 12), ('event1', 'event3', 12)])\n</code></pre>"},{"location":"bigfunctions/send_google_chat_message/","title":"send_google_chat_message - BigQuery","text":"<p> bigfunctions  &gt; send_google_chat_message </p>"},{"location":"bigfunctions/send_google_chat_message/#send_google_chat_message","title":"send_google_chat_message","text":"<p>Signature <pre><code>send_google_chat_message(message, webhook_url)\n</code></pre></p> <p>Description</p> <p>Sends <code>message</code> to google chat space using incoming webhook.</p> <p>To get the incoming <code>webhook_url</code>:</p> <ul> <li>In a web browser, open Google Chat.</li> <li>Go to the space to which you want to add a webhook.</li> <li>At the top, next to space title, click Down Arrow arrow_drop_down &gt; Apps &amp; integrations.</li> <li>Click Manage webhooks.</li> <li>If this space already has other webhooks, click Add another. Otherwise, skip this step.</li> <li>For Name, enter \"Quickstart Webhook\".</li> <li>For Avatar URL, enter https://developers.google.com/chat/images/chat-product-icon.png.</li> <li>Click SAVE.</li> <li>To copy the full webhook URL, click Copy.</li> </ul> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_google_chat_message(\"Hello \ud83d\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre><code>select bigfunctions.us.send_google_chat_message(\"Hello \ud83d\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_google_chat_message(\"Hello \ud83d\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre>\n<code>+--------------------------------------------------------------------------------------------------+\n| response                                                                                         |\n+--------------------------------------------------------------------------------------------------+\n| {\n  \"name\": ...,\n  \"sender\": ...,\n  \"createTime\": ...,\n  \"text\": \"Hello \ud83d\udc4b from bigfunctions!\"\n}\n |\n+--------------------------------------------------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/send_mail/","title":"send_mail - BigQuery","text":"<p> bigfunctions  &gt; send_mail </p>"},{"location":"bigfunctions/send_mail/#send_mail","title":"send_mail","text":"<p>Signature <pre><code>send_mail(to, subject, content, attachment_filename, attachment_content)\n</code></pre></p> <p>Description</p> <p>Sends an email to <code>to</code> email with <code>subject</code>, <code>content</code> and possible attachment (defined by <code>attachment_filename</code> and <code>attachment_content</code>).</p> Param Possible values <code>to</code> One or multiple comma separated emails.For instance <code>contact@unytics.io</code> or <code>contact@unytics.io, paul.marcombes@unytics.io</code> <code>subject</code> Email subject <code>content</code> Can be plain text, html or markdown <code>attachment_filename</code> <code>null</code> or filename with extension such as <code>report.xlsx</code> <code>attachment_content</code> <code>null</code> or can be plain text or base64 encoded content (useful to send excel files, pdf or images) <p>This function uses SendGrid to send the emails and Lee Munroe HTML template for styling emails.</p> <p>Examples</p> <p>1. Send email without file attached</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_mail('contact@unytics.io', 'I love BigFunctions', 'Hey Paul, could you deploy more BigFunctions \ud83d\ude4f?', null, null)\n</code></pre> <pre><code>select bigfunctions.us.send_mail('contact@unytics.io', 'I love BigFunctions', 'Hey Paul, could you deploy more BigFunctions \ud83d\ude4f?', null, null)\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_mail('contact@unytics.io', 'I love BigFunctions', 'Hey Paul, could you deploy more BigFunctions \ud83d\ude4f?', null, null)\n</code></pre> <pre>\n<code>+---------+\n| success |\n+---------+\n| true    |\n+---------+\n</code>\n</pre> <p>2. Send email with plain text file attached</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_mail('contact@unytics.io', 'I love BigFunctions', 'Hey Paul, could you deploy more BigFunctions \ud83d\ude4f?', 'report.csv', 'col1,col2\\nval1,val2\\nval3,val4')\n</code></pre> <pre><code>select bigfunctions.us.send_mail('contact@unytics.io', 'I love BigFunctions', 'Hey Paul, could you deploy more BigFunctions \ud83d\ude4f?', 'report.csv', 'col1,col2\\nval1,val2\\nval3,val4')\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_mail('contact@unytics.io', 'I love BigFunctions', 'Hey Paul, could you deploy more BigFunctions \ud83d\ude4f?', 'report.csv', 'col1,col2\\nval1,val2\\nval3,val4')\n</code></pre> <pre>\n<code>+---------+\n| success |\n+---------+\n| true    |\n+---------+\n</code>\n</pre> <p>3. Send email with excel file attached</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_mail('contact@unytics.io', 'I love BigFunctions', 'Hey Paul, could you deploy more BigFunctions \ud83d\ude4f?', 'report.xlsx', (select eu.json2excel('[{\"col1\": \"val1\", \"col2\": \"val2\"}, {\"col1\": \"val3\", \"col2\": \"val4\"}]')))\n</code></pre> <pre><code>select bigfunctions.us.send_mail('contact@unytics.io', 'I love BigFunctions', 'Hey Paul, could you deploy more BigFunctions \ud83d\ude4f?', 'report.xlsx', (select us.json2excel('[{\"col1\": \"val1\", \"col2\": \"val2\"}, {\"col1\": \"val3\", \"col2\": \"val4\"}]')))\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_mail('contact@unytics.io', 'I love BigFunctions', 'Hey Paul, could you deploy more BigFunctions \ud83d\ude4f?', 'report.xlsx', (select europe_west1.json2excel('[{\"col1\": \"val1\", \"col2\": \"val2\"}, {\"col1\": \"val3\", \"col2\": \"val4\"}]')))\n</code></pre> <pre>\n<code>+---------+\n| success |\n+---------+\n| true    |\n+---------+\n</code>\n</pre>"},{"location":"bigfunctions/send_mail_with_excel/","title":"send_mail_with_excel - BigQuery","text":"<p> bigfunctions  &gt; send_mail_with_excel </p>"},{"location":"bigfunctions/send_mail_with_excel/#send_mail_with_excel","title":"send_mail_with_excel","text":"<p>Signature <pre><code>send_mail_with_excel(to, subject, content, excel_filename, table_or_view_or_query)\n</code></pre></p> <p>Description</p> <p>Sends an email with <code>table_or_view_or_query</code> data attached as excel file (only the first 1000 rows will be copied to the excel file)</p> <p>This function calls <code>json2excel</code> and <code>send_mail</code> functions.</p> Param Possible values <code>to</code> One or multiple comma separated emails.For instance <code>contact@unytics.io</code> or <code>contact@unytics.io, paul.marcombes@unytics.io</code> <code>subject</code> Email subject <code>content</code> Can be plain text, html or markdown <code>attachment_filename</code> filename with extension such as <code>report.xlsx</code> <code>table_or_view_or_query</code> A fully qualified table or view you have permission to read or a sql query starting with <code>select</code> <p>Examples</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.send_mail_with_excel(\n  'contact@unytics.io', \n  'Financial Report', \n  '''\n  # Monthly Report from BigQuery\n\n  ## KPIs\n\n  - **MRR**: 32,343 USD\n  - **Churn**: 4.2 %\n  - **Subscriptions**: +3452\n  ''', \n  'report.xlsx', \n  'eu.sales');\n</code></pre> <pre><code>call bigfunctions.us.send_mail_with_excel(\n  'contact@unytics.io', \n  'Financial Report', \n  '''\n  # Monthly Report from BigQuery\n\n  ## KPIs\n\n  - **MRR**: 32,343 USD\n  - **Churn**: 4.2 %\n  - **Subscriptions**: +3452\n  ''', \n  'report.xlsx', \n  'us.sales');\n</code></pre> <pre><code>call bigfunctions.europe_west1.send_mail_with_excel(\n  'contact@unytics.io', \n  'Financial Report', \n  '''\n  # Monthly Report from BigQuery\n\n  ## KPIs\n\n  - **MRR**: 32,343 USD\n  - **Churn**: 4.2 %\n  - **Subscriptions**: +3452\n  ''', \n  'report.xlsx', \n  'europe_west1.sales');\n</code></pre> <p></p>"},{"location":"bigfunctions/send_slack_message/","title":"send_slack_message - BigQuery","text":"<p> bigfunctions  &gt; send_slack_message </p>"},{"location":"bigfunctions/send_slack_message/#send_slack_message","title":"send_slack_message","text":"<p>Signature <pre><code>send_slack_message(message, webhook_url)\n</code></pre></p> <p>Description</p> <p>Sends <code>message</code> to a slack channel.</p> <p>To get the <code>webhook_url</code> for a channel, follow this doc from Slack.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_slack_message(\"Hello \ud83d\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre><code>select bigfunctions.us.send_slack_message(\"Hello \ud83d\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_slack_message(\"Hello \ud83d\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/send_sms/","title":"send_sms - BigQuery","text":"<p> bigfunctions  &gt; send_sms </p>"},{"location":"bigfunctions/send_sms/#send_sms","title":"send_sms","text":"<p>Signature <pre><code>send_sms(message, phone_number)\n</code></pre></p> <p>Description</p> <p>Sends <code>message</code> via SMS to <code>phone_number</code></p> <p>Examples</p> <p>To a French phone number</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_sms(\"Hello \ud83d\udc4b from bigfunctions!\", \"+33xxxxxxxxx\")\n</code></pre> <pre><code>select bigfunctions.us.send_sms(\"Hello \ud83d\udc4b from bigfunctions!\", \"+33xxxxxxxxx\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_sms(\"Hello \ud83d\udc4b from bigfunctions!\", \"+33xxxxxxxxx\")\n</code></pre> <pre>\n<code>+----------------------------------------------------+\n| response                                           |\n+----------------------------------------------------+\n| {\n  \"body\": \"Hello \ud83d\udc4b from bigfunctions!\",\n  ...\n}\n |\n+----------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/send_teams_message/","title":"send_teams_message - BigQuery","text":"<p> bigfunctions  &gt; send_teams_message </p>"},{"location":"bigfunctions/send_teams_message/#send_teams_message","title":"send_teams_message","text":"<p>Signature <pre><code>send_teams_message(message, webhook_url)\n</code></pre></p> <p>Description</p> <p>Sends <code>message</code> to a Microsoft Teams channel.</p> <p>To get the <code>webhook_url</code> for a channel, follow this doc from Microsoft.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.send_teams_message(\"Hello \ud83d\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre><code>select bigfunctions.us.send_teams_message(\"Hello \ud83d\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.send_teams_message(\"Hello \ud83d\udc4b from bigfunctions!\", \"YOUR_WEBHOOK_URL\")\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/sentiment_score/","title":"sentiment_score - BigQuery","text":"<p> bigfunctions  &gt; sentiment_score </p>"},{"location":"bigfunctions/sentiment_score/#sentiment_score","title":"sentiment_score","text":"<p>Signature <pre><code>sentiment_score(content)\n</code></pre></p> <p>Description</p> <p>Compute sentiment score of <code>content</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.sentiment_score('BigFunctions Rocks!')\n</code></pre> <pre><code>select bigfunctions.us.sentiment_score('BigFunctions Rocks!')\n</code></pre> <pre><code>select bigfunctions.europe_west1.sentiment_score('BigFunctions Rocks!')\n</code></pre> <pre>\n<code>+-----------------+\n| sentiment_score |\n+-----------------+\n| 0.945           |\n+-----------------+\n</code>\n</pre>"},{"location":"bigfunctions/sleep/","title":"sleep - BigQuery","text":"<p> bigfunctions  &gt; sleep </p>"},{"location":"bigfunctions/sleep/#sleep","title":"sleep","text":"<p>Signature <pre><code>sleep(seconds)\n</code></pre></p> <p>Description</p> <p>Sleep during <code>seconds</code> seconds</p> <p>Examples</p> <p>Wait for 10 seconds</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.sleep(10)\n</code></pre> <pre><code>select bigfunctions.us.sleep(10)\n</code></pre> <pre><code>select bigfunctions.europe_west1.sleep(10)\n</code></pre> <pre>\n<code>+----------+\n| response |\n+----------+\n| ok       |\n+----------+\n</code>\n</pre>"},{"location":"bigfunctions/sort_values/","title":"sort_values - BigQuery","text":"<p> bigfunctions  &gt; sort_values </p>"},{"location":"bigfunctions/sort_values/#sort_values","title":"sort_values","text":"<p>Signature <pre><code>sort_values(arr)\n</code></pre></p> <p>Description</p> <p>Return sorted array (ascending)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.sort_values([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.sort_values([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.sort_values([1, 4, 3])\n</code></pre> <pre>\n<code>+--------------+\n| sorted_array |\n+--------------+\n| [1, 3, 4]    |\n+--------------+\n</code>\n</pre>"},{"location":"bigfunctions/sort_values_desc/","title":"sort_values_desc - BigQuery","text":"<p> bigfunctions  &gt; sort_values_desc </p>"},{"location":"bigfunctions/sort_values_desc/#sort_values_desc","title":"sort_values_desc","text":"<p>Signature <pre><code>sort_values_desc(arr)\n</code></pre></p> <p>Description</p> <p>Return sorted array (descending)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.sort_values_desc([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.sort_values_desc([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.sort_values_desc([1, 4, 3])\n</code></pre> <pre>\n<code>+--------------+\n| sorted_array |\n+--------------+\n| [4, 3, 1]    |\n+--------------+\n</code>\n</pre>"},{"location":"bigfunctions/sql_to_flatten_json_column/","title":"sql_to_flatten_json_column - BigQuery","text":"<p> bigfunctions  &gt; sql_to_flatten_json_column </p>"},{"location":"bigfunctions/sql_to_flatten_json_column/#sql_to_flatten_json_column","title":"sql_to_flatten_json_column","text":"<p>Signature <pre><code>sql_to_flatten_json_column(data, fully_qualified_column)\n</code></pre></p> <p>Description</p> <p>Generate the SQL to flatten a json <code>column</code> into multiple flat columns.</p> <p>Examples</p> <p>1. Example with a temp table. Copy the code in your BigQuery console &amp; run it!</p> EUUSeurope-west1 <pre><code>create temp table sample_data as (\n\n  select json '{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\"}}' as data\n  union all\n  select json '{\"user\": {\"friends\": [\"Jack\", \"Peter\"]}}' as data\n\n);\n\nselect bigfunctions.eu.sql_to_flatten_json_column(data, 'sample_data.data')\nfrom sample_data\n</code></pre> <pre><code>create temp table sample_data as (\n\n  select json '{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\"}}' as data\n  union all\n  select json '{\"user\": {\"friends\": [\"Jack\", \"Peter\"]}}' as data\n\n);\n\nselect bigfunctions.us.sql_to_flatten_json_column(data, 'sample_data.data')\nfrom sample_data\n</code></pre> <pre><code>create temp table sample_data as (\n\n  select json '{\"created_at\": \"2022-01-01\", \"user\": {\"name\": \"James\"}}' as data\n  union all\n  select json '{\"user\": {\"friends\": [\"Jack\", \"Peter\"]}}' as data\n\n);\n\nselect bigfunctions.europe_west1.sql_to_flatten_json_column(data, 'sample_data.data')\nfrom sample_data\n</code></pre> <pre>\n<code>+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| sql                                                                                                                                                                                                                                       |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| select\n    *,\n    cast(json_value(`data`, '$.created_at') as date) as created_at,\n    json_extract(`data`, '$.user.friends') as user__friends,\n    cast(json_value(`data`, '$.user.name') as string) as user__name,\n  from `sample_data`\n |\n+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>2. Get SQL to flatten column <code>data</code> of your table <code>project.dataset.table</code></p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.sql_to_flatten_json_column(data, 'project.dataset.table.data')\n</code></pre> <pre><code>select bigfunctions.us.sql_to_flatten_json_column(data, 'project.dataset.table.data')\n</code></pre> <pre><code>select bigfunctions.europe_west1.sql_to_flatten_json_column(data, 'project.dataset.table.data')\n</code></pre> <pre>\n<code>+-------------------------------------------------------+\n| sql                                                   |\n+-------------------------------------------------------+\n| select\n    *,\n    ...\n  from `project.dataset.table`\n |\n+-------------------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/sum_values/","title":"sum_values - BigQuery","text":"<p> bigfunctions  &gt; sum_values </p>"},{"location":"bigfunctions/sum_values/#sum_values","title":"sum_values","text":"<p>Signature <pre><code>sum_values(arr)\n</code></pre></p> <p>Description</p> <p>Return the sum of array values</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.sum_values([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.us.sum_values([1, 4, 3])\n</code></pre> <pre><code>select bigfunctions.europe_west1.sum_values([1, 4, 3])\n</code></pre> <pre>\n<code>+-------+\n| value |\n+-------+\n| 8     |\n+-------+\n</code>\n</pre>"},{"location":"bigfunctions/timestamp_from_unix_date_time/","title":"timestamp_from_unix_date_time - BigQuery","text":"<p> bigfunctions  &gt; timestamp_from_unix_date_time </p>"},{"location":"bigfunctions/timestamp_from_unix_date_time/#timestamp_from_unix_date_time","title":"timestamp_from_unix_date_time","text":"<p>Signature <pre><code>timestamp_from_unix_date_time(unix_date_time, date_time_part)\n</code></pre></p> <p>Description</p> <p>Interprets <code>unix_date_time</code> as the number of <code>date_time_part</code> since <code>1970-01-01 00:00:00 UTC</code>. Truncates higher levels of precision by rounding down to the beginning of the <code>date_time_part</code>.</p> Param Possible values <code>date_time_part</code> <code>MICROSECOND</code>, <code>MILLISECOND</code>, <code>SECOND</code>, <code>MINUTE</code>, <code>HOUR</code>, <code>DAY</code>, <code>WEEK</code>, <code>WEEK(MONDAY)</code>, <code>WEEK(TUESDAY)</code>, <code>WEEK(WEDNESDAY)</code>, <code>WEEK(THURSDAY)</code>, <code>WEEK(FRIDAY)</code>, <code>WEEK(SATURDAY)</code>, <code>WEEK(SUNDAY)</code>, <code>MONTH</code>, <code>QUARTER</code>, <code>YEAR</code> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.timestamp_from_unix_date_time(31, \"YEAR\")\n</code></pre> <pre><code>select bigfunctions.us.timestamp_from_unix_date_time(31, \"YEAR\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.timestamp_from_unix_date_time(31, \"YEAR\")\n</code></pre> <pre>\n<code>+-------------------------+\n| from_unix               |\n+-------------------------+\n| 2001-01-01 00:00:00 UTC |\n+-------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/timestamp_to_unix_date_time/","title":"timestamp_to_unix_date_time - BigQuery","text":"<p> bigfunctions  &gt; timestamp_to_unix_date_time </p>"},{"location":"bigfunctions/timestamp_to_unix_date_time/#timestamp_to_unix_date_time","title":"timestamp_to_unix_date_time","text":"<p>Signature <pre><code>timestamp_to_unix_date_time(timestamp_expression, date_time_part)\n</code></pre></p> <p>Description</p> <p>Returns the number of <code>date_time_part</code> since <code>1970-01-01 00:00:00 UTC</code>. Truncates higher levels of precision by rounding down to the beginning of the <code>date_time_part</code>.</p> Param Possible values <code>date_time_part</code> <code>MICROSECOND</code>, <code>MILLISECOND</code>, <code>SECOND</code>, <code>MINUTE</code>, <code>HOUR</code>, <code>DAY</code>, <code>WEEK</code>, <code>WEEK(MONDAY)</code>, <code>WEEK(TUESDAY)</code>, <code>WEEK(WEDNESDAY)</code>, <code>WEEK(THURSDAY)</code>, <code>WEEK(FRIDAY)</code>, <code>WEEK(SATURDAY)</code>, <code>WEEK(SUNDAY)</code>, <code>MONTH</code>, <code>QUARTER</code>, <code>YEAR</code> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.timestamp_to_unix_date_time(timestamp(\"2001-01-01\"), \"YEAR\")\n</code></pre> <pre><code>select bigfunctions.us.timestamp_to_unix_date_time(timestamp(\"2001-01-01\"), \"YEAR\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.timestamp_to_unix_date_time(timestamp(\"2001-01-01\"), \"YEAR\")\n</code></pre> <pre>\n<code>+------------+\n| unix_value |\n+------------+\n| 31         |\n+------------+\n</code>\n</pre>"},{"location":"bigfunctions/translate/","title":"translate - BigQuery","text":"<p> bigfunctions  &gt; translate </p>"},{"location":"bigfunctions/translate/#translate","title":"translate","text":"<p>Signature <pre><code>translate(text, target_language)\n</code></pre></p> <p>Description</p> <p>Translate <code>text</code> into <code>target_language</code></p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.translate(\"Salut \ud83d\udc4b Florian. Merci d'avoir contribu\u00e9 !\", 'en')\n</code></pre> <pre><code>select bigfunctions.us.translate(\"Salut \ud83d\udc4b Florian. Merci d'avoir contribu\u00e9 !\", 'en')\n</code></pre> <pre><code>select bigfunctions.europe_west1.translate(\"Salut \ud83d\udc4b Florian. Merci d'avoir contribu\u00e9 !\", 'en')\n</code></pre> <pre>\n<code>+-------------------------------------------+\n| translated_text                           |\n+-------------------------------------------+\n| Hello \ud83d\udc4b Florian. Thanks for contributing! |\n+-------------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/translated_month_name/","title":"translated_month_name - BigQuery","text":"<p> bigfunctions  &gt; translated_month_name </p>"},{"location":"bigfunctions/translated_month_name/#translated_month_name","title":"translated_month_name","text":"<p>Signature <pre><code>translated_month_name(date, language)\n</code></pre></p> <p>Description</p> <p>Get <code>translated_month_name</code> in targeted <code>language</code></p> <p><code>language</code> has locale format such as <code>fr</code>, <code>fr_FR</code>, <code>fr_BE</code>, etc.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.translated_month_name('2022-05-01', 'es')\n</code></pre> <pre><code>select bigfunctions.us.translated_month_name('2022-05-01', 'es')\n</code></pre> <pre><code>select bigfunctions.europe_west1.translated_month_name('2022-05-01', 'es')\n</code></pre> <pre>\n<code>+-----------------------+\n| translated_month_name |\n+-----------------------+\n| mayo                  |\n+-----------------------+\n</code>\n</pre>"},{"location":"bigfunctions/translated_weekday_name/","title":"translated_weekday_name - BigQuery","text":"<p> bigfunctions  &gt; translated_weekday_name </p>"},{"location":"bigfunctions/translated_weekday_name/#translated_weekday_name","title":"translated_weekday_name","text":"<p>Signature <pre><code>translated_weekday_name(date, language)\n</code></pre></p> <p>Description</p> <p>Get <code>translated_weekday_name</code> in targeted <code>language</code></p> <p><code>language</code> has locale format such as <code>fr</code>, <code>fr_FR</code>, <code>fr_BE</code>, etc.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.translated_weekday_name('2023-06-02', 'fr')\n</code></pre> <pre><code>select bigfunctions.us.translated_weekday_name('2023-06-02', 'fr')\n</code></pre> <pre><code>select bigfunctions.europe_west1.translated_weekday_name('2023-06-02', 'fr')\n</code></pre> <pre>\n<code>+-------------------------+\n| translated_weekday_name |\n+-------------------------+\n| vendredi                |\n+-------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/upload_table_to_gsheet/","title":"upload_table_to_gsheet - BigQuery","text":"<p> bigfunctions  &gt; upload_table_to_gsheet </p>"},{"location":"bigfunctions/upload_table_to_gsheet/#upload_table_to_gsheet","title":"upload_table_to_gsheet","text":"<p>Signature <pre><code>upload_table_to_gsheet(table_or_view_or_query, max_rows, spreadsheet_url, worksheet_name, write_mode)\n</code></pre></p> <p>Description</p> <p>Upload data from <code>table_or_view_or_query</code> to Google Sheet (maximum <code>max_rows</code> rows will be uploaded).</p> <ol> <li>\ud83d\udca1 For this to work, share your Google Sheet in edit mode to <code>749389685934-compute@developer.gserviceaccount.com</code></li> <li><code>write_mode</code> controls what is done if a worksheet with <code>worksheet_name</code> already exists. It must be one of:<ul> <li><code>write_truncate</code>: if the sheet already exists, it will be recreated.</li> <li><code>write_append</code>: if the sheet already exists, data will be appended to it.</li> <li><code>raise_error</code>:  if the sheet already exists, an error will be raised.</li> <li><code>do_nothing</code>:  if the sheet already exists, nothing will be done.</li> <li><code>null</code>: same as <code>write_truncate</code></li> </ul> </li> </ol> <p>Examples</p> <p>1. upload 1000 rows from a table</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.upload_table_to_gsheet(\n  'eu.sales', \n  1000, \n  'https://docs.google.com/spreadsheets/d/xxxxxxxxx', \n  'my worksheet', \n  'write_truncate');\n</code></pre> <pre><code>call bigfunctions.us.upload_table_to_gsheet(\n  'us.sales', \n  1000, \n  'https://docs.google.com/spreadsheets/d/xxxxxxxxx', \n  'my worksheet', \n  'write_truncate');\n</code></pre> <pre><code>call bigfunctions.europe_west1.upload_table_to_gsheet(\n  'europe_west1.sales', \n  1000, \n  'https://docs.google.com/spreadsheets/d/xxxxxxxxx', \n  'my worksheet', \n  'write_truncate');\n</code></pre> <p></p> <p>2. with a query</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.upload_table_to_gsheet(\n  '(select 1 as foo)', \n  null, \n  'https://docs.google.com/spreadsheets/d/xxxxxxxxx', \n  'my worksheet', \n  'write_truncate');\n</code></pre> <pre><code>call bigfunctions.us.upload_table_to_gsheet(\n  '(select 1 as foo)', \n  null, \n  'https://docs.google.com/spreadsheets/d/xxxxxxxxx', \n  'my worksheet', \n  'write_truncate');\n</code></pre> <pre><code>call bigfunctions.europe_west1.upload_table_to_gsheet(\n  '(select 1 as foo)', \n  null, \n  'https://docs.google.com/spreadsheets/d/xxxxxxxxx', \n  'my worksheet', \n  'write_truncate');\n</code></pre>"},{"location":"bigfunctions/upload_to_gsheet/","title":"upload_to_gsheet - BigQuery","text":"<p> bigfunctions  &gt; upload_to_gsheet </p>"},{"location":"bigfunctions/upload_to_gsheet/#upload_to_gsheet","title":"upload_to_gsheet","text":"<p>Signature <pre><code>upload_to_gsheet(data, spreadsheet_url, worksheet_name, write_mode)\n</code></pre></p> <p>Description</p> <p>Upload <code>data</code> (a json array of objects) to a Google Sheet in <code>write_mode</code>.</p> <ol> <li>\ud83d\udca1 For this to work, share your Google Sheet in edit mode to <code>749389685934-compute@developer.gserviceaccount.com</code></li> <li><code>write_mode</code> controls what is done if a worksheet with <code>worksheet_name</code> already exists. It must be one of:<ul> <li><code>write_truncate</code>: if the sheet already exists, it will be recreated.</li> <li><code>write_append</code>: if the sheet already exists, data will be appended to it.</li> <li><code>raise_error</code>:  if the sheet already exists, an error will be raised.</li> <li><code>do_nothing</code>:  if the sheet already exists, nothing will be done.</li> <li><code>null</code>: same as <code>write_truncate</code></li> </ul> </li> </ol> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.upload_to_gsheet(json '[{\"col1\": \"row1\", \"col2\": 1}, {\"col1\": \"row2\", \"col2\": 2}]', \"https://docs.google.com/spreadsheets/d/xxxxxxxxx\", \"my worksheet\", \"write_truncate\")\n</code></pre> <pre><code>select bigfunctions.us.upload_to_gsheet(json '[{\"col1\": \"row1\", \"col2\": 1}, {\"col1\": \"row2\", \"col2\": 2}]', \"https://docs.google.com/spreadsheets/d/xxxxxxxxx\", \"my worksheet\", \"write_truncate\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.upload_to_gsheet(json '[{\"col1\": \"row1\", \"col2\": 1}, {\"col1\": \"row2\", \"col2\": 2}]', \"https://docs.google.com/spreadsheets/d/xxxxxxxxx\", \"my worksheet\", \"write_truncate\")\n</code></pre> <pre>\n<code>+---------------+\n| result        |\n+---------------+\n| DATA_UPLOADED |\n+---------------+\n</code>\n</pre>"},{"location":"bigfunctions/upsert/","title":"upsert - BigQuery","text":"<p> bigfunctions  &gt; upsert </p>"},{"location":"bigfunctions/upsert/#upsert","title":"upsert","text":"<p>Signature <pre><code>upsert(query_or_table_or_view, destination_table, insertion_mode, primary_keys, recency_field)\n</code></pre></p> <p>Description</p> <p>Merges <code>query_or_table_or_view</code> into the <code>destination_table</code>.</p> <p>A record is identified by its <code>primary_keys</code>. A unique combination of those fields is a unique record. Before the merging operation, the records are identified and deduplicated according to the <code>primary_keys</code>. If <code>recency_field</code> is filled then the last record version is kept else it is chosen arbitrarily.</p> Param Possible values <code>query_or_table_or_view</code> Can be a fully qualified table or view <code>(&lt;project-id&gt;.)?&lt;dataset_id&gt;.&lt;table_or_view_name&gt;</code>.  Can also be a plain query in BigQuery Standard SQL. <code>destination_table</code> Must be a fully qualified table <code>(&lt;project-id&gt;.)?&lt;dataset_id&gt;.&lt;table_or_view_name&gt;</code>. <code>insertion_mode</code> Three insertion mode are available:<ul><li> <code>\"insert_only\"</code>: existing records in <code>query_or_table_or_view</code> and not existing in <code>destination_table</code> are inserted. Deletion and update are not possible. </li><li> <code>\"delta\"</code>: same as <code>insert_only</code> with the updatable records. Records existing both in <code>query_or_table_or_view</code> and in  <code>destination_table</code> are updated. If <code>recency_field</code> is filled, only the most recent version from source and destination is kept. </li><li> <code>\"full\"</code>: same as <code>delta</code> with the deletable records. Records not existing in <code>query_or_table_or_view</code> and existing in <code>destination_table</code> are deleted. </li> </ul> <code>primary_keys</code> Combination of field identifying a record. If <code>primary_keys = []</code>, every row will be considered as a unique record. <code>recency_field</code> Orderable field (ie. <code>timestamp</code>, <code>integer</code>, ...) to identify the relative frechness of a record version. <p>Examples</p> <p>1. Merge tables in delta mode</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.upsert('dataset_id.source_table_or_view', 'dataset_id.destination_table', 'delta', ['id'], 'timestamp_field');\n</code></pre> <pre><code>call bigfunctions.us.upsert('dataset_id.source_table_or_view', 'dataset_id.destination_table', 'delta', ['id'], 'timestamp_field');\n</code></pre> <pre><code>call bigfunctions.europe_west1.upsert('dataset_id.source_table_or_view', 'dataset_id.destination_table', 'delta', ['id'], 'timestamp_field');\n</code></pre> <p>2. Merge from query in full</p> EUUSeurope-west1 <pre><code>call bigfunctions.eu.upsert('select * from dataset_id.source_table_or_view where filter_field = true', 'dataset_id.destination_table', 'full', ['id'], null);\n</code></pre> <pre><code>call bigfunctions.us.upsert('select * from dataset_id.source_table_or_view where filter_field = true', 'dataset_id.destination_table', 'full', ['id'], null);\n</code></pre> <pre><code>call bigfunctions.europe_west1.upsert('select * from dataset_id.source_table_or_view where filter_field = true', 'dataset_id.destination_table', 'full', ['id'], null);\n</code></pre>"},{"location":"bigfunctions/url_decode/","title":"url_decode - BigQuery","text":"<p> bigfunctions  &gt; url_decode </p>"},{"location":"bigfunctions/url_decode/#url_decode","title":"url_decode","text":"<p>Signature <pre><code>url_decode(url_encoded_string)\n</code></pre></p> <p>Description</p> <p>Decode <code>url_encoded_string</code> (inspired from this stackoverflow solution)</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.url_decode('http%3A%2F%2Fwww.example.com%2Fhello%3Fv%3D12345')\n</code></pre> <pre><code>select bigfunctions.us.url_decode('http%3A%2F%2Fwww.example.com%2Fhello%3Fv%3D12345')\n</code></pre> <pre><code>select bigfunctions.europe_west1.url_decode('http%3A%2F%2Fwww.example.com%2Fhello%3Fv%3D12345')\n</code></pre> <pre>\n<code>+--------------------------------------+\n| string                               |\n+--------------------------------------+\n| http://www.example.com/hello?v=12345 |\n+--------------------------------------+\n</code>\n</pre>"},{"location":"bigfunctions/validate_address/","title":"validate_address - BigQuery","text":"<p> bigfunctions  &gt; validate_address </p>"},{"location":"bigfunctions/validate_address/#validate_address","title":"validate_address","text":"<p>Signature <pre><code>validate_address(address)\n</code></pre></p> <p>Description</p> <p>Validate <code>address</code> using Google Maps</p> <p>Examples</p> <p>1. Correct address</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.validate_address('1 Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France')\n</code></pre> <pre><code>select bigfunctions.us.validate_address('1 Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France')\n</code></pre> <pre><code>select bigfunctions.europe_west1.validate_address('1 Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France')\n</code></pre> <pre>\n<coden| validation_result                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |\n+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| {'result': {'verdict': {'inputGranularity': 'PREMISE',\n  'validationGranularity': 'PREMISE',\n  'geocodeGranularity': 'PREMISE',\n  'addressComplete': True},\n  'address': {'formattedAddress': '1 Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France',\n  ...},\n  'geocode': {'location': {'latitude': 48.8698877, 'longitude': 2.3079341},\n  ...,\n  'bounds': {'low': {'latitude': 48.8698877, 'longitude': 2.3079341},\n    'high': {'latitude': 48.8698877, 'longitude': 2.3079341}},\n  ...}},\n'responseId': ...}\n |\n+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n</code>\n</pre> <p>2. Address with inference</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.validate_address('1 Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France')\n</code></pre> <pre><code>select bigfunctions.us.validate_address('1 Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France')\n</code></pre> <pre><code>select bigfunctions.europe_west1.validate_address('1 Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France')\n</code></pre> <pre>\n<coden| validation_result|\nn| {'result': {'verdict': {'inputGranularity': 'PREMISE',\n  'validationGranularity': 'PREMISE',\n  'geocodeGranularity': 'PREMISE',\n  'addressComplete': True,\n  'hasUnconfirmedComponents': True,\n  'hasInferredComponents': True},\n  'address': {\n    'formattedAddress': '1 Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France',\n    'addressComponents': [\n      {'componentName': {'text': '1', 'languageCode': 'fr'},\n        'componentType': 'street_number',\n        'confirmationLevel': 'CONFIRMED'},\n      {'componentName': {'text': 'rue des champs elysees', 'languageCode': 'fr'},\n        'componentType': 'route',\n        'confirmationLevel': 'UNCONFIRMED_BUT_PLAUSIBLE'},\n      ...,]\n    'unconfirmedComponentTypes': ['route']}\n  'geocode': {'location': {'latitude': 48.8698877, 'longitude': 2.3079341},\n  ...,\n  'bounds': {'low': {'latitude': 48.8698877, 'longitude': 2.3079341},\n    'high': {'latitude': 48.8698877, 'longitude': 2.3079341}},\n  ...}},\n'responseId': ...}\n |\nn</code>\n</pre> <p>3. Route granularity</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.validate_address('Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France')\n</code></pre> <pre><code>select bigfunctions.us.validate_address('Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France')\n</code></pre> <pre><code>select bigfunctions.europe_west1.validate_address('Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France')\n</code></pre> <pre>\n<coden| validation_result|\nn| {'result': {'verdict': {inputGranularity': 'ROUTE',\n  'validationGranularity': 'ROUTE',\n  'geocodeGranularity': 'ROUTE'},\n  'address': {\n    'formattedAddress': 'Avenue des Champs-\u00c9lys\u00e9es, 75008 Paris, France',\n    'addressComponents': [\n      {'componentName': {'text': 'Avenue des Champs-\u00c9lys\u00e9es',\n        'languageCode': 'fr'},\n        'componentType': 'route',\n        'confirmationLevel': 'CONFIRMED'},\n      ...,]\n    'missingComponentTypes': ['street_number']}\n  'geocode': {'location': {'latitude': 48.8729602, 'longitude': 2.2978526},\n  ...,\n  'bounds': {'low': {'latitude': 48.8655318, 'longitude': 2.2952047},\n    'high': {'latitude': 48.8748338, 'longitude': 2.3200376}},\n  ...}},\n'responseId': ...}\n |\nn</code>\n</pre>"},{"location":"bigfunctions/weighted_average/","title":"weighted_average - BigQuery","text":"<p> bigfunctions  &gt; weighted_average </p>"},{"location":"bigfunctions/weighted_average/#weighted_average","title":"weighted_average","text":"<p>Signature <pre><code>weighted_average(element, weight)\n</code></pre></p> <p>Description</p> <p>Returns the weigthed average elements.</p> <p>Examples</p> <p>Calculate average unit price</p> EUUSeurope-west1 <pre><code>with sample_data as (\n\n  select 10 as grade, 1 as ponderation\n  union all\n  select 13 as grade, 2 as ponderation\n\n)\n\n\nselect bigfunctions.eu.weighted_average(grade, ponderation)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select 10 as grade, 1 as ponderation\n  union all\n  select 13 as grade, 2 as ponderation\n\n)\n\n\nselect bigfunctions.us.weighted_average(grade, ponderation)\nfrom sample_data\n</code></pre> <pre><code>with sample_data as (\n\n  select 10 as grade, 1 as ponderation\n  union all\n  select 13 as grade, 2 as ponderation\n\n)\n\n\nselect bigfunctions.europe_west1.weighted_average(grade, ponderation)\nfrom sample_data\n</code></pre> <pre>\n<code>+------------------+\n| weighted_average |\n+------------------+\n| 12               |\n+------------------+\n</code>\n</pre>"},{"location":"bigfunctions/xml2json/","title":"xml2json - BigQuery","text":"<p> bigfunctions  &gt; xml2json </p>"},{"location":"bigfunctions/xml2json/#xml2json","title":"xml2json","text":"<p>Signature <pre><code>xml2json(xml)\n</code></pre></p> <p>Description</p> <p>Returns JSON as a string for given XML string</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.xml2json('&lt;a&gt;&lt;b&gt;foo&lt;/b&gt;&lt;/a&gt;')\n</code></pre> <pre><code>select bigfunctions.us.xml2json('&lt;a&gt;&lt;b&gt;foo&lt;/b&gt;&lt;/a&gt;')\n</code></pre> <pre><code>select bigfunctions.europe_west1.xml2json('&lt;a&gt;&lt;b&gt;foo&lt;/b&gt;&lt;/a&gt;')\n</code></pre> <pre>\n<code>+-------------------+\n| json              |\n+-------------------+\n| {\"a\":{\"b\":\"foo\"}} |\n+-------------------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.xml2json('&lt;a&gt;&lt;/a&gt;')\n</code></pre> <pre><code>select bigfunctions.us.xml2json('&lt;a&gt;&lt;/a&gt;')\n</code></pre> <pre><code>select bigfunctions.europe_west1.xml2json('&lt;a&gt;&lt;/a&gt;')\n</code></pre> <pre>\n<code>+----------+\n| json     |\n+----------+\n| {\"a\":\"\"} |\n+----------+\n</code>\n</pre> EUUSeurope-west1 <pre><code>select bigfunctions.eu.xml2json('&lt;a&gt;&lt;/a')\n</code></pre> <pre><code>select bigfunctions.us.xml2json('&lt;a&gt;&lt;/a')\n</code></pre> <pre><code>select bigfunctions.europe_west1.xml2json('&lt;a&gt;&lt;/a')\n</code></pre> <pre>\n<code>+------+\n| json |\n+------+\n| null |\n+------+\n</code>\n</pre>"},{"location":"bigfunctions/xml_extract/","title":"xml_extract - BigQuery","text":"<p> bigfunctions  &gt; xml_extract </p>"},{"location":"bigfunctions/xml_extract/#xml_extract","title":"xml_extract","text":"<p>Signature <pre><code>xml_extract(xml, x_path)\n</code></pre></p> <p>Description</p> <p>Returns content extracted from XML from given XPATH</p> <p>Examples</p> <p>1. Only one element for the xpath</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.xml_extract(\"&lt;customer&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;/customer&gt;\", \"/customer/name\")\n</code></pre> <pre><code>select bigfunctions.us.xml_extract(\"&lt;customer&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;/customer&gt;\", \"/customer/name\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.xml_extract(\"&lt;customer&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;/customer&gt;\", \"/customer/name\")\n</code></pre> <pre>\n<code>+-----------------+\n| extracted_value |\n+-----------------+\n| [\"John Doe\"]    |\n+-----------------+\n</code>\n</pre> <p>2. Multiple elements for the xpath</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.xml_extract(\"&lt;customer&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;name&gt;Jane Doe&lt;/name&gt;&lt;/customer&gt;\", \"/customer/name\")\n</code></pre> <pre><code>select bigfunctions.us.xml_extract(\"&lt;customer&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;name&gt;Jane Doe&lt;/name&gt;&lt;/customer&gt;\", \"/customer/name\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.xml_extract(\"&lt;customer&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;name&gt;Jane Doe&lt;/name&gt;&lt;/customer&gt;\", \"/customer/name\")\n</code></pre> <pre>\n<code>+--------------------------+\n| extracted_value          |\n+--------------------------+\n| [\"John Doe\", \"Jane Doe\"] |\n+--------------------------+\n</code>\n</pre> <p>3. Incorrect xpath</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.xml_extract(\"&lt;customer&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;/customer&gt;\", \"/customer/na\")\n</code></pre> <pre><code>select bigfunctions.us.xml_extract(\"&lt;customer&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;/customer&gt;\", \"/customer/na\")\n</code></pre> <pre><code>select bigfunctions.europe_west1.xml_extract(\"&lt;customer&gt;&lt;name&gt;John Doe&lt;/name&gt;&lt;/customer&gt;\", \"/customer/na\")\n</code></pre> <pre>\n<code>+-----------------+\n| extracted_value |\n+-----------------+\n| null            |\n+-----------------+\n</code>\n</pre>"},{"location":"bigfunctions/z_scores/","title":"z_scores - BigQuery","text":"<p> bigfunctions  &gt; z_scores </p>"},{"location":"bigfunctions/z_scores/#z_scores","title":"z_scores","text":"<p>Signature <pre><code>z_scores(arr)\n</code></pre></p> <p>Description</p> <p>Compute <code>z_scores</code> for each value of <code>arr</code> array.</p> <p>The Z-Score is the number of standard deviations by which the value is above or below the mean value.</p> <p>Examples</p> EUUSeurope-west1 <pre><code>select bigfunctions.eu.z_scores([1, 2, 3, 4, 5])\n</code></pre> <pre><code>select bigfunctions.us.z_scores([1, 2, 3, 4, 5])\n</code></pre> <pre><code>select bigfunctions.europe_west1.z_scores([1, 2, 3, 4, 5])\n</code></pre> <pre>\n<code>+-----------------------------------+\n| z_scores                          |\n+-----------------------------------+\n| [-1.414, -0.707, 0, 0.707, 1.414] |\n+-----------------------------------+\n</code>\n</pre>"}]}